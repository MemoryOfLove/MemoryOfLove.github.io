{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog",
    "subtitle": "",
    "icon": "http://jluyeyu.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://jluyeyu.com",
    "items": [
        {
            "id": "http://jluyeyu.com/javascript/%E6%8E%A8%E8%8D%90%E6%89%8B%E5%86%99%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "url": "http://jluyeyu.com/javascript/%E6%8E%A8%E8%8D%90%E6%89%8B%E5%86%99%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "title": "推荐一个前端js练习网站",
            "date_published": "2022-10-21T02:00:00.000Z",
            "content_html": "<h2 id=\"推荐一个前端js练习网站\"><a class=\"anchor\" href=\"#推荐一个前端js练习网站\">#</a> 推荐一个前端 js 练习网站</h2>\n<h3 id=\"1-背景\"><a class=\"anchor\" href=\"#1-背景\">#</a> 1. 背景</h3>\n<p>通常面试的时候，面试官会提一些 <code>JavaScript</code>  手写的面试题，主要是为了考察面试者 <code>JavaScript</code>  基础的掌握程度。这些题目一般包含一些常用 api 或者功能的简单实现。练习的时候虽然也能写出来，但是因为并不能确定是否满足所有情况，对于正确性无法确定。</p>\n<p>基于上述背景，推荐一个很好用的前端 js 练习网站<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaWdmcm9udGVuZC5kZXYvcHJvYmxlbQ==\"> Front-End Interview Coding Problems | BFE.dev - prepare for Front-End job interviews.</span></p>\n<h3 id=\"2介绍\"><a class=\"anchor\" href=\"#2介绍\">#</a> 2. 介绍</h3>\n<p>该网站包含 175 道题，大部分是前端 <code>CSS</code>  和 <code>JavaScript</code>  题目，题目质量感觉不错。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/js-question-all.jpg\" alt=\"题目列表\" /></p>\n<p>和 leetcode 一样，每道题目都包含多个用例，所有用例通过就算完成。也包含讨论区等，可以查看各位 dalao 的写法。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/js-promise.all.jpg\" alt=\"编写环境展示\" /></p>\n<h3 id=\"3总结\"><a class=\"anchor\" href=\"#3总结\">#</a> 3. 总结</h3>\n<p>这是一个非常好的网站，十分适合新手练习和熟悉常用 api 的写法。</p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/hello-blog/",
            "url": "http://jluyeyu.com/hello-blog/",
            "title": "本站说明",
            "date_published": "2022-10-21T01:51:50.462Z",
            "content_html": "<p>​\t本网站主要是分享前端的知识，包括 leetcode 算法题、面试经验、javascript、html、css、前端小技巧、常见框架 (vue、react)、第三方库等使用，也会分享一些自己的学习成长过程、和项目学习经验，以上。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/headicons/m8.jpg\" alt=\"图1\" /></p>\n",
            "tags": []
        },
        {
            "id": "http://jluyeyu.com/javascript/GA%20tracking/",
            "url": "http://jluyeyu.com/javascript/GA%20tracking/",
            "title": "在 React JS 应用程序中借助Google Tag Manager实现 Google Analytics",
            "date_published": "2022-07-10T10:34:52.000Z",
            "content_html": "<h1 id=\"在-react-js-应用程序中借助google-tag-manager实现-google-analytics\"><a class=\"anchor\" href=\"#在-react-js-应用程序中借助google-tag-manager实现-google-analytics\">#</a> 在 React JS 应用程序中借助 Google Tag Manager 实现 Google Analytics</h1>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>几乎每个网站都会统计自身的浏览状况：日 IP、PV、跳出率、转换率、浏览者属性等等。了解这些数据有助于更好地改进服务。 <code>Google Analytics</code>  是一个非常好用的用户活动追踪工具，可以满足大多数需求，接下来会介绍一些如何在 <code>React JS</code>  应用程序中实现  <code>Google Analytics(GA)</code>  和  <code>Google Tag Manager(GTM)</code> 。</p>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<h3 id=\"gtm\"><a class=\"anchor\" href=\"#gtm\">#</a> GTM</h3>\n<p><code>GTM</code>  是谷歌开发的跟踪代码管理器，可以在平台上添加和更新代码，用于转化跟踪、网站分析、再营销等用途。其优点是灵活性，无需修改项目源代码就可以部署更新，<br />\n并且网站统计分析的代码可以统一管理，可以添加 js,html, 图片等模板，与第三方工具高度集成 (其中就包括 <code>GA</code> ), 方便调试。</p>\n<p>个人感觉在跟踪的过程中起到的是中介的作用，数据从本地代码先经过 <code>GTM</code>  再传到 <code>GA</code></p>\n<h3 id=\"ga\"><a class=\"anchor\" href=\"#ga\">#</a> GA</h3>\n<p><code>GA</code>  是谷歌提供的一种网络分析服务，用于跟踪和报告网站流量，目前是谷歌营销平台品牌内的一个平台</p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<h3 id=\"1-将-gtm-容器添加到应用程序中\"><a class=\"anchor\" href=\"#1-将-gtm-容器添加到应用程序中\">#</a> 1. 将 GTM 容器添加到应用程序中</h3>\n<ul>\n<li>方法一：通过 <code>Package</code>  添加 <code>GTM Container Code</code>  (推荐)</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i react-gtm-module</pre></td></tr></table></figure><p>要使用此方法初始化  <code>GTM</code> ，我们需要在  <code>app.js</code>  中引入该包并提供 <code>GTM ID</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> TagManager <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-gtm-module\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> tagManagerArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  gtmId<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;YOUR GTM ID>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TagManager<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>tagManagerArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>方法二<br />\n将此代码粘贴到 <code>index.html</code>  中 &lt;head&gt; 靠前位置，</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- Google Tag Manager --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">w<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"gtm.start\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> <span class=\"token string\">\"gtm.js\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      j <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      dl <span class=\"token operator\">=</span> l <span class=\"token operator\">!=</span> <span class=\"token string\">\"dataLayer\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"&amp;l=\"</span> <span class=\"token operator\">+</span> l <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    j<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    j<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.googletagmanager.com/gtm.js?id=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> dl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    f<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dataLayer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;YOUR GTM ID>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">&lt;!-- End Google Tag Manager --></span></pre></td></tr></table></figure><p>然后在 <code>&lt;body&gt;</code>  中粘贴此代码：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 谷歌标签管理器 (noscript) --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> https://www.googletagmanager.com/ns.html?id= &lt;YOUR GTM ID><span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span><span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span>hidden</span><span class=\"token punctuation\">\"</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- 结束 Google Tag Manager (noscript) --></span></pre></td></tr></table></figure><p>例子如下:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>%PUBLIC_URL%/favicon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-color<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Web site created using create-react-app<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>%PUBLIC_URL%/logo192.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>%PUBLIC_URL%/manifest.json<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Google Tag Manager --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">w<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"gtm.start\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> <span class=\"token string\">\"gtm.js\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          j <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          dl <span class=\"token operator\">=</span> l <span class=\"token operator\">!=</span> <span class=\"token string\">\"dataLayer\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"&amp;l=\"</span> <span class=\"token operator\">+</span> l <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        j<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        j<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.googletagmanager.com/gtm.js?id=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> dl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        f<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dataLayer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;YOUR GTM ID>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">&lt;!-- End Google Tag Manager --></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Google Tag Manager (noscript) --></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.googletagmanager.com/ns.html?id=&lt;YOUR GTM ID><span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span><span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span>hidden</span><span class=\"token punctuation\">\"</span></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">&lt;!-- End Google Tag Manager (noscript) --></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span>You need to enable JavaScript to run this app.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>验证是否成功：<br />\n可以直接在开发者工具 &gt; 网络，搜索是否存在 gtm 相关的数据<br />\n<img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%E9%85%8D%E7%BD%AE.png\" alt=\"\" /></p>\n<h3 id=\"添加-datalayer-数据事件\"><a class=\"anchor\" href=\"#添加-datalayer-数据事件\">#</a> 添加 dataLayer 数据 / 事件</h3>\n<p>在合适的地点添加类似如下的代码即可</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TagManager<span class=\"token punctuation\">.</span><span class=\"token function\">dataLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  dataLayer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    event<span class=\"token operator\">:</span> <span class=\"token string\">\"your event\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    userActionProps<span class=\"token operator\">:</span> <span class=\"token string\">\"your value\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>验证方法是在控制台输出 dataLayer<br />\n<img data-src=\"https://miro.medium.com/max/1400/0*Z5lmp18jGPRzt3hC.png\" alt=\"事件验证\" /></p>\n<h3 id=\"2-设置-gtm-的变量触发器代码\"><a class=\"anchor\" href=\"#2-设置-gtm-的变量触发器代码\">#</a> 2. 设置  <code>GTM</code>  的变量 / 触发器 / 代码</h3>\n<p>首先设置数据层的变量，该变量应该和 dataLayer 设置时名称是一样的。<br />\n<img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png\" alt=\"\" /></p>\n<p>然后设置触发器</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%E8%A7%A6%E5%8F%91%E5%99%A8%E9%85%8D%E7%BD%AE.png\" alt=\"\" /></p>\n<p>之后设置 tag 和 GA 进行关联，可以选择 GA4 配置和 GA4 事件</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%20GA4%E4%BB%A3%E7%A0%81%E7%B1%BB%E5%9E%8B%E9%85%8D%E7%BD%AE.png\" alt=\"\" /></p>\n<p>输入 id-&gt;GA 数据流的 ID，和触发条件的事件。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%20GA4%E9%85%8D%E7%BD%AE.png\" alt=\"\" /></p>\n<p>然后配置 GA4 事件，该事件触发时，GA 会接受到事件</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/others/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%283%29/gtm%20GA4%E4%BA%8B%E4%BB%B6%E9%85%8D%E7%BD%AE.png\" alt=\"\" /></p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/react/react%E8%87%AA%E5%AE%9A%E4%B9%89hook/",
            "url": "http://jluyeyu.com/react/react%E8%87%AA%E5%AE%9A%E4%B9%89hook/",
            "title": "react自定义hook",
            "date_published": "2022-06-13T12:20:52.000Z",
            "content_html": "<h1 id=\"react自定义hook\"><a class=\"anchor\" href=\"#react自定义hook\">#</a> react 自定义 hook</h1>\n<h3 id=\"1-什么是自定义hook\"><a class=\"anchor\" href=\"#1-什么是自定义hook\">#</a> 1. 什么是自定义 hook</h3>\n<p>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</p>\n<p><code>函数名</code> ：以 “use” 开头，比如 useState。为什么要以 “use” 开头。这是因为，如果不以 “use” 开头的话，无法判断这个函数是否包含对其内部 Hook 的调用，React 将无法自动检查这个自定义 Hook 是否违反了 Hook 的规则。</p>\n<p><code>参数</code> ：并没有特殊要求，只是 React 官网中有提到过，可以接收另一个 Hook 的返回值作为参数，实现在多个 Hook 之间传递信息的功能。</p>\n<p><code>函数内部</code> ：在函数内部可以调用其他的 Hook，但是要遵循两个规则：</p>\n<ul>\n<li>\n<p>只在最顶层使用 Hook ，不要在循环，条件或嵌套函数中调用 Hook，这是因为 React 是靠 Hook 调用的顺序来知道哪个 state 对于哪个 useState 的。</p>\n</li>\n<li>\n<p>自定义 hooks 由 React 内置的 hook 或其他的自定义 hook 组成。因此一个自定义 hook 本质是一个或多个 hook 构成的新组合。如果一个自定义 hook 没有使用任何的内部 hook，那它就不是一个自定义 hook，也不应该以 &quot;use&quot; 为前缀。</p>\n</li>\n</ul>\n<h3 id=\"2-使用场景\"><a class=\"anchor\" href=\"#2-使用场景\">#</a> 2. 使用场景</h3>\n<p>让组件的通用逻辑复用更简单，可以把包含状态和事件处理的所有实现细节，移动到这个自定义 hook 中。另外，这个自定义 hook 返回一个数组，包含状态和一些更新状态函数。</p>\n<h3 id=\"3-如何使用\"><a class=\"anchor\" href=\"#3-如何使用\">#</a> 3. 如何使用</h3>\n<p>自定义 hook 是定义在一个 js 或 ts 文件中，最后用 export 导出，故用 import 引入使用：</p>\n<p>React 提供了多个内部 Hook，在自定义 Hook 的内部，一般都是利用内部 Hook，进行组装和扩展，来自定义各种功能的 Hook。<br />\n其中比较常见使用的 hooks 是<br />\n <code>useState</code> , <code>useRef</code> , <code>useEffect/useLayoutEffect</code> 。</p>\n<p>而从一个自定义 hook 中需要返回多个值时最佳的做法是返回一个数组，并利用数组进行解构。</p>\n<h3 id=\"4-案例\"><a class=\"anchor\" href=\"#4-案例\">#</a> 4. 案例</h3>\n<p>实现一个检测 React 组件外部点击事件的 <code>useOutsideClick</code> ，其使用方式大致如下所示</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClickOutside</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//dosomething</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useOutsideClick</span><span class=\"token punctuation\">(</span>handleClickOutside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//dosomething</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从上述的使用方式上，可以首先写出如下的代码，输入 <code>callback</code> ，输出一个 <code>ref</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOutsideClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 具体代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由于这个 <code>hook</code>  主要是处理点击事件的，所以首先需要添加点击事件，并且在销毁时移除添加的事件，为了能监听所有的点击事件，是在 document 上添加。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOutsideClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>目前版本所有点击都会触发 <code>callback</code> ，所以接下来就是过滤掉自身触发的 <code>onclick</code>  事件。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOutsideClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述的代码已经满足了要求，但是还有一点可以改进的，就是可能某些场景下，存在一个触发事件的边界，即外部可以通过 <code>stopPropagation</code>  来停止事件的传播。如下所示：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClickOutside</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//dosomething</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useOutsideClick</span><span class=\"token punctuation\">(</span>handleClickOutside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//dosomething</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleHeaderClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleHeaderClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>目前的版本并不适用与当前情况，因为事件中途停止冒泡了，所以无法触发在 <code>document</code>  上的 <code>callback</code></p>\n<p>为了实现上述功能，可以将冒泡阶段的事件处理放在捕获阶段进行处理。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOutsideClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-参考\"><a class=\"anchor\" href=\"#5-参考\">#</a> 5. 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LWhvb2stZGV0ZWN0LWNsaWNrLW91dHNpZGUtY29tcG9uZW50Lw==\">React Hook: Detect click outside of Component</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LXVzZWxvY2Fsc3RvcmFnZS1ob29rLw==\">React Hook: Using the Local Storage</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LWN1c3RvbS1ob29rLWNoZWNrLWlmLW92ZXJmbG93Lw==\">React Hook: Check if Overflow</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LWhvb2stc2Nyb2xsLWRpcmVjdGlvbi8=\">React Hook: Get Scroll Direction</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9iaW53aWVydWNoLmRlL3JlYWN0LWhvb2stc2Nyb2xsYmFyLXdpZHRoLw==\">React Hook: Get Scrollbar Width</span></li>\n</ul>\n",
            "tags": [
                "react",
                "react"
            ]
        },
        {
            "id": "http://jluyeyu.com/javascript/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/",
            "url": "http://jluyeyu.com/javascript/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/",
            "title": "服务端渲染",
            "date_published": "2022-03-17T09:25:52.000Z",
            "content_html": "<h4 id=\"js中的事件委托\"><a class=\"anchor\" href=\"#js中的事件委托\">#</a> js 中的事件委托</h4>\n<h2 id=\"服务端渲染与客户端渲染\"><a class=\"anchor\" href=\"#服务端渲染与客户端渲染\">#</a> 服务端渲染与客户端渲染</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念：</h3>\n<ol>\n<li><strong>服务端渲染 (SSR):</strong></li>\n</ol>\n<p>​\t在服务器端完成把数据和模板转换成最终的  <code>HTML</code>  文件，然后浏览器接收到这个文件，就可以直接解析展示。</p>\n<ol start=\"2\">\n<li><strong>客户端渲染 (CSR)</strong></li>\n</ol>\n<p>​\t一个网页是由  <code>JS</code>  在客户端渲染出来的，而不是服务器直接返回回来的。</p>\n<h3 id=\"服务端渲染优缺点\"><a class=\"anchor\" href=\"#服务端渲染优缺点\">#</a> 服务端渲染优缺点</h3>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点：</h4>\n<ul>\n<li>不占用前端的资源，前端耗时少，尤其是移动端，也可以更省电。</li>\n<li>有利于 SEO。因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息</li>\n<li>使用服务器页面缓存，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点：</h4>\n<ul>\n<li>不利于前后端分离，开发效率低。</li>\n<li>占用服务器端资源，对 html 的解析，对前端来说加快了速度，但是加大了服务器的压力。</li>\n</ul>\n<h3 id=\"客户端渲染优缺点\"><a class=\"anchor\" href=\"#客户端渲染优缺点\">#</a> 客户端渲染优缺点</h3>\n<h4 id=\"优点-2\"><a class=\"anchor\" href=\"#优点-2\">#</a> 优点：</h4>\n<ul>\n<li>不占用前端的资源，前端耗时少，尤其是移动端，也可以更省电。</li>\n<li>有利于 SEO。因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息</li>\n<li>使用服务器页面缓存，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li>\n</ul>\n<h4 id=\"缺点-2\"><a class=\"anchor\" href=\"#缺点-2\">#</a> 缺点：</h4>\n<ul>\n<li>前后端分离，开发效率高。</li>\n<li>用户体验更好，网站做成 SPA（单页面应用）或者部分内容做成 SPA，当用户点击时，不会形成频繁的跳转。</li>\n</ul>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/javascript/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/",
            "url": "http://jluyeyu.com/javascript/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/",
            "title": "事件委托",
            "date_published": "2022-03-13T09:25:52.000Z",
            "content_html": "<h4 id=\"js中的事件委托\"><a class=\"anchor\" href=\"#js中的事件委托\">#</a> js 中的事件委托</h4>\n<p>​\t那什么叫事件委托呢？它还有一个名字叫事件代理， <code>JavaScript</code>  高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理：</p>\n<p>​\t有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台 MM 代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台也会在收到寄给新员工的快递后核实并代为签收。</p>\n<p>​\t这里其实还有 2 层意思的：</p>\n<ul>\n<li>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的 <code>dom</code>  节点是有事件的；</p>\n</li>\n<li>\n<p>第二，新员工也是可以被前台代为签收的，即程序中新添加的 <code>dom</code>  节点也是有事件的。</p>\n</li>\n</ul>\n<h4 id=\"为什么要用事件委托\"><a class=\"anchor\" href=\"#为什么要用事件委托\">#</a> 为什么要用事件委托：</h4>\n<p>一般来说， <code>dom</code>  需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的 <code>dom</code>  需要添加事件处理呢？比如我们有 100 个 <code>li</code> ，每个 <code>li</code>  都有相同的 <code>click</code>  点击事件，可能我们会用 <code>for</code>  循环的方法，来遍历所有的 <code>li</code> ，然后给它们添加事件，那这么做会存在什么影响呢？</p>\n<p>在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与 <code>dom</code>  节点进行交互，访问 <code>dom</code>  的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少 <code>dom</code>  操作的原因；如果要用事件委托，就会将所有的操作放到 <code>js</code>  程序里面，与 <code>dom</code>  的操作就只需要交互一次，这样就能大大的减少与 <code>dom</code>  的交互次数，提高性能；</p>\n<p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的 100 个 <code>li</code> ，就要占用 100 个内存空间，如果是 1000 个，10000 个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p>\n<h4 id=\"事件委托的原理\"><a class=\"anchor\" href=\"#事件委托的原理\">#</a> 事件委托的原理：</h4>\n<p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树， <code>div&gt;ul&gt;li&gt;a</code> ; 比如给最里面的 <code>a</code>  加一个 <code>click</code>  点击事件，那么这个事件就会一层一层的往外执行，执行顺序 <code>a&gt;li&gt;ul&gt;div</code> ，有这样一个机制，那么我们给最外面的 <code>div</code>  加点击事件，那么里面的 <code>ul，li，a</code>  做点击事件的时候，都会冒泡到最外层的 <code>div</code>  上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>\n<h4 id=\"事件委托怎么实现\"><a class=\"anchor\" href=\"#事件委托怎么实现\">#</a> 事件委托怎么实现：</h4>\n<p>终于到了本文的核心部分了，哈哈，在介绍事件委托的方法之前，我们先来看一段一般方法的例子：</p>\n<p>子节点实现相同的功能：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>ul id<span class=\"token operator\">=</span><span class=\"token string\">\"ul1\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">222</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">333</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">444</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr></table></figure><p>实现功能是点击 <code>li</code> ，弹出 123：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> aLi <span class=\"token operator\">=</span> oUl<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>aLi<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        aLi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码的意思很简单，相信很多人都是这么实现的，我们看看有多少次的 <code>dom</code>  操作，首先要找到 <code>ul</code> ，然后遍历 <code>li</code> ，然后点击 <code>li</code>  的时候，又要找一次目标的 <code>li</code>  的位置，才能执行最后的操作，每次点击都要找一次 <code>li</code> ；</p>\n<p>那么我们用事件委托的方式做又会怎么样呢？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   oUl<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里用父级 ul 做事件处理，当 li 被点击时，由于冒泡原理，事件就会冒泡到 ul 上，因为 ul 上有点击事件，所以事件就会触发，当然，这里当点击 ul 的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击 li 才会触发，不怕，我们有绝招：</p>\n<p><code>Event</code>  对象提供了一个属性叫 <code>target</code> ，可以返回事件的目标节点，我们成为事件源，也就是说， <code>target</code>  就可以表示为当前的事件操作的 <code>dom</code> ，但是不是真正操作 <code>dom</code> ，当然，这个是有兼容性的，标准浏览器用 ev.target，IE 浏览器用 event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用 <code>nodeName</code>  来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>　　<span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>　　oUl<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>　　　　<span class=\"token keyword\">var</span> ev <span class=\"token operator\">=</span> ev <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>　　　　<span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> ev<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>　　　　<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>　 　　　　　　 <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>　　　　　　　  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>　　　　<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>　　<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样改下就只有点击 <code>li</code>  会触发事件了，且每次只执行一次 <code>dom</code>  操作，如果 <code>li</code>  数量很多的话，将大大减少 <code>dom</code>  的操作，优化的性能可想而知！</p>\n<p>上面的例子是说 <code>li</code>  操作的是同样的效果，要是每个 <code>li</code>  被点击的效果都不一样，那么用事件委托还有用吗？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"add\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"添加\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"remove\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"删除\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"move\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"移动\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"select\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"选择\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">var</span> Add <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> Remove <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> Move <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"move\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> Select <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Add<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'添加'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            Remove<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            Move<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'移动'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Select<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面实现的效果我就不多说了，很简单，4 个按钮，点击每一个做不同的操作，那么至少需要 4 次 <code>dom</code>  操作，如果用事件委托，能进行优化吗？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">var</span> oBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            oBox<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">var</span> ev <span class=\"token operator\">=</span> ev <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> ev<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'添加'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token string\">'remove'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token string\">'move'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'移动'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token string\">'select'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'选择'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用事件委托就可以只用一次 <code>dom</code>  操作就能完成所有的效果，比上面的性能肯定是要好一些的</p>\n<p>现在讲的都是 <code>document</code>  加载完成的现有 <code>dom</code>  节点下的操作，那么如果是新增的节点，新增的节点会有事件吗？也就是说，一个新员工来了，他能收到快递吗？</p>\n<p>看一下正常的添加节点的方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"添加\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>ul id<span class=\"token operator\">=</span><span class=\"token string\">\"ul1\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">222</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">333</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">444</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr></table></figure><p>现在是移入 <code>li</code> ， <code>li</code>  变红，移出 <code>li</code> ， <code>li</code>  变白，这么一个效果，然后点击按钮，可以向 <code>ul</code>  中添加一个 <code>li</code>  子节点</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">var</span> oBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> aLi <span class=\"token operator\">=</span> oUl<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 鼠标移入变红，移出变白</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>aLi<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                aLi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseover</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                aLi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 添加新节点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            oBtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">var</span> oLi <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                oLi<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                oUl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>oLi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一般的做法，但是你会发现，新增的 <code>li</code>  是没有事件的，说明添加子节点的时候，事件没有一起添加进去，这不是我们想要的结果，那怎么做呢？一般的解决方案会是这样，将 for 循环用一个函数包起来，命名为 <code>mHover</code> ，如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">var</span> oBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> aLi <span class=\"token operator\">=</span> oUl<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">mHover</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 鼠标移入变红，移出变白</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>aLi<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    aLi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseover</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    aLi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">mHover</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 添加新节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            oBtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">var</span> oLi <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                oLi<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                oUl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>oLi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token function\">mHover</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>虽然功能实现了，看着还挺好，但实际上无疑是又增加了一个 <code>dom</code>  操作，在优化性能方面是不可取的，那么有事件委托的方式，能做到优化吗？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">var</span> oBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> oUl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> aLi <span class=\"token operator\">=</span> oUl<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 事件委托，添加的子元素也有事件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            oUl<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseover</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">var</span> ev <span class=\"token operator\">=</span> ev <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> ev<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            oUl<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmouseout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">var</span> ev <span class=\"token operator\">=</span> ev <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> ev<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 添加新节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            oBtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">var</span> oLi <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                oLi<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                oUl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>oLi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看，上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在 <code>js</code>  里面的执行，这样可以大大的减少 <code>dom</code>  操作，这才是事件委托的精髓所在。</p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/leetcode/6.%20Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "url": "http://jluyeyu.com/leetcode/6.%20Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "title": "Z字形变换",
            "date_published": "2022-02-28T04:00:52.000Z",
            "content_html": "<h2 id=\"6-z字形变换\"><a class=\"anchor\" href=\"#6-z字形变换\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvemlnemFnLWNvbnZlcnNpb24v\">6. Z 字形变换</span></h2>\n<p>难度：中等</p>\n<h3 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目：</h3>\n<p>将一个给定字符串  <code>s</code>  根据给定的行数  <code>numRows</code>  ，以从上往下、从左到右进行  <code>Z</code>  字形排列。</p>\n<p>比如输入字符串为  <code>&quot;PAYPALISHIRING&quot;</code>  行数为 3 时，排列如下：</p>\n<pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如： <code>&quot;PAHNAPLSIIGYIR&quot;。</code></p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p><code>string convert(string s, int numRows);</code></p>\n<p>示例 1：</p>\n<pre><code>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3\n输出：&quot;PAHNAPLSIIGYIR&quot;\n</code></pre>\n<p>示例 2：</p>\n<pre><code>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4\n输出：&quot;PINALSIGYAHRPI&quot;\n</code></pre>\n<p>解释：</p>\n<pre><code>P     I    N\nA   L S  I G\nY A   H R\nP     I\n</code></pre>\n<p>示例 3：</p>\n<pre><code>输入：s = &quot;A&quot;, numRows = 1\n输出：&quot;A&quot;\n</code></pre>\n<p>提示：</p>\n<pre><code>1 &lt;= s.length &lt;= 1000\ns 由英文字母（小写和大写）、',' 和 '.' 组成\n1 &lt;= numRows &lt;= 1000\n</code></pre>\n<h3 id=\"想法\"><a class=\"anchor\" href=\"#想法\">#</a> 想法：</h3>\n<h4 id=\"1-数学模拟解法\"><a class=\"anchor\" href=\"#1-数学模拟解法\">#</a> 1. 数学模拟解法</h4>\n<p>对于一个 Z 字形变换，可以很明显的观察出，第一行和最后一行每个元素之间的间隔是 <code>2*numRows-2</code> ，而每一行第一个元素我们又是已知的。那么很容易就会想到遍历行进行模拟。</p>\n<pre><code>0  6    12\n1 57  1113\n24 810 \n3  9\n</code></pre>\n<p>那么如何确定当前行结束呢，这里采用的是轮数来决定。对于上述例子，第一轮指的是</p>\n<pre><code>0   \n1  5\n24\n3\n</code></pre>\n<p>因此可以计算出最大轮数是 <code>Math.ceil(s.length/(2*(numRows)-2));</code></p>\n<p>接下来就是中间行的处理，对于每一轮来说，一行会有两个元素，且每个元素之间的索引差是 <code>2*(numRows-row)-2</code> , 其中 <code>row</code>  表示的就是当前行。那么只需要计算出每一轮第一个元素的索引即可。<br />\n这个也很好计算，因为每行第一个元素就是 <code>row</code> ，而每轮之间的索引差也是固定的，所以可以算出，中间行每轮的第一个元素索引是 <code>row+(2*(numRows)-2)*(count);</code> <br />\n 因此，整个代码就很简单了。</p>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">convert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> numRows</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numRows<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>numRows<span class=\"token operator\">>=</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fill</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row<span class=\"token punctuation\">,</span>s</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> max<span class=\"token operator\">=</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>numRows<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span>row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 中间行需要特别注意</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>row<span class=\"token operator\">!=</span>numRows<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>numRows<span class=\"token operator\">-</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            i<span class=\"token operator\">=</span>row<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>numRows<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>numRows<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2直接模拟法\"><a class=\"anchor\" href=\"#2直接模拟法\">#</a> 2. 直接模拟法</h4>\n<p>上述的模拟还是比较麻烦的，更近一步的，我们会注意到，在 Z 字形变换的时候，填入时行序列是从 <code>0</code>  到 <code>numRows</code> , 再从 <code>numRows</code>  到 <code>0</code> ，我们只要模拟这个行索引的变换过程就可以快速解答出来。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">convert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> numRows</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numRows<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>numRows<span class=\"token operator\">></span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>numRows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> numRows <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            i <span class=\"token operator\">+=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "leetcode"
            ]
        },
        {
            "id": "http://jluyeyu.com/leetcode/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97js%E5%86%99%E6%B3%95/",
            "url": "http://jluyeyu.com/leetcode/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97js%E5%86%99%E6%B3%95/",
            "title": "优先队列js写法",
            "date_published": "2022-02-28T04:00:52.000Z",
            "content_html": "<h3 id=\"优先队列js写法\"><a class=\"anchor\" href=\"#优先队列js写法\">#</a> 优先队列 js 写法</h3>\n<p>​\t普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。</p>\n<p>而在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出的行为特征。实际上采用的是二叉堆的形式进行存储。由于 <code>js</code>  没有提供现成的优先队列，所以记录一下其 js 的实现过程。</p>\n<h4 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路：</h4>\n<p>​\t对于一个完全二叉树来说，一个节点的编号为 <code>i</code> （从 0 开始计算），则其父节点的编号为 <code>Math.floor((i-1)/2</code> , 其左右子节点的编号为 <code>2*i+1</code> 、 <code>2*i+2</code> 。此外对于一个堆来说最重要的就是插入和删除操作。</p>\n<h4 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h4>\n<p>举个例子，假如要在下面的二叉堆（小顶堆）中，再插入 2：</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E6%8F%92%E5%85%A51%20.png\" alt=\"二叉堆插入演示1\" /><br />\n 首先现在最后插入节点 2</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E6%8F%92%E5%85%A52.png\" alt=\"二叉堆插入演示2\" /></p>\n<p>然后因为 2 小于 5，不满足堆的性质，上浮</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E6%8F%92%E5%85%A53.png\" alt=\"二叉堆插入演示2\" /></p>\n<p>然后因为 2 小于 3，不满足堆的性质，继续上浮。最后到顶</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E6%8F%92%E5%85%A54.png\" alt=\"二叉堆插入演示2\" /></p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p>​\t删除与插入相反，删除的是堆顶元素，我们需要找到一个元素来替代堆顶的位置，以保证堆的性质不被破坏。因此进行如下的操作：</p>\n<p>还是以前面建立的二叉堆为例，假如要删除堆顶的 2。则直接先把 2 删除，那么 2 的位置就有一个空穴。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A41%20.png\" alt=\"二叉堆删除演示1\" /></p>\n<p>然后将 <code>5</code>  替换到空穴的位置，然后因为 <code>5&gt;4&gt;3</code>  不满足小顶堆的性质，所以将 5 和 3 交换。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A42%20.png\" alt=\"二叉堆删除2\" /></p>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sortBy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 先把排序方式定下来， 默认值是按从小到大排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortBy <span class=\"token operator\">=</span> sortBy <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 一开始队列的样子，js 中用数组直接表示</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">siftUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">let</span> parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token string\">\"父\"</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 进行上浮</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> parentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        index<span class=\"token operator\">=</span>parentIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 终止</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">let</span> maxIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 左节点是最值的话</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        left <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>maxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        maxIndex <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">// 右节点是最值的话</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        right <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>maxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        maxIndex <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token comment\">// 如果当前节点不是最值，那么当前节点的值要往下传递，让下面的最值冒泡上来</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxIndex <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> maxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span>maxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// 入队 -- 插入元素</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token function\">enQueue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">siftUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">// 出队 -- 获取最值</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token function\">deQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">const</span> top <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// 获取最值 -- 不移除</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// 获取队列中的元素总数</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// 判断当前优先队列是否为空</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// 清空当前队列中的所有元素</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">// 交换节点的值</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL21lbW9yeW9mbG92ZS9wZW4vak9hZVZ4WQ==\">https://codepen.io/memoryoflove/pen/jOaeVxY</span></p>\n",
            "tags": [
                "每日一题",
                "leetcode"
            ]
        },
        {
            "id": "http://jluyeyu.com/react/react%20%E7%AE%80%E6%98%93%E7%89%88useState%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/",
            "url": "http://jluyeyu.com/react/react%20%E7%AE%80%E6%98%93%E7%89%88useState%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/",
            "title": "react 简易版useState实现方式",
            "date_published": "2022-02-27T10:20:52.000Z",
            "content_html": "<h1 id=\"react简易版usestate实现方式\"><a class=\"anchor\" href=\"#react简易版usestate实现方式\">#</a> react 简易版 useState 实现方式</h1>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言：</h3>\n<p>​\t <code>react</code>  的 <code>hooks</code>  是应用的很常见的一个技术，而 <code>useState</code>  更是一个很常见的 <code>hook</code> , 这里介绍其实现方式。写法实际上是 react 源码的简化版。</p>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路：</h3>\n<p>​\t那么首先我们需要知道 <code>hooks</code>  的基础用法。对于 <code>useState</code>  来说比较常见的用法是</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">,</span>setVal<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t为了方便起见，我们采用了简单的 <code>isMount</code>  来记录组件是初次加载还是重新渲染，利用 <code>workInProgressHook</code>  来记录当前工作的 <code>hooks</code> , 利用 <code>schedule</code>  函数来进行调度重新渲染</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> isMount <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> workInProgressHook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> fiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  stateNode<span class=\"token operator\">:</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 保存函数组件 hooks 上的 state,class 组件中上的 (链表)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  memoizedState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  workInProgressHook <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> testRes <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span><span class=\"token function\">stateNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  isMount <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 便于看结果将其返回</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> testRes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span>setNum<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMount<span class=\"token operator\">?</span><span class=\"token string\">'APP初始化'</span><span class=\"token operator\">:</span><span class=\"token string\">'重新加载'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'count对应的值是'</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">,</span><span class=\"token string\">'num对应的值是'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token keyword\">return</span>  count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token keyword\">return</span>  num <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//TODO 补全内容。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>window<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t由于 <code>useState</code>  可能会调用多次，所以必须要将其存储起来，才能保证每次获得的值是一一对应。 <code>react</code>  采用的是链表的方式进行存储的，每个组件都有一个 <code>fiber</code>  与之对应， <code>fiber</code>  上的 <code>memoizedState</code>  就是对应存储的 <code>state</code> 。</p>\n<p>​\t对于 <code>useState</code>  来说，需要返回当前的值，为了记录这个值，采用了 <code>memoizedState</code>  进行记录，当初次加载时创建一个 <code>hook</code> , 其中包含初始值，和修改操作列表。</p>\n<p>​\t然后将其挂在 <code>fiber.memoizedState</code>  的尾部。需要读取的时候，遍历链表获取对应的值。</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      memoizedState<span class=\"token operator\">:</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 初始值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      queue<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t   <span class=\"token comment\">// 对应的更改的操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          pending<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 是第一个 hook 的话，进行赋值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fiber<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      fiber<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 记录到尾部</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      workInProgressHook<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 记录当前链表的尾部</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    workInProgressHook <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    hook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    workInProgressHook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 获取初始状态</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">let</span> baseState<span class=\"token operator\">=</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//TODO , 返回修改值的函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>baseState<span class=\"token punctuation\">,</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后就是具体修改值的函数，如下所示，因为修改的函数可能会多次执行，所以其存储结构采用的是环状列表来实现。对应于上面的 <code>queue</code></p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      memoizedState<span class=\"token operator\">:</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 初始值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      queue<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t\t   <span class=\"token comment\">// 对应的更改的操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          pending<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其每一项都包含一个我们传入的 <code>action</code> 。</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queue<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 环状链表实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> update<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        action<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        next<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token operator\">===</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        update<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>              </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        update<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 指向该链表的最后一个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    queue<span class=\"token punctuation\">.</span>pending<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 触发更新</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整的代码如下图所示</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> isMount <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> workInProgressHook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  stateNode<span class=\"token operator\">:</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 保存函数组件 hooks 上的 state,class 组件中上的 (链表)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  memoizedState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  workInProgressHook <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> testRes <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span><span class=\"token function\">stateNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  isMount <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 便于看结果给一个返回值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> testRes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">APP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span>setNum<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMount<span class=\"token operator\">?</span><span class=\"token string\">'APP初始化'</span><span class=\"token operator\">:</span><span class=\"token string\">'重新加载'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'count对应的值是'</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">,</span><span class=\"token string\">'num对应的值是'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token keyword\">return</span>  count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token keyword\">return</span>  num <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">let</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      memoizedState<span class=\"token operator\">:</span> initialState<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      queue<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          pending<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 是第一个 hook 的话，进行赋值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fiber<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      fiber<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// 记录到尾部</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      workInProgressHook<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 记录当前链表的尾部</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    workInProgressHook <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    hook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    workInProgressHook <span class=\"token operator\">=</span> workInProgressHook<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">// 获取初始状态</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">let</span> baseState<span class=\"token operator\">=</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// 如果存在更新</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">let</span> firstUpdate<span class=\"token operator\">=</span>hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 遍历链表进行更新</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">const</span> firstAction<span class=\"token operator\">=</span>firstUpdate<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baseState'</span><span class=\"token punctuation\">,</span>baseState<span class=\"token punctuation\">,</span>firstAction<span class=\"token punctuation\">,</span><span class=\"token function\">firstAction</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        baseState<span class=\"token operator\">=</span><span class=\"token function\">firstAction</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        firstUpdate<span class=\"token operator\">=</span>firstUpdate<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 环装链表的终止条件，不等于自身</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>firstUpdate<span class=\"token operator\">!==</span>hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token operator\">=</span>baseState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>baseState<span class=\"token punctuation\">,</span><span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>hook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queue<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// 环状链表实现</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">const</span> update<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        action<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        next<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token operator\">===</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        update<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>              </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        update<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        queue<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">// 指向该链表的最后一个元素</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    queue<span class=\"token punctuation\">.</span>pending<span class=\"token operator\">=</span>update<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 触发更新</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>window<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E7%AE%80%E6%98%93%E7%89%88useState.gif\" alt=\"简易版useState演示\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL21lbW9yeW9mbG92ZS9wZW4vd3ZQRUxSTj9lZGl0b3JzPTAwMTE=\">useState 演示地址</span></p>\n",
            "tags": [
                "react",
                "react"
            ]
        },
        {
            "id": "http://jluyeyu.com/react/react%20%E7%AE%80%E6%98%93%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/",
            "url": "http://jluyeyu.com/react/react%20%E7%AE%80%E6%98%93%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/",
            "title": "react简易折叠面板实现",
            "date_published": "2022-02-17T10:20:52.000Z",
            "content_html": "<h1 id=\"react简易折叠面板实现\"><a class=\"anchor\" href=\"#react简易折叠面板实现\">#</a> react 简易折叠面板实现</h1>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言：</h3>\n<p>​\t折叠面板应该是日常开发中用的很多的一个效果，之前也没太接触过，看了下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvY29sbGFwc2UtY24v\"> antd</span> 的折叠面板，但是感觉面板 header 部分可能有些简洁，如果想在头部多加一些东西的话，可能有些麻烦，于是乎就决定自己搞一个。</p>\n<p>​\t为了更加灵活的控制面板是否折叠，只考虑实现一个面板组件，其折叠状态的方法通过 props 进行传递。</p>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路：</h3>\n<p>​\t每个面板折叠、展开的动画效果其实就是去控制 <code>collapse-panel</code>  的 <code>height</code>  变化，并通过 <code>transform</code>  展示动画，所以在一开始就需要记录下每个面板的原始高度，否则在折叠面板后，高度就变为 0 了，这时候计算出来的值也为 0，就无法还原为初始高度了。</p>\n<p>​\t那么怎么计算初始高度呢？react 提供了一个 <code>useRef</code>  可以获取到组件的实例，其 <code>current</code>  上的 <code>scrollheight</code>  就是对应的高度，我们可以在初始化的时候获取并记录它。</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> collapsePanel <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collapseOriginalHeight<span class=\"token punctuation\">,</span>setCollapseOriginalHeight<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setCollapseOriginalHeight</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>collapsePanel<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>scrollHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那么接下来根据折叠 ( <code>collapse</code> ) 来动态的改变对应面板的高度就可以了</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> collapseStyle<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    height<span class=\"token operator\">:</span>collapse<span class=\"token operator\">?</span><span class=\"token string\">'0px'</span><span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>collapseOriginalHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> body<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>bodyClass<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>bodyStyle<span class=\"token punctuation\">,</span>collapseStyle<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>collapsePanel<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后加一个 <code>transition</code>  效果</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.MyCollapsePanel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token selector\">&amp;-body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> height 500ms<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyCollapsePanel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    prefixCls <span class=\"token operator\">=</span> <span class=\"token string\">\"MyCollapsePanel\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    className<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    extra<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    children<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    collapse<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    bodyStyle<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    bordered <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">...</span>others</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> collapsePanel <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collapseOriginalHeight<span class=\"token punctuation\">,</span>setCollapseOriginalHeight<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">setCollapseOriginalHeight</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>collapsePanel<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>scrollHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> bodyClass<span class=\"token operator\">=</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-body</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> collapseStyle<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    height<span class=\"token operator\">:</span>collapse<span class=\"token operator\">?</span><span class=\"token string\">'0px'</span><span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>collapseOriginalHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">const</span> body<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>bodyClass<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>bodyStyle<span class=\"token punctuation\">,</span>collapseStyle<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>collapsePanel<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      </span><span class=\"token punctuation\">&#123;</span>body<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用：</p>\n<p>父组件通过控制 <code>collapse</code>  来显示或折叠面板</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collapse<span class=\"token punctuation\">,</span> setCollapse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCollapse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setCollapse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyCollapsePanel</span></span> <span class=\"token attr-name\">collapse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>collapse<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">//...具体内容&lt;/div></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyCollapsePanel</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;</span></pre></td></tr></table></figure><p>效果展示</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E7%AE%80%E5%8D%95%E6%8A%98%E5%8F%A0%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%B5%8B%E8%AF%95.gif\" alt=\"折叠面板效果展示\" /></p>\n",
            "tags": [
                "react",
                "react"
            ]
        },
        {
            "id": "http://jluyeyu.com/react/create-react-app%E9%85%8D%E7%BD%AEless/",
            "url": "http://jluyeyu.com/react/create-react-app%E9%85%8D%E7%BD%AEless/",
            "title": "create-react-app配置less",
            "date_published": "2022-02-11T14:02:52.000Z",
            "content_html": "<h1 id=\"create-react-app配置less\"><a class=\"anchor\" href=\"#create-react-app配置less\">#</a> create-react-app 配置 less</h1>\n<p>我们一般都是通过 <code>create-react-app</code>  命令来创建的 react 项目，但是这种方式创建默认是对 <code>sass</code>  的配置，是没有 <code>less</code>  的配置的，所以我们就需要自己配置一下。</p>\n<p>不暴露的方式 <code>customize-cra</code>  和  <code>craco</code>  都尝试了，但是可能是因为当前版本过高，均无法正确配置。</p>\n<p>错误：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyYWNrYWYvY3VzdG9taXplLWNyYS9pc3N1ZXMvMzE1\">https://github.com/arackaf/customize-cra/issues/315</span></p>\n<p>最后还是采用 <code>eject</code>  的办法</p>\n<p>首先暴露 webpack</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run <span class=\"token function\">eject</span></pre></td></tr></table></figure><p>然后安装 <code>less</code> , <code>less-loader</code></p>\n<pre><code>npm install less-loader --save\nnpm install less --save\n</code></pre>\n<p>打开  <code>/config/webpack.config.js</code> ，找到如下配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// style files regexes</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> cssRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> cssModuleRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.module\\.css$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> sassRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(scss|sass)$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> sassModuleRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.module\\.(scss|sass)$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr></table></figure><p>在这个代码的下边添加两行  <code>less</code>  的配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// style files regexes</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> cssRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> cssModuleRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.module\\.css$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> sassRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(scss|sass)$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> sassModuleRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.module\\.(scss|sass)$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> lessRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// 新添加的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> lessModuleRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.module\\.less$</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// 新添加的</span></pre></td></tr></table></figure><p>修改 <code>getStyleLoaders</code>  方法</p>\n<p>原本的参数有两个：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> getStyleLoaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cssOptions<span class=\"token punctuation\">,</span> preProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>preProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t   sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加一个新的参数，(便于修改一些选项)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> getStyleLoaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cssOptions<span class=\"token punctuation\">,</span> preProcessor<span class=\"token punctuation\">,</span>preProcessorOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>preProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         options<span class=\"token operator\">:</span> preProcessorOptions</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>全局搜索  <code>test: sassModuleRegex</code> ，找到如下代码位置：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Adds support for CSS Modules, but using SASS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token comment\">// using the extension .module.scss or .module.sass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              test<span class=\"token operator\">:</span> sassModuleRegex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              use<span class=\"token operator\">:</span> <span class=\"token function\">getStyleLoaders</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> isEnvProduction</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token operator\">?</span> shouldUseSourceMap</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token operator\">:</span> isEnvDevelopment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    mode<span class=\"token operator\">:</span> <span class=\"token string\">'local'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    getLocalIdent<span class=\"token operator\">:</span> getCSSModuleLocalIdent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">'sass-loader'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// \"file\" loader makes sure those assets get served by WebpackDevServer.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// When you `import` an asset, you get its (virtual) filename.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// In production, they would get copied to the `build` folder.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// This loader doesn't use a \"test\" so it will catch all modules</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// that fall through the other loaders.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token comment\">// Exclude `js` files to keep \"css\" loader working as it injects</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token comment\">// its runtime that would otherwise be processed through \"file\" loader.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token comment\">// Also exclude `html` and `json` extensions so they get processed</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token comment\">// by webpacks internal loaders.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|mjs|jsx|ts|tsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.html$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.json$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              type<span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>添加  <code>less</code>  的 loader 就完成了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Adds support for CSS Modules, but using SASS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token comment\">// using the extension .module.scss or .module.sass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              test<span class=\"token operator\">:</span> sassModuleRegex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              use<span class=\"token operator\">:</span> <span class=\"token function\">getStyleLoaders</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> isEnvProduction</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token operator\">?</span> shouldUseSourceMap</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token operator\">:</span> isEnvDevelopment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    mode<span class=\"token operator\">:</span> <span class=\"token string\">'local'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    getLocalIdent<span class=\"token operator\">:</span> getCSSModuleLocalIdent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">'sass-loader'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//------------- 从这里往下都是添加的行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              test<span class=\"token operator\">:</span> lessRegex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              exclude<span class=\"token operator\">:</span> lessModuleRegex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              use<span class=\"token operator\">:</span> <span class=\"token function\">getStyleLoaders</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                  importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> isEnvProduction</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token operator\">?</span> shouldUseSourceMap</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token operator\">:</span> isEnvDevelopment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                 <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                  lessOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//less javascriptEnabled 参数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>              <span class=\"token comment\">// Don't consider CSS imports dead code even if the</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>              <span class=\"token comment\">// containing package claims to have no side effects.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>              <span class=\"token comment\">// Remove this when webpack adds a warning or an error for this.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>              <span class=\"token comment\">// See https://github.com/webpack/webpack/issues/6571</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>              sideEffects<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>              test<span class=\"token operator\">:</span> lessModuleRegex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              use<span class=\"token operator\">:</span> <span class=\"token function\">getStyleLoaders</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                  importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> isEnvProduction <span class=\"token operator\">&amp;&amp;</span> shouldUseSourceMap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    getLocalIdent<span class=\"token operator\">:</span> getCSSModuleLocalIdent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                 <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                  sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                  lessOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//less javascriptEnabled 参数</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//------------- 从这里往上都是添加的行</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// \"file\" loader makes sure those assets get served by WebpackDevServer.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// When you `import` an asset, you get its (virtual) filename.</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// In production, they would get copied to the `build` folder.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// This loader doesn't use a \"test\" so it will catch all modules</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// that fall through the other loaders.</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>              <span class=\"token comment\">// Exclude `js` files to keep \"css\" loader working as it injects</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>              <span class=\"token comment\">// its runtime that would otherwise be processed through \"file\" loader.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>              <span class=\"token comment\">// Also exclude `html` and `json` extensions so they get processed</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>              <span class=\"token comment\">// by webpacks internal loaders.</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>              exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|mjs|jsx|ts|tsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.html$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.json$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>              type<span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>配置完成</p>\n",
            "tags": [
                "react",
                "react"
            ]
        },
        {
            "id": "http://jluyeyu.com/react/react%20hooks/",
            "url": "http://jluyeyu.com/react/react%20hooks/",
            "title": "react hooks",
            "date_published": "2022-02-11T05:20:52.000Z",
            "content_html": "<h1 id=\"react-hooks\"><a class=\"anchor\" href=\"#react-hooks\">#</a> React  Hooks</h1>\n<h2 id=\"hooks简介\"><a class=\"anchor\" href=\"#hooks简介\">#</a> Hooks 简介</h2>\n<p>​\t<em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。具体而言，分为以下 Hook</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjYmFzaWMtaG9va3M=\">基础 Hook</span>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate\"> <code>useState</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useeffect\"> <code>useEffect</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext\"> <code>useContext</code> </a></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjYWRkaXRpb25hbC1ob29rcw==\">额外的 Hook</span>\n<ul>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usereducer\"> <code>useReducer</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usecallback\"> <code>useCallback</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo\"> <code>useMemo</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useref\"> <code>useRef</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useimperativehandle\"> <code>useImperativeHandle</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#uselayouteffect\"> <code>useLayoutEffect</code> </a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usedebugvalue\"> <code>useDebugValue</code> </a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基础-hook\"><a class=\"anchor\" href=\"#基础-hook\">#</a> 基础 Hook</h2>\n<h3 id=\"usestate\"><a class=\"anchor\" href=\"#usestate\">#</a>  <code>useState</code></h3>\n<pre><code class=\"language-react\">const [state, setState] = useState(initialState);\n</code></pre>\n<p>返回一个 state，以及更新 state 的函数。</p>\n<p>在初始渲染期间，返回的状态 ( <code>state</code> ) 与传入的第一个参数 ( <code>initialState</code> ) 值相同。</p>\n<p><code>setState</code>  函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入队列。</p>\n<pre><code class=\"language-react\">setState(newState);\n//or\nsetState((value)=&gt;&#123;\n    ...\n    return newState;\n&#125;)\n</code></pre>\n<p>在后续的重新渲染中， <code>useState</code>  返回的第一个值将始终是更新后最新的 state。</p>\n<h4 id=\"函数式更新\"><a class=\"anchor\" href=\"#函数式更新\">#</a> 函数式更新</h4>\n<p>如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给  <code>setState</code> 。该函数将接收先前的 state，并返回一个更新后的值。下面的计数器组件示例展示了  <code>setState</code>  的两种用法：</p>\n<pre><code class=\"language-react\">function Counter(&#123;initialCount&#125;) &#123;\n  const [count, setCount] = useState(initialCount);\n  return (\n    &lt;&gt;\n      Count: &#123;count&#125;\n      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;\n      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;\n      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;\n    &lt;/&gt;\n  );\n&#125;\n</code></pre>\n<p>“+” 和 “-” 按钮采用函数式形式，因为被更新的 state 需要基于之前的 state。但是 “重置” 按钮则采用普通形式，因为它总是把 count 设置回初始值。</p>\n<p><strong>如果你的更新函数返回值与当前 state 完全相同，则随后的重渲染会被完全跳过。</strong></p>\n<h4 id=\"惰性初始-state\"><a class=\"anchor\" href=\"#惰性初始-state\">#</a> 惰性初始 state</h4>\n<p><code>initialState</code>  参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用：</p>\n<pre><code class=\"language-react\">const [state, setState] = useState(() =&gt; &#123;\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n&#125;);\n</code></pre>\n<h3 id=\"useeffect\"><a class=\"anchor\" href=\"#useeffect\">#</a>  <code>useEffect</code></h3>\n<pre><code class=\"language-react\">useEffect(didUpdate);\n</code></pre>\n<p>该 Hook 接收一个包含命令式、且可能有副作用代码的函数。</p>\n<p>首先说一下什么是副作用，<strong>一个纯函数应该只存在输入到输出的映射，如果有其他的作用，便可称之为副作用</strong>。</p>\n<p>在函数组件主体内（这里指在 React 渲染阶段）<strong>改变 DOM、添加订阅、设置定时器、记录日志、ajax 操作</strong>、 等等都是副作用 **(异步操作、延迟操作都算)**，以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。</p>\n<p>使用  <code>useEffect</code>  完成副作用操作。赋值给  <code>useEffect</code>  的函数会在组件渲染到屏幕之后执行。</p>\n<p>默认情况下，effect 将在每轮渲染结束后执行，但你可以选择让它 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjY29uZGl0aW9uYWxseS1maXJpbmctYW4tZWZmZWN0\">在只有某些值改变的时候</span> 才执行。</p>\n<h4 id=\"清除-effect\"><a class=\"anchor\" href=\"#清除-effect\">#</a> 清除 effect</h4>\n<p>通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源。要实现这一点， <code>useEffect</code>  函数需返回一个清除函数。以下就是一个创建订阅的例子：</p>\n<pre><code class=\"language-react\">useEffect(() =&gt; &#123;\n  const subscription = props.source.subscribe();\n  return () =&gt; &#123;\n    // 清除订阅\n    subscription.unsubscribe();\n  &#125;;\n&#125;);\n</code></pre>\n<p>为防止内存泄漏，清除函数会在组件卸载前执行。另外，如果组件多次渲染（通常如此），则<strong>在执行下一个 effect 之前，上一个 effect 就已被清除</strong>。在上述示例中，意味着组件的每一次更新都会创建新的订阅。若想避免每次更新都触发 effect 的执行，请参阅下一小节。</p>\n<h4 id=\"effect-的执行时机\"><a class=\"anchor\" href=\"#effect-的执行时机\">#</a> effect 的执行时机</h4>\n<p>与  <code>componentDidMount</code> 、 <code>componentDidUpdate</code>  不同的是，传给  <code>useEffect</code>  的函数会在浏览器完成布局与绘制<strong>之后</strong>，在一个延迟事件中被调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因为绝大多数操作不应阻塞浏览器对屏幕的更新。</p>\n<p>然而，并非所有 effect 都可以被延迟执行。例如，一个对用户可见的 DOM 变更就必须在浏览器执行下一次绘制前被同步执行，这样用户才不会感觉到视觉上的不一致。（概念上类似于被动监听事件和主动监听事件的区别。）React 为此提供了一个额外的 <a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#uselayouteffect\"> <code>useLayoutEffect</code> </a> Hook 来处理这类 effect。它和  <code>useEffect</code>  的结构相同，区别只是调用时机不同。</p>\n<p>虽然  <code>useEffect</code>  会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。在开始新的更新前，React 总会先清除上一轮渲染的 effect。</p>\n<h4 id=\"effect-的条件执行\"><a class=\"anchor\" href=\"#effect-的条件执行\">#</a> effect 的条件执行</h4>\n<p>默认情况下，effect 会在每轮组件渲染完成后执行。这样的话，一旦 effect 的依赖发生变化，它就会被重新创建。</p>\n<p>然而，在某些场景下这么做可能会矫枉过正。比如，在上一章节的订阅示例中，我们不需要在每次组件更新时都创建新的订阅，而是仅需要在  <code>source</code>  prop 改变时重新创建。</p>\n<p>要实现这一点，可以给  <code>useEffect</code>  传递第二个参数，它是 effect 所依赖的值数组。更新后的示例如下：</p>\n<pre><code class=\"language-react\">useEffect(\n  () =&gt; &#123;\n    const subscription = props.source.subscribe();\n    return () =&gt; &#123;\n      subscription.unsubscribe();\n    &#125;;\n  &#125;,\n  [props.source],\n);\n</code></pre>\n<p>此时，只有当  <code>props.source</code>  改变后才会重新创建订阅。</p>\n<blockquote>\n<p>注意</p>\n<p>如果你要使用此优化方式，请确保数组中包含了<strong>所有外部作用域中会发生变化且在 effect 中使用的变量</strong>，否则你的代码会引用到先前渲染中的旧变量。请参阅文档，了解更多关于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjaXMtaXQtc2FmZS10by1vbWl0LWZ1bmN0aW9ucy1mcm9tLXRoZS1saXN0LW9mLWRlcGVuZGVuY2llcw==\">如何处理函数</span> 以及<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjd2hhdC1jYW4taS1kby1pZi1teS1lZmZlY3QtZGVwZW5kZW5jaWVzLWNoYW5nZS10b28tb2Z0ZW4=\">数组频繁变化时的措施</span> 的内容。</p>\n<p>** 如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（ <code>[]</code> ）作为第二个参数。** 这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行。这并不属于特殊情况 —— 它依然遵循输入数组的工作方式。</p>\n<p>如果你传入了一个空数组（ <code>[]</code> ），effect 内部的 props 和 state 就会一直持有其初始值。尽管传入  <code>[]</code>  作为第二个参数有点类似于  <code>componentDidMount</code>  和  <code>componentWillUnmount</code>  的思维模式，但我们有 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjaXMtaXQtc2FmZS10by1vbWl0LWZ1bmN0aW9ucy1mcm9tLXRoZS1saXN0LW9mLWRlcGVuZGVuY2llcw==\">更好的</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjd2hhdC1jYW4taS1kby1pZi1teS1lZmZlY3QtZGVwZW5kZW5jaWVzLWNoYW5nZS10b28tb2Z0ZW4=\">方式</span> 来避免过于频繁的重复调用 effect。除此之外，请记得 React 会等待浏览器完成画面渲染之后才会延迟调用  <code>useEffect</code> ，因此会使得处理额外操作很方便。</p>\n</blockquote>\n<p>依赖项数组不会作为参数传给 effect 函数。虽然从概念上来说它表现为：所有 effect 函数中引用的值都应该出现在依赖项数组中。未来编译器会更加智能，届时自动创建数组将成为可能。</p>\n<h3 id=\"usecontext\"><a class=\"anchor\" href=\"#usecontext\">#</a>  <code>useContext</code></h3>\n<pre><code class=\"language-react\">const value = useContext(MyContext);\n</code></pre>\n<p>接收一个 context 对象（ <code>React.createContext</code>  的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的  <code>&lt;MyContext.Provider&gt;</code>  的  <code>value</code>  prop 决定。</p>\n<p>当组件上层最近的  <code>&lt;MyContext.Provider&gt;</code>  更新时，该 Hook 会触发重渲染，并使用最新传递给  <code>MyContext</code>  provider 的 context  <code>value</code>  值。即使祖先使用 <a href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactmemo\"> <code>React.memo</code> </a> 或 <a href=\"https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate\"> <code>shouldComponentUpdate</code> </a>，也会在组件本身使用  <code>useContext</code>  时重新渲染。</p>\n<p><code>useContext</code>  的参数必须是 <em>context 对象本身</em>：</p>\n<ul>\n<li><strong>正确：</strong>  <code>useContext(MyContext)</code></li>\n<li><strong>错误：</strong>  <code>useContext(MyContext.Consumer)</code></li>\n<li><strong>错误：</strong>  <code>useContext(MyContext.Provider)</code></li>\n</ul>\n<p>调用了  <code>useContext</code>  的组件总会在 context 值变化时重新渲染。如果重渲染组件的开销较大，你可以 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNTE1NiNpc3N1ZWNvbW1lbnQtNDc0NTkwNjkz\">通过使用 memoization 来优化</span>。</p>\n<p><strong>把如下代码与 Context.Provider 放在一起</strong></p>\n<pre><code class=\"language-react\">const themes = &#123;\n  light: &#123;\n    foreground: &quot;#000000&quot;,\n    background: &quot;#eeeeee&quot;\n  &#125;,\n  dark: &#123;\n    foreground: &quot;#ffffff&quot;,\n    background: &quot;#222222&quot;\n  &#125;\n&#125;;\n\nconst ThemeContext = React.createContext(themes.light);\n\nfunction App() &#123;\n  return (\n    &lt;ThemeContext.Provider value=&#123;themes.dark&#125;&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n&#125;\n\nfunction Toolbar(props) &#123;\n  return (\n    &lt;div&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/div&gt;\n  );\n&#125;\n\nfunction ThemedButton() &#123;\n  const theme = useContext(ThemeContext);  return (    &lt;button style=&#123;&#123; background: theme.background, color: theme.foreground &#125;&#125;&gt;      I am styled by theme context!    &lt;/button&gt;  );\n&#125;\n</code></pre>\n<h2 id=\"额外的-hook\"><a class=\"anchor\" href=\"#额外的-hook\">#</a> 额外的 Hook</h2>\n<p>以下介绍的 Hook，有些是上一节中基础 Hook 的变体，有些则仅在特殊情况下会用到。不用特意预先学习它们。</p>\n<h3 id=\"usereducer\"><a class=\"anchor\" href=\"#usereducer\">#</a>  <code>useReducer</code></h3>\n<pre><code class=\"language-react\">const [state, dispatch] = useReducer(reducer, initialArg, init);\n</code></pre>\n<p><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate\"> <code>useState</code> </a> 的替代方案。它接收一个形如  <code>(state, action) =&gt; newState</code>  的 reducer，并返回当前的 state 以及与其配套的  <code>dispatch</code>  方法。（</p>\n<p>在某些场景下， <code>useReducer</code>  会比  <code>useState</code>  更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用  <code>useReducer</code>  还能给那些会触发深更新的组件做性能优化，因为<a href=\"https://zh-hans.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">你可以向子组件传递  <code>dispatch</code>  而不是回调函数</a> 。</p>\n<p>以下是用 reducer 重写 <a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate\"> <code>useState</code> </a> 一节的计数器示例：</p>\n<pre><code class=\"language-react\">const initialState = &#123;count: 0&#125;;\n\nfunction reducer(state, action) &#123;\n  switch (action.type) &#123;\n    case 'increment':\n      return &#123;count: state.count + 1&#125;;\n    case 'decrement':\n      return &#123;count: state.count - 1&#125;;\n    default:\n      throw new Error();\n  &#125;\n&#125;\n\nfunction Counter() &#123;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    &lt;&gt;\n      Count: &#123;state.count&#125;\n      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: 'decrement'&#125;)&#125;&gt;-&lt;/button&gt;\n      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: 'increment'&#125;)&#125;&gt;+&lt;/button&gt;\n    &lt;/&gt;\n  );\n&#125;\n</code></pre>\n<blockquote>\n<p>注意</p>\n<p>React 会确保  <code>dispatch</code>  函数的标识是稳定的，并且不会在组件重新渲染时改变。这就是为什么可以安全地从  <code>useEffect</code>  或  <code>useCallback</code>  的依赖列表中省略  <code>dispatch</code> 。</p>\n</blockquote>\n<h4 id=\"指定初始-state\"><a class=\"anchor\" href=\"#指定初始-state\">#</a> 指定初始 state</h4>\n<p>有两种不同初始化  <code>useReducer</code>  state 的方式，你可以根据使用场景选择其中的一种。将初始 state 作为第二个参数传入  <code>useReducer</code>  是最简单的方法：</p>\n<pre><code class=\"language-react\">  const [state, dispatch] = useReducer(\n    reducer,\n    &#123;count: initialCount&#125;  );\n</code></pre>\n<blockquote>\n<p>注意</p>\n<p>React 不使用  <code>state = initialState</code>  这一由 Redux 推广开来的参数约定。有时候初始值依赖于 props，因此需要在调用 Hook 时指定。如果你特别喜欢上述的参数约定，可以通过调用  <code>useReducer(reducer, undefined, reducer)</code>  来模拟 Redux 的行为，但我们不鼓励你这么做。</p>\n</blockquote>\n<h4 id=\"惰性初始化\"><a class=\"anchor\" href=\"#惰性初始化\">#</a> 惰性初始化</h4>\n<p>你可以选择惰性地创建初始 state。为此，需要将  <code>init</code>  函数作为  <code>useReducer</code>  的第三个参数传入，这样初始 state 将被设置为  <code>init(initialArg)</code> 。</p>\n<p>这么做可以将用于计算 state 的逻辑提取到 reducer 外部，这也为将来对重置 state 的 action 做处理提供了便利：</p>\n<pre><code class=\"language-react\">function init(initialCount) &#123;  return &#123;count: initialCount&#125;;&#125;\nfunction reducer(state, action) &#123;\n  switch (action.type) &#123;\n    case 'increment':\n      return &#123;count: state.count + 1&#125;;\n    case 'decrement':\n      return &#123;count: state.count - 1&#125;;\n    case 'reset':      return init(action.payload);    default:\n      throw new Error();\n  &#125;\n&#125;\n\nfunction Counter(&#123;initialCount&#125;) &#123;\n  const [state, dispatch] = useReducer(reducer, initialCount, init);  return (\n    &lt;&gt;\n      Count: &#123;state.count&#125;\n      &lt;button\n        onClick=&#123;() =&gt; dispatch(&#123;type: 'reset', payload: initialCount&#125;)&#125;&gt;        Reset\n      &lt;/button&gt;\n      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: 'decrement'&#125;)&#125;&gt;-&lt;/button&gt;\n      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: 'increment'&#125;)&#125;&gt;+&lt;/button&gt;\n    &lt;/&gt;\n  );\n&#125;\n</code></pre>\n<h4 id=\"跳过-dispatch\"><a class=\"anchor\" href=\"#跳过-dispatch\">#</a> 跳过 dispatch</h4>\n<p>如果 Reducer Hook 的返回值与当前 state 相同，React 将跳过子组件的渲染及副作用的执行。（React 使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"> <code>Object.is</code>  比较算法</a> 来比较 state。）</p>\n<p>需要注意的是，React 可能仍需要在跳过渲染前再次渲染该组件。不过由于 React 不会对组件树的 “深层” 节点进行不必要的渲染，所以大可不必担心。如果你在渲染期间执行了高开销的计算，则可以使用  <code>useMemo</code>  来进行优化。</p>\n<h4 id=\"通过usecontext和usereducer实现的一种状态管理\"><a class=\"anchor\" href=\"#通过usecontext和usereducer实现的一种状态管理\">#</a> 通过 useContext 和 useReducer 实现的一种状态管理</h4>\n<p>考虑如下一种情况，有一个书架组件和阅读组件，书架组件可以上传本地书籍，阅读组件可以阅读上传的本地书籍。在书籍没有上传到后台的情况下，如何实现两组件间的通信 (书籍信息共享) 呢？</p>\n<p>首先先考虑数据挂载在哪？很明显应该挂在两组件的父组件上 (不考虑 redux 时)。那么既然如此，通过 props 的逐层传递是一种解决方案，但是比较麻烦。更为简便的方案就是通过 useContext 和 useReducer 来实现。</p>\n<p>我们可以同通过在其父组件上挂载一个 Context</p>\n<pre><code class=\"language-react\">export const BookListContext = React.createContext();\n\nconst reducer = (state, action) =&gt; &#123;\n  switch (action.type) &#123;\n    case &quot;addBooks&quot;:\n      return handleAddBooks(state, action.value);\n    case &quot;deleteBooks&quot;:\n      return handleDeleteBooks(state, action.value);\n    default:\n      return state;\n  &#125;\n&#125;;\n&lt;BookListContext.Provider\n        value=&#123;&#123;\n          bookList: bookList,\n          bookListDispatch: dispatch,\n        &#125;&#125;\n      &gt;\n        &lt;Routes&gt;\n          &lt;Route path=&quot;/book/:bookName&quot; element=&#123;&lt;Book /&gt;&#125;&gt;&lt;/Route&gt;\n          &lt;Route path=&quot;/&quot; element=&#123;&lt;Bookshelf /&gt;&#125;&gt;&lt;/Route&gt;\n        &lt;/Routes&gt;\n&lt;/BookListContext.Provider&gt;\n</code></pre>\n<p>子组件需要时，进行调用</p>\n<pre><code class=\"language-react\">  const bookListContext = useContext(BookListContext);\n  const bookList=bookListContext.bookList;\n  bookListContext.bookListDispatch(&#123;type:'addBooks',value:fileLists&#125;);\n  bookListContext.bookListDispatch(&#123;type:'deleteBooks',value:bookName&#125;);\n</code></pre>\n<h3 id=\"useref\"><a class=\"anchor\" href=\"#useref\">#</a>  <code>useRef</code></h3>\n<pre><code>const refContainer = useRef(initialValue);\n</code></pre>\n<p><code>useRef</code>  返回一个可变的 ref 对象，其  <code>.current</code>  属性被初始化为传入的参数（ <code>initialValue</code> ）。返回的 ref 对象在组件的整个生命周期内持续存在。</p>\n<p>一个常见的用例便是命令式地访问子组件：</p>\n<pre><code class=\"language-react\">function TextInputWithFocusButton() &#123;\n  const inputEl = useRef(null);\n  const onButtonClick = () =&gt; &#123;\n    // `current` 指向已挂载到 DOM 上的文本输入元素\n    inputEl.current.focus();\n  &#125;;\n  return (\n    &lt;&gt;\n      &lt;input ref=&#123;inputEl&#125; type=&quot;text&quot; /&gt;\n      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;/button&gt;\n    &lt;/&gt;\n  );\n&#125;\n</code></pre>\n<p>本质上， <code>useRef</code>  就像是可以在其  <code>.current</code>  属性中保存一个可变值的 “盒子”。</p>\n<p>你应该熟悉 ref 这一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1s\">访问 DOM</span> 的主要方式。如果你将 ref 对象以  <code>&lt;div ref=&#123;myRef&#125; /&gt;</code>  形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的  <code>.current</code>  属性设置为相应的 DOM 节点。</p>\n<p>然而， <code>useRef()</code>  比  <code>ref</code>  属性更有用。它可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjaXMtdGhlcmUtc29tZXRoaW5nLWxpa2UtaW5zdGFuY2UtdmFyaWFibGVz\">很方便地保存任何可变值</span>，其类似于在 class 中使用实例字段的方式。</p>\n<p>这是因为它创建的是一个普通 Javascript 对象。而  <code>useRef()</code>  和自建一个  <code>&#123;current: ...&#125;</code>  对象的唯一区别是， <code>useRef</code>  会在每次渲染时返回同一个 ref 对象。</p>\n<p>请记住，当 ref 对象内容发生变化时， <code>useRef</code>  并<em>不会</em>通知你。变更  <code>.current</code>  属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZmFxLmh0bWwjaG93LWNhbi1pLW1lYXN1cmUtYS1kb20tbm9kZQ==\">回调 ref</span> 来实现。</p>\n",
            "tags": [
                "react",
                "react"
            ]
        },
        {
            "id": "http://jluyeyu.com/typescript/ts%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/",
            "url": "http://jluyeyu.com/typescript/ts%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/",
            "title": "TypeScript学习笔记",
            "date_published": "2022-02-11T01:00:52.000Z",
            "content_html": "<h1 id=\"typescript学习笔记\"><a class=\"anchor\" href=\"#typescript学习笔记\">#</a> TypeScript 学习笔记</h1>\n<h2 id=\"什么是typescript\"><a class=\"anchor\" href=\"#什么是typescript\">#</a> 什么是 TypeScript?</h2>\n<blockquote>\n<p>TypeScript 简称 TS<br />\nTS 和 typescript 之间的关系其实就是 Less/Sass 和 CSS 之间的关系<br />\n就像 Less/Sass 是对 CSS 进行扩展一样，TS 也是对 typescript 进行扩展<br />\n就像 Less/Sass 最终会转换成 CSS 一样，我们编写好的 TS 代码最终也会换成 typescript<br />\nTypeScript 是 JavaScript 的超集，因为它扩展了 JavaScript，有 JavaScript 没有的东西。</p>\n</blockquote>\n<h2 id=\"为什么需要typescript\"><a class=\"anchor\" href=\"#为什么需要typescript\">#</a> 为什么需要 TypeScript?</h2>\n<blockquote>\n<p>typescript 语言本身的特性，决定了该语言无法适应大型的复杂的项目 弱类型：某个变量，可以随时更换类型 解释型：错误发生的时间是在运行时。简单来说就是因为 JavaScript 是弱类型，很多错误只有在运行时才会被发现，可以扩展 JavaScript</p>\n<p>而 TypeScript 提供了一套静态检测机制，可以帮助我们在编译时就发现错误，它提高了 JavaScript 的可用性，更适用于工程。</p>\n<p>ts 语言的特点 ts 是 typescript 的超集，是一个可选的，静态的类型系统。ts 不参与任何运行时的类型检查</p>\n<ol>\n<li>\n<p>超集：整数，正整数，整数是正整数的超集</p>\n</li>\n<li>\n<p>类型系统：对代码中所有的标识符 (变量，函数，参数，返回值) 进行类型检查</p>\n</li>\n<li>\n<p>可选的：我们对于类型检查可以选择用也可以不用</p>\n</li>\n<li>\n<p>静态的：无论是浏览器环境还是 node 环境，无法直接识别 ts 代码。类习惯检查的时间，是在编译的 时候而非运行时</p>\n<p>tsc:ts 编译器，将 ts 转换为 es</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"typescript特点\"><a class=\"anchor\" href=\"#typescript特点\">#</a> TypeScript 特点</h2>\n<blockquote>\n<p>支持最新的 JavaScript 新特特性<br />\n支持代码静态检查<br />\n支持 Java 等后端语言中的特性 (枚举、泛型、类型转换、命名空间、声明文件、类、接口等)</p>\n</blockquote>\n<h2 id=\"官方playground-练习\"><a class=\"anchor\" href=\"#官方playground-练习\">#</a> 官方 playground &amp; 练习</h2>\n<p>官方也提供了一个在线开发 TypeScript 的云环境 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL3BsYXk=\">Playground</span>。可以通过它来练习。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlbWxpbmtlci9hd2Vzb21lLXR5cGVzY3JpcHQvaXNzdWVz\">typescript 练习题</span></p>\n<h1 id=\"基础数据类型\"><a class=\"anchor\" href=\"#基础数据类型\">#</a> 基础数据类型</h1>\n<h2 id=\"内置类型\"><a class=\"anchor\" href=\"#内置类型\">#</a> 内置类型</h2>\n<p>typescript 中的基础数据类型基本都是支持的，并且可以通过 <code>:类型</code> 的方式指定类型</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jimmy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> sym<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h2>\n<h3 id=\"null和undefined\"><a class=\"anchor\" href=\"#null和undefined\">#</a> null 和 undefined</h3>\n<p>默认情况下  <code>null</code>  和  <code>undefined</code>  是所有类型的子类型。 就是说你可以把  <code>null</code>  和  <code>undefined</code>  赋值给其他类型。除非在 tsconfig.typescripton 指定了 <code>&quot;strictNullChecks&quot;:true</code>  ， <code>null</code>  和  <code>undefined</code>  只能赋值给  <code>void</code>  和它们各自的类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//null 和 undefined 赋值给 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"666\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//null 和 undefined 赋值给 number</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>num<span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//null 和 undefined 赋值给 object</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span>object <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>obj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>obj<span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//null 和 undefined 赋值给 Symbol</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> sym<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sym <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sym<span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//null 和 undefined 赋值给 boolean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>isDone <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>isDone<span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr></table></figure><p><code>&quot;strictNullChecks&quot;:true</code></p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/TS001.png\" alt=\"报错\" /></p>\n<h1 id=\"其他类型\"><a class=\"anchor\" href=\"#其他类型\">#</a> 其他类型</h1>\n<h2 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> Array</h2>\n<p>对数组类型的定义有两种方式：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr2<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定义联合类型数组</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 表示定义了一个名称叫做 arr 的数组，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这个数组中将来既可以存储数值类型的数据，也可以存储字符串类型的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定义指定对象成员的数组：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//interface 是接口，感觉就是定义一种数据类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<h3 id=\"函数声明\"><a class=\"anchor\" href=\"#函数声明\">#</a> 函数声明</h3>\n<p>可以限制参数的类型，返回值类型</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数表达式\"><a class=\"anchor\" href=\"#函数表达式\">#</a> 函数表达式</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对应的 typescript</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"用接口定义函数类型\"><a class=\"anchor\" href=\"#用接口定义函数类型\">#</a> 用接口定义函数类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>采用函数表达式接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。</p>\n<h3 id=\"可选参数\"><a class=\"anchor\" href=\"#可选参数\">#</a> 可选参数</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时 lastName=undefined</span></pre></td></tr></table></figure><p>注意点：可选参数后面不允许再出现必需参数</p>\n<h3 id=\"参数默认值\"><a class=\"anchor\" href=\"#参数默认值\">#</a> 参数默认值</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"剩余参数\"><a class=\"anchor\" href=\"#剩余参数\">#</a> 剩余参数</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：</p>\n<p><code>noImplicitAny</code> ：设置为 true 的时候，此处会报错 <code>Parameter 'a' implicitly has an 'any' type.</code></p>\n<h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3>\n<p>由于 JavaScript 是一个动态语言，我们通常会使用不同类型的参数来调用同一个函数，该函数会根据不同的参数而返回不同的类型的调用结果：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"12\"</span></pre></td></tr></table></figure><p>由于 TypeScript 是 JavaScript 的超集，因此以上的代码可以直接在 TypeScript 中使用，但当 TypeScript 编译器开启  <code>noImplicitAny</code>  的配置项时，以上代码会提示以下错误信息：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Parameter <span class=\"token string\">'x'</span> implicitly has an <span class=\"token string\">'any'</span> type<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Parameter <span class=\"token string\">'y'</span> implicitly has an <span class=\"token string\">'any'</span> type<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>该信息告诉我们参数 x 和参数 y 隐式具有  <code>any</code>  类型。为了解决这个问题，我们可以为参数设置一个类型。因为我们希望  <code>add</code>  函数同时支持 string 和 number 类型，因此我们可以定义一个  <code>string | number</code>  联合类型，同时我们为该联合类型取个别名：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Combinable</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在定义完 Combinable 联合类型后，我们来更新一下  <code>add</code>  函数：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Combinable<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Combinable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> b <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为  <code>add</code>  函数的参数显式设置类型之后，之前错误的提示消息就消失了。那么此时的  <code>add</code>  函数就完美了么，我们来实际测试一下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Semlinker'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' Kakuqo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上面代码中，我们分别使用  <code>'Semlinker'</code>  和  <code>' Kakuqo'</code>  这两个字符串作为参数调用 add 函数，并把调用结果保存到一个名为  <code>result</code>  的变量上，这时候我们想当然的认为此时 result 的变量的类型为 string，所以我们就可以正常调用字符串对象上的  <code>split</code>  方法。但这时 TypeScript 编译器又出现以下错误信息了：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Property <span class=\"token string\">'split'</span> does not exist on <span class=\"token keyword\">type</span> <span class=\"token string\">'string | number'</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Property <span class=\"token string\">'split'</span> does not exist on <span class=\"token keyword\">type</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>很明显  <code>number</code>  类型的对象上并不存在  <code>split</code>  属性。问题又来了，那如何解决呢？这时我们就可以利用 TypeScript 提供的函数重载特性。</p>\n<blockquote>\n<p><strong>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。</strong> 要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Types</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span>Types<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span>Types<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> b <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Semlinker'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' Kakuqo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在以上代码中，我们为 add 函数提供了多个函数类型定义，从而实现函数的重载。之后，可恶的错误消息又消失了，因为这时 result 变量的类型是  <code>string</code>  类型。</p>\n<h2 id=\"tuple元组\"><a class=\"anchor\" href=\"#tuple元组\">#</a> Tuple (元组)</h2>\n<h3 id=\"元祖定义\"><a class=\"anchor\" href=\"#元祖定义\">#</a> 元祖定义</h3>\n<p>众所周知，数组一般由同种类型的值组成，但有时我们需要在单个变量中存储不同类型的值，这时候我们就可以使用元组。在 JavaScript 中是没有元组的，元组是 TypeScript 中特有的类型，其工作方式类似于数组。</p>\n<p>元组最重要的特性是可以限制 <code>数组元素的个数和类型</code> ，它特别适合用来实现多值返回。</p>\n<p>元祖用于保存定长定数据类型的数据</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 类型必须匹配且个数必须为 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//Type '[string, number, number]' is not assignable to type '[string, number]'.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Source has <span class=\"token number\">3</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> but target allows only <span class=\"token number\">2.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Type <span class=\"token string\">'number'</span> <span class=\"token keyword\">is</span> not assignable to <span class=\"token keyword\">type</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Type <span class=\"token string\">'string'</span> <span class=\"token keyword\">is</span> not assignable to <span class=\"token keyword\">type</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>注意，元组类型只能表示一个已知元素数量和类型的数组，长度已指定，越界访问会提示错误。如果一个数组中可能有多种类型，数量和类型都不确定，那就直接 <code>any[]</code></p>\n<h3 id=\"元祖类型的解构赋值\"><a class=\"anchor\" href=\"#元祖类型的解构赋值\">#</a> 元祖类型的解构赋值</h3>\n<p>我们可以通过下标的方式来访问元组中的元素，当元组中的元素较多时，这种方式并不是那么便捷。其实元组也是支持解构赋值的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> employee<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>username<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码成功运行后，控制台会输出以下消息：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>username<span class=\"token operator\">:</span> Semlinker</pre></td></tr></table></figure><h3 id=\"元组类型的可选元素\"><a class=\"anchor\" href=\"#元组类型的可选元素\">#</a> 元组类型的可选元素</h3>\n<p>与函数签名类型，在定义元组类型时，我们也可以通过  <code>?</code>  号来声明元组类型的可选元素，具体的示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> optionalTuple<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>optionalTuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optionalTuple : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>optionalTuple<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>optionalTuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Kakuqo\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optionalTuple : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>optionalTuple<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>optionalTuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Kakuqo\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Error</span></pre></td></tr></table></figure><p>在上面代码中，我们定义了一个名为  <code>optionalTuple</code>  的变量，该变量的类型要求包含一个必须的字符串属性和一个可选布尔属性，该代码运行后，控制台会输出以下内容：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>optionalTuple <span class=\"token operator\">:</span> Semlinker<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>optionalTuple <span class=\"token operator\">:</span> Kakuqo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Type <span class=\"token string\">'number'</span> <span class=\"token keyword\">is</span> not assignable to <span class=\"token keyword\">type</span> <span class=\"token string\">'boolean | undefined'</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>那么在实际工作中，声明可选的元组元素有什么作用？这里我们来举一个例子，在三维坐标轴中，一个坐标点可以使用  <code>(x, y, z)</code>  的形式来表示，对于二维坐标轴来说，坐标点可以使用  <code>(x, y)</code>  的形式来表示，而对于一维坐标轴来说，只要使用  <code>(x)</code>  的形式来表示即可。针对这种情形，在 TypeScript 中就可以利用元组类型可选元素的特性来定义一个元组类型的坐标点，具体实现如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一维坐标点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> xy<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维坐标点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> xyz<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 三维坐标点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xyz<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><h3 id=\"元组类型的剩余元素\"><a class=\"anchor\" href=\"#元组类型的剩余元素\">#</a> 元组类型的剩余元素</h3>\n<p>元组类型里最后一个元素可以是剩余元素，形式为  <code>...X</code> ，这里  <code>X</code>  是数组类型。<strong>剩余元素代表元组类型是开放的，可以有零个或多个额外的元素。</strong> 例如， <code>[number, ...string[]]</code>  表示带有一个  <code>number</code>  元素和任意数量 <code>string</code>  类型元素的元组类型。为了能更好的理解，我们来举个具体的例子：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">RestTupleType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> restTuple<span class=\"token operator\">:</span> RestTupleType <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kakuqo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lolo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>restTuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>restTuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"只读的元组类型\"><a class=\"anchor\" href=\"#只读的元组类型\">#</a> 只读的元组类型</h3>\n<p>TypeScript 3.4 还引入了对只读元组的新支持。我们可以为任何元组类型加上  <code>readonly</code>  关键字前缀，以使其成为只读元组。具体的示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> point<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在使用  <code>readonly</code>  关键字修饰元组类型之后，任何企图修改元组中元素的操作都会抛出异常：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Cannot assign to '0' because it is a read-only property.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Property 'push' does not exist on type 'readonly [number, number]'.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>point<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Property 'pop' does not exist on type 'readonly [number, number]'.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>point<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Property 'splice' does not exist on type 'readonly [number, number]'.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>point<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"void\"><a class=\"anchor\" href=\"#void\">#</a> void</h2>\n<p><code>void</code>  表示没有任何类型，和其他类型是平等关系，不能直接赋值:</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>你只能为它赋予 <code>null</code>  和 <code>undefined</code> （在 <code>strictNullChecks</code>  未指定为 true 时）。声明一个 <code>void</code>  类型的变量没有什么大用，我们一般也只有在函数没有返回值时去声明。</p>\n<p>值得注意的是，方法没有返回值将得到 <code>undefined</code> ，但是我们需要定义成 <code>void</code>  类型，而不是 <code>undefined</code>  类型。否则将报错:</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is TypeScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><h2 id=\"never\"><a class=\"anchor\" href=\"#never\">#</a> never</h2>\n<p><code>never</code>  类型表示的是那些永不存在的值的类型。</p>\n<p>值会永不存在的两种情况：</p>\n<ol>\n<li>如果一个函数执行时抛出了<strong>异常</strong>，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；</li>\n<li>函数中执行无限循环的代码（<strong>死循环</strong>），使得程序永远无法运行到函数返回值那一步，永不存在返回。</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 死循环</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">loopForever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>never</code>  类型同 <code>null</code>  和 <code>undefined</code>  一样，也是任何类型的子类型，也可以赋值给任何类型。</p>\n<p>但是没有类型是 <code>never</code>  的子类型或可以赋值给 <code>never</code>  类型（除了 <code>never</code>  本身之外），即使 <code>any</code>  也不可以赋值给 <code>never</code></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ne<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> nev<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> an<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ne <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ne <span class=\"token operator\">=</span> nev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ne <span class=\"token operator\">=</span> an<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ne <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ne <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><p>在 TypeScript 中，可以利用 never 类型的特性来实现全面性检查，具体示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">controlFlowAnalysisWithNever</span><span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这里 foo 被收窄为 string 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 这里 foo 被收窄为 number 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//foo 在这里是 never</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> check<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意在 else 分支里面，我们把收窄为 never 的 foo 赋值给一个显示声明的 never 变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事修改了 Foo 的类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然而他忘记同时修改  <code>controlFlowAnalysisWithNever</code>  方法中的控制流程，这时候 else 分支的 foo 类型会被收窄为  <code>boolean</code>  类型，导致无法赋值给 never 类型，这时就会产生一个编译错误。 <code>Type 'boolean' is not assignable to type 'never'.</code></p>\n<p>通过这个方式，我们可以确保 <code>controlFlowAnalysisWithNever</code>  方法总是穷尽了 Foo 的所有可能类型。 通过这个示例，我们可以得出一个结论：<strong>使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。</strong></p>\n<h2 id=\"any\"><a class=\"anchor\" href=\"#any\">#</a> any</h2>\n<p>在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的顶级类型.</p>\n<p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// TS2322: Type 'number' is not assignable to type 'string'.</span></pre></td></tr></table></figure><p>但如果是  <code>any</code>  类型，则允许被赋值为任意类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">66</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 any 上访问任何属性都是允许的，也允许调用任何方法.</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> anyThing<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anyThing<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anyThing<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> anyThing<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>anyThing<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>anyThing<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>anyThing<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</strong>：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> something<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>something <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>something <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>something<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> something<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>something <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>something <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>something<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在许多场景下，这太宽松了。使用  <code>any</code>  类型，可以很容易地编写类型正确但在运行时有问题的代码。如果我们使用  <code>any</code>  类型，就无法使用 TypeScript 提供的大量的保护机制。</p>\n<p>为了解决  <code>any</code>  带来的问题，TypeScript 引入了  <code>unknown</code>  类型。</p>\n<h2 id=\"unknown\"><a class=\"anchor\" href=\"#unknown\">#</a> unknown</h2>\n<p><code>unknown</code>  与 <code>any</code>  一样，所有类型都可以分配给 <code>unknown</code> :</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><p><code>unknown</code>  与 <code>any</code>  的最大区别是： 任何类型的值可以赋值给 <code>any</code> ，同时 <code>any</code>  类型的值也可以赋值给任何类型。 <code>unknown</code>  任何类型的值都可以赋值给它，但它只能赋值给 <code>unknown</code>  和 `any</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> uncertain<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> notSure<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> uncertain<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> notSure<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> uncertain<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> notSure<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>如果不缩小类型，就无法对 <code>unknown</code>  类型执行任何操作：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> dog<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>hello<span class=\"token operator\">:</span> getDog<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dog<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>这种机制起到了很强的预防性，更安全，这就要求我们必须缩小类型，我们可以使用 <code>typeof</code> 、 <code>类型断言</code> 等方式来缩小未知范围：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDogName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> dogName <span class=\"token operator\">=</span> <span class=\"token function\">getDogName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 直接使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> upName <span class=\"token operator\">=</span> dogName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// typeof</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dogName <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> upName <span class=\"token operator\">=</span> dogName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 类型断言 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> upName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dogName <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><h2 id=\"number-string-boolean-symbol\"><a class=\"anchor\" href=\"#number-string-boolean-symbol\">#</a> Number、String、Boolean、Symbol</h2>\n<p>首先，我们来回顾一下初学 TypeScript 时，很容易和原始类型 number、string、boolean、symbol 混淆的首字母大写的 Number、String、Boolean、Symbol 类型，后者是相应原始类型的 <code>包装对象</code> ，姑且把它们称之为对象类型。</p>\n<p>从类型兼容性上看，原始类型兼容对应的对象类型，反过来对象类型不兼容对应的原始类型。</p>\n<p>下面我们看一个具体的示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> Num<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>在示例中的第 3 行，我们可以把 number 赋给类型 Number，但在第 4 行把 Number 赋给 number 就会提示 错误。</p>\n<p><strong>因此，我们需要铭记不要使用对象类型来注解值的类型，因为这没有任何意义。</strong></p>\n<h2 id=\"object-object-和\"><a class=\"anchor\" href=\"#object-object-和\">#</a> object、Object 和 {}</h2>\n<p>另外，object（首字母小写，以下称 “小 object”）、Object（首字母大写，以下称 “大 Object”）和 {}（以下称 “空对象”）</p>\n<p>小 object 代表的是所有非原始类型，也就是说我们不能把 number、string、boolean、symbol 等 原始类型赋值给 object。在严格模式下， <code>null</code>  和  <code>undefined</code>  类型也不能赋给 object。</p>\n<blockquote>\n<p>JavaScript 中以下类型被视为原始类型： <code>string</code> 、 <code>boolean</code> 、 <code>number</code> 、 <code>bigint</code> 、 <code>symbol</code> 、 <code>null</code>  和  <code>undefined</code> 。</p>\n</blockquote>\n<p>下面我们看一个具体示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> lowerCaseObject<span class=\"token operator\">:</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error(strictNullChecks)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error(strictNullChecks)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>在示例中的第 2~6 行都会提示错误，但是我们在第 7 行把一个空对象赋值给 object 后，则可以通过静态类型检测。</p>\n<p>大 Object 代表所有拥有 toString、hasOwnProperty 方法的类型，所以所有原始类型、非原始类型都可以赋给 Object。同样，在严格模式下，null 和 undefined 类型也不能赋给 Object。</p>\n<p>下面我们也看一个具体的示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> upperCaseObject<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>在示例中的第 2 到 4 行、第 7 行都可以通过静态类型检测，而第 5~6 行则会提示错误。</p>\n<p>从上面示例可以看到，大 Object 包含原始类型，小 object 仅包含非原始类型，所以大 Object 似乎是小 object 的父类型。实际上，大 Object 不仅是小 object 的父类型，同时也是小 object 的子类型。</p>\n<p>下面我们还是通过一个具体的示例进行说明。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> lowerCaseObject<span class=\"token operator\">:</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> upperCaseObject<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">isLowerCaseObjectExtendsUpperCaseObject</span> <span class=\"token operator\">=</span> object <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">isUpperCaseObjectExtendsLowerCaseObject</span> <span class=\"token operator\">=</span> Object <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> lowerCaseObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>lowerCaseObject <span class=\"token operator\">=</span> upperCaseObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>在示例中的第 1 行和第 2 行返回的类型都是 true，第 3 行和第 4 行的 upperCaseObject 与 lowerCaseObject 可以互相赋值。</p>\n<blockquote>\n<p><strong>注意：尽管官方文档说可以使用小 object 代替大 Object，但是我们仍要明白大 Object 并不完全等价于小 object。</strong></p>\n</blockquote>\n<p>{} 空对象类型和大 Object 一样，也是表示原始类型和非原始类型的集合，并且在严格模式下，null 和 undefined 也不能赋给 {} ，如下示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ObjectLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">isLiteralCaseObjectExtendsUpperCaseObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">isUpperCaseObjectExtendsLiteralCaseObject</span> <span class=\"token operator\">=</span> Object <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>upperCaseObject <span class=\"token operator\">=</span> ObjectLiteral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ObjectLiteral <span class=\"token operator\">=</span> upperCaseObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在示例中的第 8 行和第 9 行返回的类型都是 true，第 10 行和第 11 行的 ObjectLiteral 与 upperCaseObject 可以互相赋值，第 2~4 行、第 7 行的赋值操作都符合静态类型检测；而第 5 行、第 6 行则会提示错误。</p>\n<p><strong>综上结论：{}、大 Object 是比小 object 更宽泛的类型（least specific），{} 和大 Object 可以互相代替，用来表示原始类型（null、undefined 除外）和非原始类型；而小 object 则表示非原始类型。</strong></p>\n<h1 id=\"类型推断\"><a class=\"anchor\" href=\"#类型推断\">#</a> 类型推断</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看着上面的示例，可能你已经在嘀咕了：定义基础类型的变量都需要写明类型注解，TypeScript 太麻烦了吧？在示例中，使用 let 定义变量时，我们写明类型注解也就罢了，毕竟值可能会被改变。可是，使用  <code>const</code>  常量时还需要写明类型注解，那可真的很麻烦。</p>\n<p>实际上，TypeScript 早就考虑到了这么简单而明显的问题。</p>\n<p>在很多情况下，TypeScript 会根据上下文环境自动推断出变量的类型，无须我们再写明类型注解。因此，上面的示例可以简化为如下所示内容：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不等价</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不等价</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不等价</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们把 TypeScript 这种基于赋值表达式推断类型的能力称之为 <code>类型推断</code> 。</p>\n<p>在 TypeScript 中，具有初始化值的变量、有默认值的函数参数、函数返回的类型都可以根据上下文推断出来。比如我们能根据 return 语句推断函数返回的类型，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** 根据参数的类型，推断出返回值的类型也是 number */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> x1<span class=\"token operator\">=</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推断出 x1 的类型也是 number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/** 推断参数 b 的类型是数字或者 undefined，返回值的类型也是数字 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">const</span> x2 <span class=\"token operator\">=</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">const</span> x3 <span class=\"token operator\">=</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Argument of type '\"1\"' is not assignable to parameter of type 'number | undefined'.</span></pre></td></tr></table></figure><p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成  <code>any</code>  类型而完全不被类型检查：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"类型断言\"><a class=\"anchor\" href=\"#类型断言\">#</a> 类型断言</h1>\n<p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p>\n<p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p>\n<p>TypeScript 类型检测无法做到绝对智能，毕竟程序不能像人一样思考。有时会碰到我们比 TypeScript 更清楚实际类型的情况，比如下面的例子：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arrayNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> greaterThan2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> arrayNumber<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=></span> num <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>会报如下错误</p>\n<pre><code>Type 'number | undefined' is not assignable to type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n</code></pre>\n<p>其中，greaterThan2 一定一个数字（确切地讲是 3），因为 arrayNumber 中明显有大于 2 的成员，但静态类型对运行时的逻辑无能为力。</p>\n<p>在 TypeScript 看来，greaterThan2 的类型既可能是数字，也可能是 undefined，所以上面的示例中提示了一个 ts (2322) 错误，此时我们不能把类型 undefined 分配给类型 number。</p>\n<p>不过，我们可以使用一种笃定的方式 ——<strong> 类型断言</strong>（类似仅作用在类型层面的强制类型转换）告诉 TypeScript 按照我们的方式做类型检查。</p>\n<p>比如，我们可以使用 as 语法做类型断言，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arrayNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> greaterThan2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> arrayNumber<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=></span> num <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 尖括号 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//as 语法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上两种方式基本没有任何区别</p>\n<h2 id=\"非空断言\"><a class=\"anchor\" href=\"#非空断言\">#</a> 非空断言</h2>\n<p>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符  <code>!</code>  可以用于断言操作对象是非 null 和非 undefined 类型。<strong>具体而言，x! 将从 x 值域中排除 null 和 undefined 。</strong></p>\n<p>具体看以下示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> mayNullOrUndefinedOrString<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mayNullOrUndefinedOrString<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mayNullOrUndefinedOrString<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error Object is possibly 'null' or 'undefined'.</span></pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NumGenerator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>numGenerator<span class=\"token operator\">:</span> NumGenerator <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">numGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error Cannot invoke an object which is possibly 'undefined'.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> numGenerator<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OK</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"确定赋值断言\"><a class=\"anchor\" href=\"#确定赋值断言\">#</a> 确定赋值断言</h2>\n<p>允许在实例属性和变量声明后面放置一个  <code>!</code>  号，从而告诉 TypeScript 该属性会被明确地赋值。为了更好地理解它的作用，我们来看个具体的例子：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error Variable 'x' is used before being assigned.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显该异常信息是说变量 x 在赋值前被使用了，要解决该问题，我们可以使用确定赋值断言：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过  <code>let x!: number;</code>  确定赋值断言，TypeScript 编译器就会知道该属性会被明确地赋值。</p>\n<h1 id=\"字面量类型\"><a class=\"anchor\" href=\"#字面量类型\">#</a> 字面量类型</h1>\n<p>在 TypeScript 中，字面量不仅可以表示值，还可以表示类型，即所谓的字面量类型。</p>\n<p>目前，TypeScript 支持 3 种字面量类型：字符串字面量类型、数字字面量类型、布尔字面量类型，对应的字符串字面量、数字字面量、布尔字面量分别拥有与其值一样的字面量类型，具体示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> specifiedStr<span class=\"token operator\">:</span> <span class=\"token string\">'this is string'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> specifiedNum<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> specifiedBoolean<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>比如 'this is string' （这里表示一个字符串字面量类型）类型是 string 类型（确切地说是 string 类型的子类型），而 string 类型不一定是 'this is string'（这里表示一个字符串字面量类型）类型，如下具体示例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> specifiedStr<span class=\"token operator\">:</span> <span class=\"token string\">'this is string'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'any string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>specifiedStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span> <span class=\"token comment\">//  类型 '\"string\"' 不能赋值给类型 'this is string'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>specifiedStr <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str <span class=\"token operator\">=</span> specifiedStr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr></table></figure><p>比如说我们用 “马” 比喻 string 类型，即 “黑马” 代指 'this is string' 类型，“黑马” 肯定是 “马”，但 “马” 不一定是 “黑马”，它可能还是 “白马”“灰马”。因此，'this is string' 字面量类型可以给 string 类型赋值，但是 string 类型不能给 'this is string' 字面量类型赋值，这个比喻同样适合于形容数字、布尔等其他字面量和它们父类的关系。</p>\n<h2 id=\"字符串字面量类型\"><a class=\"anchor\" href=\"#字符串字面量类型\">#</a> 字符串字面量类型</h2>\n<p>一般来说，我们可以使用一个字符串字面量类型作为变量的类型，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> hello<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></pre></td></tr></table></figure><p>实际上，定义单个的字面量类型并没有太大的用处，它真正的应用场景是可以把多个字面量类型组合成一个联合类型（后面会讲解），用来描述拥有明确成员的实用的集合。</p>\n<p>如下代码所示，我们使用字面量联合类型描述了一个明确、可 'up' 可 'down' 的集合，这样就能清楚地知道需要的数据结构了。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Direction</span> <span class=\"token operator\">=</span> <span class=\"token string\">'up'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'down'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>dir<span class=\"token operator\">:</span> Direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token string\">'up'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Argument of type '\"right\"' is not assignable to parameter of type 'Direction'</span></pre></td></tr></table></figure><p>通过使用字面量类型组合的联合类型，我们可以限制函数的参数为指定的字面量类型集合，然后编译器会检查参数是否是指定的字面量类型集合里的成员。</p>\n<p>因此，相较于使用 string 类型，使用字面量类型（组合的联合类型）可以将函数的参数限定为更具体的类型。这不仅提升了程序的可读性，还保证了函数的参数类型，可谓一举两得。</p>\n<h2 id=\"数字字面量类型及布尔字面量类型\"><a class=\"anchor\" href=\"#数字字面量类型及布尔字面量类型\">#</a> 数字字面量类型及布尔字面量类型</h2>\n<p>数字字面量类型和布尔字面量类型的使用与字符串字面量类型的使用类似，我们可以使用字面量组合的联合类型将函数的参数限定为更具体的类型，比如声明如下所示的一个类型 Config：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    size<span class=\"token operator\">:</span> <span class=\"token string\">'small'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    isEnable<span class=\"token operator\">:</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述代码中，我们限定了 size 属性为字符串字面量类型'small' | 'big'，isEnable 属性为布尔字面量类型 true | false（布尔字面量只包含 true 和 false，true | false 的组合跟直接使用 boolean 没有区别），margin 属性为数字字面量类型 0 | 2 | 4。</p>\n<h2 id=\"let和const分析\"><a class=\"anchor\" href=\"#let和const分析\">#</a> let 和 const 分析</h2>\n<p>我们先来看一个 const 示例，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str: 'this is string'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num: 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool: true</span></pre></td></tr></table></figure><p>在上述代码中，我们将 const 定义为一个不可变更的常量，在缺省类型注解的情况下，TypeScript 推断出它的类型直接由赋值字面量的类型决定，这也是一种比较合理的设计。</p>\n<p>接下来我们看看如下所示的 let 示例:</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str: string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num: number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool: boolean</span></pre></td></tr></table></figure><p>在上述代码中，缺省显式类型注解的可变更的变量的类型转换为了赋值字面量类型的父类型，比如 str 的类型是 'this is string' 类型（这里表示一个字符串字面量类型）的父类型 string，num 的类型是 1 类型的父类型 number。</p>\n<p>这种设计符合编程预期，意味着我们可以分别赋予 str 和 num 任意值（只要类型是 string 和 number 的子集的变量）：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str <span class=\"token operator\">=</span> <span class=\"token string\">'any string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们将 TypeScript 的字面量子类型转换为父类型的这种设计称之为 &quot;literal widening&quot;，也就是字面量类型的拓宽，比如上面示例中提到的字符串字面量类型转换成 string 类型，下面我们着重介绍一下。</p>\n<h1 id=\"类型拓宽type-widening\"><a class=\"anchor\" href=\"#类型拓宽type-widening\">#</a> 类型拓宽 (Type Widening)</h1>\n<p>所有通过 let 或 var 定义的变量、函数的形参、对象的非只读属性，如果满足指定了初始值且未显式添加类型注解的条件，那么它们推断出来的类型就是指定的初始值字面量类型拓宽后的类型，这就是字面量类型拓宽。</p>\n<p>下面我们通过字符串字面量的示例来理解一下字面量类型拓宽：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> strFun <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 (str?: string) => string;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> specifiedStr <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 'this is string'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> specifiedStr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是'string'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">strFun2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> specifiedStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 (str?: string) => string;</span></pre></td></tr></table></figure><p>因为第 1~2 行满足了 let、形参且未显式声明类型注解的条件，所以变量、形参的类型拓宽为 string（形参类型确切地讲是 string | undefined）。</p>\n<p>因为第 3 行的常量不可变更，类型没有拓宽，所以 specifiedStr 的类型是 'this is string' 字面量类型。</p>\n<p>第 4~5 行，因为赋予的值 specifiedStr 的类型是字面量类型，且没有显式类型注解，所以变量、形参的类型也被拓宽了。其实，这样的设计符合实际编程诉求。我们设想一下，如果 str2 的类型被推断为 'this is string'，它将不可变更，因为赋予任何其他的字符串类型的值都会提示类型错误。</p>\n<p>基于字面量类型拓宽的条件，我们可以通过如下所示代码添加显示类型注解控制类型拓宽行为。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> specifiedStr<span class=\"token operator\">:</span> <span class=\"token string\">'this is string'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 '\"this is string\"'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> specifiedStr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 即便使用 let 定义，类型是 'this is string'</span></pre></td></tr></table></figure><p>实际上，除了字面量类型拓宽之外，TypeScript 对某些特定类型值也有类似 &quot;Type Widening&quot; （类型拓宽）的设计，下面我们具体来了解一下。</p>\n<p>比如对 null 和 undefined 的类型进行拓宽，通过 let、var 定义的变量如果满足未显式声明类型注解且被赋予了 null 或 undefined 值，则推断出这些变量的类型是 any：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型拓宽成 any</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型拓宽成 any</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/** ----- 分界线 ------- */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/** ----- 分界线 ------- */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">anyFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> param<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 形参类型是 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> z2 <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> y2 <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 undefined</span></pre></td></tr></table></figure><p><strong>注意：在严格模式下，一些比较老的版本中（2.0）null 和 undefined 并不会被拓宽成 “any”。</strong></p>\n<p>为了更方便的理解类型拓宽，下面我们举个例子，更加深入的分析一下</p>\n<p>假设你正在编写一个向量库，你首先定义了一个 Vector3 接口，然后定义了 getComponent 函数用于获取指定坐标轴的值：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getComponent</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">:</span> Vector3<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> vector<span class=\"token punctuation\">[</span>axis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是，当你尝试使用 getComponent 函数时，TypeScript 会提示以下错误信息：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> vec <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getComponent</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error Argument of type 'string' is not assignable to parameter of type '\"x\" | \"y\" | \"z\"'.</span></pre></td></tr></table></figure><p>为什么会出现上述错误呢？通过 TypeScript 的错误提示消息，我们知道是因为变量 x 的类型被推断为 string 类型，而 getComponent 函数期望它的第二个参数有一个更具体的类型。这在实际场合中被拓宽了，所以导致了一个错误。</p>\n<p>这个过程是复杂的，因为对于任何给定的值都有许多可能的类型。例如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述 arr 变量的类型应该是什么？这里有一些可能性：</p>\n<ul>\n<li>('x' | 1)[]</li>\n<li>['x', 1]</li>\n<li>[string, number]</li>\n<li>readonly [string, number]</li>\n<li>(string | number)[]</li>\n<li>readonly (string|number)[]</li>\n<li>[any, any]</li>\n<li>any[]</li>\n</ul>\n<p>没有更多的上下文，TypeScript 无法知道哪种类型是 “正确的”，它必须猜测你的意图。尽管 TypeScript 很聪明，但它无法读懂你的心思。它不能保证 100% 正确，正如我们刚才看到的那样的疏忽性错误。</p>\n<p>在下面的例子中，变量 x 的类型被推断为字符串，因为 TypeScript 允许这样的代码：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'semlinker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">'kakuqo'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">'lolo'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于 JavaScript 来说，以下代码也是合法的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x|y|z</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在推断 x 的类型为字符串时，TypeScript 试图在特殊性和灵活性之间取得平衡。一般规则是，变量的类型在声明之后不应该改变，因此 string 比 string|RegExp 或 string|string [] 或任何字符串更有意义。</p>\n<p>TypeScript 提供了一些控制拓宽过程的方法。其中一种方法是使用  <code>const</code> 。如果用 const 而不是 let 声明一个变量，那么它的类型会更窄。事实上，使用 const 可以帮助我们修复前面例子中的错误：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type is \"x\" </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> vec <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getComponent</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><p>因为 x 不能重新赋值，所以 TypeScript 可以推断更窄的类型，就不会在后续赋值中出现错误。因为字符串字面量型 “x” 可以赋值给  &quot;x&quot;|&quot;y&quot;|&quot;z&quot;，所以代码会通过类型检查器的检查。</p>\n<p>然而， <code>const 并不是万灵药。对于对象和数组，仍然会存在问题</code> 。</p>\n<p>以下这段代码在 JavaScript 中是没有问题的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'semlinker'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而在 TypeScript 中，对于 obj 的类型来说，它可以是  <code>&#123;readonly x：1&#125;</code>  类型，或者是更通用的  <code>&#123;x：number&#125;</code>  类型。当然也可能是  <code>&#123;[key: string]: number&#125;</code>  或 object 类型。对于对象，TypeScript 的拓宽算法会将其内部属性视为将其赋值给 let 关键字声明的变量，进而来推断其属性的类型。因此 obj 的类型为  <code>&#123;x：number&#125;</code>  。这使得你可以将 obj.x 赋值给其他 number 类型的变量，而不是 string 类型的变量，并且它还会阻止你添加其他属性。</p>\n<p>因此最后三行的语句会出现错误：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Type '\"6\"' is not assignable to type 'number'.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Property 'y' does not exist on type '&#123; x: number; &#125;'.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Property 'name' does not exist on type '&#123; x: number; &#125;'.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'semlinker'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>TypeScript 试图在具体性和灵活性之间取得平衡。它需要推断一个足够具体的类型来捕获错误，但又不能推断出错误的类型。它通过属性的初始化值来推断属性的类型，当然有几种方法可以覆盖 TypeScript 的默认行为。一种是提供显式类型注释：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Type is &#123; x: 1 | 3 | 5; &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另一种方法是使用 const 断言。不要将其与 let 和 const 混淆，后者在值空间中引入符号。这是一个纯粹的类型级构造。让我们来看看以下变量的不同推断类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Type is &#123; x: number; y: number; &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Type is &#123; x: 1; y: number; &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// Type is &#123; readonly x: 1; readonly y: 2; &#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当你在一个值之后使用 const 断言时，TypeScript 将为它推断出最窄的类型，没有拓宽。对于真正的常量，这通常是你想要的。当然你也可以对数组使用 const 断言：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Type is number[]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Type is readonly [1, 2, 3]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>既然有类型拓宽，自然也会有类型缩小，下面我们简单介绍一下 Type Narrowing。</p>\n<h1 id=\"类型缩小type-narrowing\"><a class=\"anchor\" href=\"#类型缩小type-narrowing\">#</a> 类型缩小 (Type Narrowing)</h1>\n<p>在 TypeScript 中，我们可以通过某些操作将变量的类型由一个较为宽泛的集合缩小到相对较小、较明确的集合，这就是 &quot;Type Narrowing&quot;。</p>\n<p>比如，我们可以使用类型守卫（后面会讲到）将函数参数的类型从 any 缩小到明确的类型，具体示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>anything<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> anything <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> anything<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 string </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> anything <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> anything<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 number</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 VS Code 中 hover 到第 4 行的 anything 变量提示类型是 string，到第 6 行则提示类型是 number。</p>\n<p>同样，我们可以使用类型守卫将联合类型缩小到明确的子类型，具体示例如下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>anything<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> anything <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> anything<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 string </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> anything<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型是 number</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，我们也可以通过字面量类型等值判断（===）或其他控制流语句（包括但不限于 if、三目运算符、switch 分支）将联合类型收敛为更具体的类型，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Goods</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pen'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pencil'</span> <span class=\"token operator\">|</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> getPenCost <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token string\">'pen'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> getPencilCost <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token string\">'pencil'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> getRulerCost <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token string\">'ruler'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCost</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Goods<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token string\">'pen'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">getPenCost</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// item => 'pen'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token string\">'pencil'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">getPencilCost</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// item => 'pencil'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">getRulerCost</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// item => 'ruler'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述 getCost 函数中，接受的参数类型是字面量类型的联合类型，函数内包含了  <code>if</code>  语句的 3 个流程分支，其中每个流程分支调用的函数的参数都是具体独立的字面量类型。</p>\n<p>那为什么类型由多个字面量组成的变量 item 可以传值给仅接收单一特定字面量类型的函数  <code>getPenCost、getPencilCost、getRulerCost</code>  呢？这是因为在每个流程分支中，编译器知道流程分支中的 item 类型是什么。比如 item === 'pencil' 的分支，item 的类型就被收缩为 “pencil”。</p>\n<p>事实上，如果我们将上面的示例去掉中间的流程分支，编译器也可以推断出收敛后的类型，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCost</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Goods<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token string\">'pen'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// item => 'pen'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'pencil' | 'ruler'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般来说  <code>TypeScript</code>  非常擅长通过条件来判别类型，但在处理一些特殊值时要特别注意 —— 它可能包含你不想要的东西！例如，以下从联合类型中排除 null 的方法是错误的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is HTMLElement | null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> el <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  el<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is HTMLElement | null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为在 JavaScript 中  <code>typeof null</code>  的结果是 &quot;object&quot; ，所以你实际上并没有通过这种检查排除  <code>null</code>  值。除此之外，falsy 的原始值也会产生类似的问题：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is string | number | null | undefined\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为空字符串和 0 都属于 falsy 值，所以在分支中 x 的类型可能是 string 或 number 类型。帮助类型检查器缩小类型的另一种常见方法是在它们上放置一个明确的 “标签”：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UploadEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type<span class=\"token operator\">:</span> <span class=\"token string\">\"upload\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  filename<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  contents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DownloadEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  type<span class=\"token operator\">:</span> <span class=\"token string\">\"download\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  filename<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppEvent</span> <span class=\"token operator\">=</span> UploadEvent <span class=\"token operator\">|</span> DownloadEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> AppEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"download\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is DownloadEvent </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"upload\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is UploadEvent </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种模式也被称为 ” 标签联合 “或” 可辨识联合 “，它在 TypeScript 中的应用范围非常广。</p>\n<h1 id=\"联合类型\"><a class=\"anchor\" href=\"#联合类型\">#</a> 联合类型</h1>\n<p>联合类型表示取值可以为多种类型中的一种，使用  <code>|</code>  分隔每个类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><p>联合类型通常与  <code>null</code>  或  <code>undefined</code>  一起使用：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>例如，这里  <code>name</code>  的类型是  <code>string | undefined</code>  意味着可以将  <code>string</code>  或  <code>undefined</code>  的值传递给 <code>sayHello</code>  函数。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semlinker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过这个示例，你可以凭直觉知道类型 A 和类型 B 联合后的类型是同时接受 A 和 B 值的类型。此外，对于联合类型来说，你可能会遇到以下的用法：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">EventNames</span> <span class=\"token operator\">=</span> <span class=\"token string\">'click'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'scroll'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上示例中的  <code>1</code> 、 <code>2</code>  或  <code>'click'</code>  被称为字面量类型，用来约束取值只能是某几个值中的一个。</p>\n<h1 id=\"类型别名\"><a class=\"anchor\" href=\"#类型别名\">#</a> 类型别名</h1>\n<p>类型别名用来给一个类型起个新名字。类型别名常用于联合类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> Message<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意：类型别名，诚如其名，即我们仅仅是给类型取了一个新的名字，并不是创建了一个新的类型。</strong></p>\n<h1 id=\"交叉类型\"><a class=\"anchor\" href=\"#交叉类型\">#</a> 交叉类型</h1>\n<p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性，使用 <code>&amp;</code>  定义交叉类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Useless</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很显然，如果我们仅仅把原始类型、字面量类型、函数类型等原子类型合并成交叉类型，是没有任何用处的，因为任何类型都不能满足同时属于多种原子类型，比如既是 string 类型又是 number 类型。因此，在上述的代码中，类型别名 Useless 的类型就是个 never。</p>\n<p>交叉类型真正的用武之地就是将多个接口类型合并成一个类型，从而实现等同接口继承的效果，也就是所谓的合并接口类型，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IntersectionType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> mixed<span class=\"token operator\">:</span> IntersectionType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述示例中，我们通过交叉类型，使得 IntersectionType 同时拥有了 id、name、age 所有属性，这里我们可以试着将合并接口类型理解为求并集。</p>\n<h2 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这里，我们来发散思考一下：如果合并的多个接口类型存在同名属性会是什么效果呢？</p>\n<p>如果同名属性的类型不兼容，比如上面示例中两个接口类型同名的 name 属性类型一个是 number，另一个是 string，合并后，name 属性的类型就是 number 和 string 两个原子类型的交叉类型，即 never，如下代码所示：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IntersectionTypeConfict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> mixedConflict<span class=\"token operator\">:</span> IntersectionTypeConfict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//ts (2322) 错误，'number' 类型不能赋给 'never' 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此时，我们赋予 mixedConflict 任意类型的 name 属性值都会提示类型错误。而如果我们不设置 name 属性，又会提示一个缺少必选的 name 属性的错误。在这种情况下，就意味着上述代码中交叉出来的 IntersectionTypeConfict 类型是一个无用类型。</p>\n<p>如果同名属性的类型兼容，比如一个是 number，另一个是 number 的子类型、数字字面量类型，合并后 name 属性的类型就是两者中的子类型。</p>\n<p>如下所示示例中 name 属性的类型就是数字字面量类型 2，因此，我们不能把任何非 2 之外的值赋予 name 属性。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IntersectionTypeConfict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> mixedConflict<span class=\"token operator\">:</span> IntersectionTypeConfict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  mixedConflict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// '22' 类型不能赋给 '2' 类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那么如果同名属性是非基本数据类型的话，又会是什么情形。我们来看个具体的例子：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>d<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>e<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>f<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">C</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> abc<span class=\"token operator\">:</span><span class=\"token constant\">ABC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    d<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    e<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    f<span class=\"token operator\">:</span><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码成功运行后，会输出以下结果：</p>\n<pre><code>[LOG]: &#123;\n  &quot;x&quot;: &#123;\n    &quot;d&quot;: true,\n    &quot;e&quot;: &quot;&quot;,\n    &quot;f&quot;: 666\n  &#125;\n&#125; \n</code></pre>\n<p>由上图可知，在混入多个类型时，若存在相同的成员，且成员类型为非基本数据类型，那么是可以成功合并。</p>\n<h1 id=\"接口interfaces\"><a class=\"anchor\" href=\"#接口interfaces\">#</a> 接口（Interfaces）</h1>\n<p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p>\n<h2 id=\"什么是接口\"><a class=\"anchor\" href=\"#什么是接口\">#</a> 什么是接口</h2>\n<p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p>\n<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于 [对类的一部分行为进行抽象] 以外，也常用于对「对象的形状（Shape）」进行描述。</p>\n<h2 id=\"简单的例子\"><a class=\"anchor\" href=\"#简单的例子\">#</a> 简单的例子</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的例子中，我们定义了一个接口  <code>Person</code> ，接着定义了一个变量  <code>tom</code> ，它的类型是  <code>Person</code> 。这样，我们就约束了  <code>tom</code>  的形状必须和接口  <code>Person</code>  一致。</p>\n<p>接口一般首字母大写。</p>\n<p>定义的变量比接口少了一些属性是不允许的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span></pre></td></tr></table></figure><p>多一些属性也是不允许的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span></pre></td></tr></table></figure><p>可见，<strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong>。</p>\n<h2 id=\"可选-只读属性\"><a class=\"anchor\" href=\"#可选-只读属性\">#</a> 可选 | 只读属性</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只读属性用于限制只能在对象刚刚创建的时候修改其值。此外 TypeScript 还提供了  <code>ReadonlyArray&lt;T&gt;</code>  类型，它与  <code>Array&lt;T&gt;</code>  相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ro<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ro<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ro<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ro<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> ro<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></pre></td></tr></table></figure><h2 id=\"任意属性\"><a class=\"anchor\" href=\"#任意属性\">#</a> 任意属性</h2>\n<p>有时候我们希望一个接口中除了包含必选和可选属性之外，还允许有其他的任意属性，这时我们可以使用 <strong>索引签名</strong> 的形式来满足上述要求。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//   Index signatures are incompatible.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span></pre></td></tr></table></figure><p>上例中，任意属性的值允许是  <code>string</code> ，但是可选属性  <code>age</code>  的值却是  <code>number</code> ， <code>number</code>  不是  <code>string</code>  的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时  <code>&#123; name: 'Tom', age: 25, gender: 'male' &#125;</code>  的类型被推断成了  <code>&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;</code> ，这是联合类型和接口的结合。</p>\n<p>一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里真实的类型应该为：number | undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"鸭式辨型法\"><a class=\"anchor\" href=\"#鸭式辨型法\">#</a> 鸭式辨型法</h2>\n<p>所谓的<strong>鸭式辨型法</strong>就是 <code>像鸭子一样走路并且嘎嘎叫的就叫鸭子</code> ，即具有鸭子特征的认为它就是鸭子，也就是通过制定规则来判定对象是否实现这个接口。</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabeledValue</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token operator\">:</span> LabeledValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> size<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Size 10 Object\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabeledValue</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token operator\">:</span> LabeledValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> size<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Size 10 Object\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></pre></td></tr></table></figure><p>上面代码，在参数里写对象就相当于是直接给 <code>labeledObj</code>  赋值，这个对象有严格的类型定义，所以不能多参或少参。而当你在外面将该对象用另一个变量 <code>myObj</code>  接收， <code>myObj</code>  不会经过额外属性检查，但会根据类型推论为 <code>let myObj: &#123; size: number; label: string &#125; = &#123; size: 10, label: &quot;Size 10 Object&quot; &#125;;</code> ，然后将这个 <code>myObj</code>  再赋值给 <code>labeledObj</code> ，此时根据类型的兼容性，两种类型对象，参照<strong>鸭式辨型法</strong>，因为都具有 <code>label</code>  属性，所以被认定为两个相同，故而可以用此法来绕开多余的类型检查。</p>\n<h2 id=\"绕开额外属性检查的方式\"><a class=\"anchor\" href=\"#绕开额外属性检查的方式\">#</a> 绕开额外属性检查的方式</h2>\n<h3 id=\"鸭式辨型法-2\"><a class=\"anchor\" href=\"#鸭式辨型法-2\">#</a> 鸭式辨型法</h3>\n<p>如上例子所示</p>\n<h3 id=\"类型断言-2\"><a class=\"anchor\" href=\"#类型断言-2\">#</a> 类型断言</h3>\n<p>类型断言的意义就等同于你在告诉程序，你很清楚自己在做什么，此时程序自然就不会再进行额外的属性检查了。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  money<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"兔神\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  money<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  girl<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> Props<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><h3 id=\"索引签名\"><a class=\"anchor\" href=\"#索引签名\">#</a> 索引签名</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  money<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"兔神\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  money<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  girl<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></pre></td></tr></table></figure><h1 id=\"接口与类型别名的区别\"><a class=\"anchor\" href=\"#接口与类型别名的区别\">#</a> 接口与类型别名的区别</h1>\n<p>实际上，在大多数的情况下使用接口类型和类型别名的效果等价，但是在某些特定的场景下这两者还是存在很大区别。</p>\n<blockquote>\n<p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 而接口的作用就是为这些类型命名和为你的代码或第三方代码定义数据模型。</p>\n</blockquote>\n<blockquote>\n<p>type (类型别名) 会给一个类型起个新名字。 type 有时和 interface 很像，但是可以作用于原始值（基本类型），联合类型，元组以及其它任何你需要手写的类型。起别名不会新建一个类型 - 它创建了一个新 名字来引用那个类型。给基本类型起别名通常没什么用，尽管可以做为文档的一种形式使用。</p>\n</blockquote>\n<h2 id=\"objects-functions\"><a class=\"anchor\" href=\"#objects-functions\">#</a> Objects / Functions</h2>\n<p>两者都可以用来描述对象或函数的类型，但是语法不同。</p>\n<p><strong>Interface</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Type alias</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">SetPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"other-types\"><a class=\"anchor\" href=\"#other-types\">#</a> Other Types</h2>\n<p>与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// primitive</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// union</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPoint</span> <span class=\"token operator\">=</span> PartialPointX <span class=\"token operator\">|</span> PartialPointY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// tuple</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// dom</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> div<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"接口可以定义多次类型别名不可以\"><a class=\"anchor\" href=\"#接口可以定义多次类型别名不可以\">#</a> 接口可以定义多次，类型别名不可以</h2>\n<p>与类型别名不同，接口可以定义多次，会被自动合并为单个接口。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> point<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<p>两者的扩展方式不同，但并不互斥。接口可以扩展类型别名，同理，类型别名也可以扩展接口。</p>\n<p>接口的扩展就是继承，通过  <code>extends</code>  来实现。类型别名的扩展就是交叉类型，通过  <code>&amp;</code>  来实现。</p>\n<h3 id=\"接口扩展接口\"><a class=\"anchor\" href=\"#接口扩展接口\">#</a> 接口扩展接口</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型别名扩展类型别名\"><a class=\"anchor\" href=\"#类型别名扩展类型别名\">#</a> 类型别名扩展类型别名</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接口扩展类型别名\"><a class=\"anchor\" href=\"#接口扩展类型别名\">#</a> 接口扩展类型别名</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型别名扩展接口\"><a class=\"anchor\" href=\"#类型别名扩展接口\">#</a> 类型别名扩展接口</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h2 id=\"泛型介绍\"><a class=\"anchor\" href=\"#泛型介绍\">#</a> 泛型介绍</h2>\n<p>假如让你实现一个函数  <code>identity</code> ，函数的参数可以是任何值，返回值就是将参数原样返回，并且其只能接受一个参数，你会怎么做？</p>\n<p>你会觉得这很简单，顺手就写出这样的代码：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">identity</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arg<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由于其可以接受任意值，也就是说你的函数的入参和返回值都应该可以是任意类型。 现在让我们给代码增加类型声明：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">idBoolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">idNumber</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">idString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr></table></figure><p>一个笨的方法就像上面那样，也就是说 typescript 提供多少种类型，就需要复制多少份代码，然后改下类型签名。这对程序员来说是致命的。这种复制粘贴增加了出错的概率，使得代码难以维护，牵一发而动全身。并且将来 typescript 新增新的类型，你仍然需要修改代码，也就是说你的代码<strong>对修改开放</strong>，这样不好。还有一种方式是使用 any 这种 “万能语法”。缺点是什么呢？我举个例子：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr></table></figure><p>如果你使用 any 的话，怎么写都是 ok 的， 这就丧失了类型检查的效果。实际上我知道我传给你的是 string，返回来的也一定是 string，而 string 上没有 toFixed 方法，因此需要报错才是我想要的。也就是说我真正想要的效果是： <code>当我用到id的时候，你根据我传给你的类型进行推导</code> 。比如我传入的是 string，但是使用了 number 上的方法，你就应该报错。</p>\n<p>为了解决上面的这些问题，我们<strong>使用泛型对上面的代码进行重构</strong>。和我们的定义不同，这里用了一个 类型 T，这个 <strong>T 是一个抽象类型，只有在调用的时候才确定它的值</strong>，这就不用我们复制粘贴无数份代码了。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中  <code>T</code>  代表 <strong>Type</strong>，在定义泛型时通常用作第一个类型变量名称。但实际上  <code>T</code>  可以用任何有效名称代替。除了  <code>T</code>  之外，以下是常见泛型变量代表的意思：</p>\n<ul>\n<li>K（Key）：表示对象中的键类型；</li>\n<li>V（Value）：表示对象中的值类型；</li>\n<li>E（Element）：表示元素类型。</li>\n</ul>\n<p>来张图片帮助你理解 <img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/TS003.png\" alt=\"image.png\" /></p>\n<p>其实并不是只能定义一个类型变量，我们可以引入希望定义的任何数量的类型变量。比如我们引入一个新的类型变量  <code>U</code> ，用于扩展我们定义的  <code>identity</code>  函数：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Number<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/TS004.png\" alt=\"image.png\" /></p>\n<p>除了为类型变量显式设定值之外，一种更常见的做法是使编译器自动选择这些类型，从而使代码更简洁。我们可以完全省略尖括号，比如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Semlinker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于上述代码，编译器足够聪明，能够知道我们的参数类型，并将它们赋值给 T 和 U，而不需要开发人员显式指定它们。</p>\n<h2 id=\"泛型约束\"><a class=\"anchor\" href=\"#泛型约束\">#</a> 泛型约束</h2>\n<p>假如我想打印出参数的 size 属性呢？如果完全不进行约束 TS 是会报错的：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">trace</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Property 'size doesn't exist on type 'T'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>报错的原因在于 T 理论上是可以是任何类型的，不同于 any，你不管使用它的什么属性或者方法都会报错（除非这个属性和方法是所有集合共有的）。那么直观的想法是限定传给 trace 函数的<strong>参数类型</strong>应该有 size 类型，这样就不会报错了。如何去表达这个<strong>类型约束</strong>的点呢？实现这个需求的关键在于使用类型约束。 使用 extends 关键字可以做到这一点。简单来说就是你定义一个类型，然后让 T 实现这个接口即可。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Sizeable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">trace</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Sizeable<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有的人可能说我直接将 Trace 的参数限定为 Sizeable 类型可以么？如果你这么做，会有类型丢失的风险，详情可以参考这篇文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWxpYW5nYXJhbWVuZHkuZGV2L3doZW4tdHMtZ2VuZXJpY3Mv\"> A use case for TypeScript Generics</span>。</p>\n<h2 id=\"泛型工具类型\"><a class=\"anchor\" href=\"#泛型工具类型\">#</a> 泛型工具类型</h2>\n<p>为了方便开发者 TypeScript 内置了一些常用的工具类型，比如 Partial、Required、Readonly、Record 和 ReturnType 等。不过在具体介绍之前，我们得先介绍一些相关的基础知识，方便读者可以更好的学习其它的工具类型。</p>\n<h3 id=\"1typeof\"><a class=\"anchor\" href=\"#1typeof\">#</a> 1.typeof</h3>\n<p>typeof 的主要用途是在类型上下文中获取变量或者属性的类型，下面我们通过一个具体示例来理解一下。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> sem<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"semlinker\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Sem</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> sem<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type Sem = Person</span></pre></td></tr></table></figure><p>在上面代码中，我们通过  <code>typeof</code>  操作符获取 sem 变量的类型并赋值给 Sem 类型变量，之后我们就可以使用 Sem 类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> lolo<span class=\"token operator\">:</span> Sem <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"lolo\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你也可以对嵌套对象执行相同的操作：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> Message <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"jimmy\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    address<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      province<span class=\"token operator\">:</span> <span class=\"token string\">'四川'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      city<span class=\"token operator\">:</span> <span class=\"token string\">'成都'</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">message</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> Message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> type message = &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    name: string;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    age: number;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    address: &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        province: string;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        city: string;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>此外， <code>typeof</code>  操作符除了可以获取对象的结构类型之外，它也可以用来获取函数对象的类型，比如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> toArray<span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> (x: number) => number[]</span></pre></td></tr></table></figure><h3 id=\"2keyof\"><a class=\"anchor\" href=\"#2keyof\">#</a> 2.keyof</h3>\n<p><code>keyof</code>  操作符是在 TypeScript 2.1 版本引入的，该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"name\" | \"age\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K2</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"length\" | \"toString\" | \"pop\" | \"push\" | \"concat\" | \"join\" </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K3</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Person <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span></pre></td></tr></table></figure><p>在 TypeScript 中支持两种索引签名，数字索引和字符串索引：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringArray</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 字符串索引 -> keyof StringArray => string | number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringArray1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 数字索引 -> keyof StringArray1 => number</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了同时支持两种索引类型，就得要求数字索引的返回值必须是字符串索引返回值的子类。<strong>其中的原因就是当使用数值索引时，JavaScript 在执行索引操作时，会先把数值索引先转换为字符串索引</strong>。所以  <code>keyof &#123; [x: string]: Person &#125;</code>  的结果会返回  <code>string | number</code> 。</p>\n<p>keyof 也支持基本数据类型：</p>\n<pre><code>let K1: keyof boolean; // let K1: &quot;valueOf&quot;\nlet K2: keyof number; // let K2: &quot;toString&quot; | &quot;toFixed&quot; | &quot;toExponential&quot; | ...\nlet K3: keyof symbol; // let K1: &quot;valueOf&quot;\n\n</code></pre>\n<h4 id=\"keyof-的作用\"><a class=\"anchor\" href=\"#keyof-的作用\">#</a> keyof 的作用</h4>\n<p>JavaScript 是一种高度动态的语言。有时在静态类型系统中捕获某些操作的语义可能会很棘手。以一个简单的 <code>prop</code>  函数为例：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该函数接收 obj 和 key 两个参数，并返回对应属性的值。对象上的不同属性，可以具有完全不同的类型，我们甚至不知道 obj 对象长什么样。</p>\n<p>那么在 TypeScript 中如何定义上面的  <code>prop</code>  函数呢？我们来尝试一下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面代码中，为了避免调用 prop 函数时传入错误的参数类型，我们为 obj 和 key 参数设置了类型，分别为  <code>&#123;&#125;</code>  和  <code>string</code>  类型。然而，事情并没有那么简单。针对上述的代码，TypeScript 编译器会输出以下错误信息：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Element implicitly has an <span class=\"token string\">'any'</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">because</span> expression <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'string'</span> can<span class=\"token string\">'t be used to index type '</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>'<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>元素隐式地拥有  <code>any</code>  类型，因为  <code>string</code>  类型不能被用于索引  <code>&#123;&#125;</code>  类型。要解决这个问题，你可以使用以下非常暴力的方案：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显该方案并不是一个好的方案，我们来回顾一下  <code>prop</code>  函数的作用，该函数用于获取某个对象中指定属性的属性值。因此我们期望用户输入的属性是对象上已存在的属性，那么如何限制属性名的范围呢？这时我们可以利用本文的主角  <code>keyof</code>  操作符：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">prop</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在以上代码中，我们使用了 TypeScript 的泛型和泛型约束。<strong>首先定义了 T 类型并使用  <code>extends</code>  关键字约束该类型必须是 object 类型的子类型，然后使用  <code>keyof</code>  操作符获取 T 类型的所有键，其返回类型是联合类型，最后利用  <code>extends</code>  关键字约束 K 类型必须为  <code>keyof T</code>  联合类型的子类型。</strong>  是骡子是马拉出来遛遛就知道了，我们来实际测试一下：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Todo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> Todo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token string\">\"Learn TypeScript keyof\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">prop</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// const id: number</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// const text: string</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> done <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// const done: boolean</span></pre></td></tr></table></figure><p>很明显使用泛型，重新定义后的  <code>prop&lt;T extends object, K extends keyof T&gt;(obj: T, key: K)</code>  函数，已经可以正确地推导出指定键对应的类型。那么当访问 todo 对象上不存在的属性时，会出现什么情况？比如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于上述代码，TypeScript 编译器会提示以下错误：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Argument <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'\"date\"'</span> <span class=\"token keyword\">is</span> not assignable to parameter <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'\"id\" | \"text\" | \"done\"'</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>这就阻止我们尝试读取不存在的属性。</p>\n<h3 id=\"3in\"><a class=\"anchor\" href=\"#3in\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzMuaW4=\">3.in</span></h3>\n<p><code>in</code>  用来遍历枚举类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Keys</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Obj</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>p <span class=\"token keyword\">in</span> Keys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// -> &#123; a: any, b: any, c: any &#125;</span></pre></td></tr></table></figure><h3 id=\"4infer\"><a class=\"anchor\" href=\"#4infer\">#</a> 4.infer</h3>\n<p>在条件类型语句中，可以用  <code>infer</code>  声明一个类型变量并且对它进行使用。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码中  <code>infer R</code>  就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p>\n<h3 id=\"5extends\"><a class=\"anchor\" href=\"#5extends\">#</a> 5.extends</h3>\n<p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lengthwise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">loggingIdentity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Lengthwise<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">loggingIdentity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, number doesn't have a .length property</span></pre></td></tr></table></figure><p>这时我们需要传入符合约束类型的值，必须包含 length 属性：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">loggingIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>length<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"索引类型\"><a class=\"anchor\" href=\"#索引类型\">#</a> 索引类型</h3>\n<p>在实际开发中，我们经常能遇到这样的场景，在对象中获取一些属性的值，然后建立对应的集合。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'musion'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">35</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> person<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['musion', 35]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [undefined]</span></pre></td></tr></table></figure><p>在上述例子中，可以看到 getValues (persion, ['gender']) 打印出来的是 [undefined]，但是 ts 编译器并没有给出报错信息，那么如何使用 ts 对这种模式进行类型约束呢？这里就要用到了索引类型，改造一下 getValues 函数，通过 <strong>索引类型查询</strong>和 <strong>索引访问</strong> 操作符：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getValues</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> person<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'musion'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">35</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['musion']</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// Argument of Type '\"gender\"[]' is not assignable to parameter of type '(\"name\" | \"age\")[]'.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// Type \"gender\" is not assignable to type \"name\" | \"age\".</span></pre></td></tr></table></figure><p>编译器会检查传入的值是否是 Person 的一部分。通过下面的概念来理解上面的代码：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>表示对象<span class=\"token constant\">T</span>的属性<span class=\"token constant\">K</span>所表示的类型，在上述例子中，<span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 表示变量<span class=\"token constant\">T</span>取属性<span class=\"token constant\">K</span>的值的数组</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 通过 [] 索引类型访问操作符，我们就能得到某个索引的类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">type</span> <span class=\"token class-name\">MyType</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Person 中 name 的类型为 string type MyType = string</span></pre></td></tr></table></figure><p>介绍完概念之后，应该就可以理解上面的代码了。首先看泛型，这里有 T 和 K 两种类型，根据类型推断，第一个参数 person 就是 person，类型会被推断为 Person。而第二个数组参数的类型推断（K extends keyof T），keyof 关键字可以获取 T，也就是 Person 的所有属性名，即 ['name', 'age']。而 extends 关键字让泛型 K 继承了 Person 的所有属性名，即 ['name', 'age']。这三个特性组合保证了代码的动态性和准确性，也让代码提示变得更加丰富了</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Argument of Type '\"gender\"[]' is not assignable to parameter of type '(\"name\" | \"age\")[]'.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Type \"gender\" is not assignable to type \"name\" | \"age\".</span></pre></td></tr></table></figure><h3 id=\"映射类型\"><a class=\"anchor\" href=\"#映射类型\">#</a> 映射类型</h3>\n<blockquote>\n<p>根据旧的类型创建出新的类型，我们称之为映射类型</p>\n</blockquote>\n<p>比如我们定义一个接口</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestInterface</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们把上面定义的接口里面的属性全部变成可选</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 我们可以通过 +/- 来指定添加还是删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionalTestInterface<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>p <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">newTestInterface</span> <span class=\"token operator\">=</span> OptionalTestInterface<span class=\"token operator\">&lt;</span>TestInterface<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// type newTestInterface = &#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    name?:string,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    age?:number</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr></table></figure><p>比如我们再加上只读</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionalTestInterface<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">+</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>p <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">newTestInterface</span> <span class=\"token operator\">=</span> OptionalTestInterface<span class=\"token operator\">&lt;</span>TestInterface<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// type newTestInterface = &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//   readonly name?:string,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//   readonly age?:number</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr></table></figure><p>由于生成只读属性和可选属性比较常用，所以 TS 内部已经给我们提供了现成的实现 Readonly / Partial, 会面内置的工具类型会介绍.</p>\n<p><strong>内置的工具类型</strong></p>\n<h3 id=\"partial\"><a class=\"anchor\" href=\"#partial\">#</a> Partial</h3>\n<blockquote>\n<p><code>Partial&lt;T&gt;</code>  将类型的属性变成可选</p>\n</blockquote>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在以上代码中，首先通过  <code>keyof T</code>  拿到  <code>T</code>  的所有属性名，然后使用  <code>in</code>  进行遍历，将值赋给  <code>P</code> ，最后通过  <code>T[P]</code>  取得相应的属性值的类。中间的  <code>?</code>  号，用于将所有属性变为可选。</p>\n<h4 id=\"举例说明\"><a class=\"anchor\" href=\"#举例说明\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// error：Property 'id' is missing in type '&#123; name: string; &#125;' but required in type 'UserInfo'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> xiaoming<span class=\"token operator\">:</span> UserInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'xiaoming'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用   <code>Partial&lt;T&gt;</code></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInfo</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>UserInfo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> xiaoming<span class=\"token operator\">:</span> NewUserInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'xiaoming'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个  NewUserInfo 就相当于</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NewUserInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是  <code>Partial&lt;T&gt;</code>  有个局限性，就是只支持处理第一层的属性，如果我的接口定义是这样的</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fruits<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        appleNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        orangeNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInfo</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>UserInfo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Property 'appleNumber' is missing in type '&#123; orangeNumber: number; &#125;' but required in type '&#123; appleNumber: number; orangeNumber: number; &#125;'.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> xiaoming<span class=\"token operator\">:</span> NewUserInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'xiaoming'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fruits<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        orangeNumber<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，第二层以后就不会处理了，如果要处理多层，就可以自己实现</p>\n<h4 id=\"deeppartial\"><a class=\"anchor\" href=\"#deeppartial\">#</a> DeepPartial</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">// 如果是 object，则递归类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token constant\">U</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">?</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialedWindow</span> <span class=\"token operator\">=</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 现在 T 上所有属性都变成了可选啦</span></pre></td></tr></table></figure><h3 id=\"required\"><a class=\"anchor\" href=\"#required\">#</a> Required</h3>\n<blockquote>\n<p>Required 将类型的属性变成必选</p>\n</blockquote>\n<h4 id=\"定义-2\"><a class=\"anchor\" href=\"#定义-2\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中  <code>-?</code>  是代表移除  <code>?</code>  这个 modifier 的标识。再拓展一下，除了可以应用于  <code>?</code>  这个 modifiers ，还有应用在  <code>readonly</code>  ，比如  <code>Readonly&lt;T&gt;</code>  这个类型</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>p <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"readonly\"><a class=\"anchor\" href=\"#readonly\">#</a> Readonly</h3>\n<blockquote>\n<p><code>Readonly&lt;T&gt;</code>  的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。</p>\n</blockquote>\n<h4 id=\"定义-3\"><a class=\"anchor\" href=\"#定义-3\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-2\"><a class=\"anchor\" href=\"#举例说明-2\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Delete inactive users\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>todo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: cannot reassign a readonly property</span></pre></td></tr></table></figure><h3 id=\"pick\"><a class=\"anchor\" href=\"#pick\">#</a> Pick</h3>\n<blockquote>\n<p>Pick 从某个类型中挑出一些属性出来</p>\n</blockquote>\n<h4 id=\"定义-4\"><a class=\"anchor\" href=\"#定义-4\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-3\"><a class=\"anchor\" href=\"#举例说明-3\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以看到 NewUserInfo 中就只有个 name 的属性了。</p>\n<h3 id=\"record\"><a class=\"anchor\" href=\"#record\">#</a> Record</h3>\n<blockquote>\n<p><code>Record&lt;K extends keyof any, T&gt;</code>  的作用是将  <code>K</code>  中所有的属性的值转化为  <code>T</code>  类型。</p>\n</blockquote>\n<h4 id=\"定义-5\"><a class=\"anchor\" href=\"#定义-5\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-4\"><a class=\"anchor\" href=\"#举例说明-4\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"home\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"about\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Page<span class=\"token punctuation\">,</span> PageInfo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  about<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"contact\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"returntype\"><a class=\"anchor\" href=\"#returntype\">#</a> ReturnType</h3>\n<blockquote>\n<p>用来得到一个函数的返回值类型</p>\n</blockquote>\n<h4 id=\"定义-6\"><a class=\"anchor\" href=\"#定义-6\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">?</span> <span class=\"token constant\">R</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>infer</code>  在这里用于提取函数类型的返回值类型。 <code>ReturnType&lt;T&gt;</code>  只是将 infer R 从参数位置移动到返回值位置，因此此时 R 即是表示待推断的返回值类型。</p>\n<h4 id=\"举例说明-5\"><a class=\"anchor\" href=\"#举例说明-5\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> ReturnType<span class=\"token operator\">&lt;</span>Func<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ReturnType</code>  获取到  <code>Func</code>  的返回值类型为  <code>string</code> ，所以， <code>foo</code>  也就只能被赋值为字符串了。</p>\n<h3 id=\"exclude\"><a class=\"anchor\" href=\"#exclude\">#</a> Exclude</h3>\n<blockquote>\n<p><code>Exclude&lt;T, U&gt;</code>  的作用是将某个类型中属于另一个的类型移除掉。</p>\n</blockquote>\n<h4 id=\"定义-7\"><a class=\"anchor\" href=\"#定义-7\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果  <code>T</code>  能赋值给  <code>U</code>  类型的话，那么就会返回  <code>never</code>  类型，否则返回  <code>T</code>  类型。最终实现的效果就是将  <code>T</code>  中某些属于  <code>U</code>  的类型移除掉。</p>\n<h4 id=\"举例说明-6\"><a class=\"anchor\" href=\"#举例说明-6\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"b\" | \"c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"c\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span></pre></td></tr></table></figure><h3 id=\"extract\"><a class=\"anchor\" href=\"#extract\">#</a> Extract</h3>\n<blockquote>\n<p><code>Extract&lt;T, U&gt;</code>  的作用是从  <code>T</code>  中提取出  <code>U</code> 。</p>\n</blockquote>\n<h4 id=\"定义-8\"><a class=\"anchor\" href=\"#定义-8\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-7\"><a class=\"anchor\" href=\"#举例说明-7\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () =>void</span></pre></td></tr></table></figure><h3 id=\"omit\"><a class=\"anchor\" href=\"#omit\">#</a> Omit</h3>\n<blockquote>\n<p><code>Omit&lt;T, K extends keyof any&gt;</code>  的作用是使用  <code>T</code>  类型中除了  <code>K</code>  类型的所有属性，来构造一个新的类型。</p>\n</blockquote>\n<h4 id=\"定义-9\"><a class=\"anchor\" href=\"#定义-9\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-8\"><a class=\"anchor\" href=\"#举例说明-8\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"description\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"nonnullable\"><a class=\"anchor\" href=\"#nonnullable\">#</a> NonNullable</h3>\n<blockquote>\n<p><code>NonNullable&lt;T&gt;</code>  的作用是用来过滤类型中的  <code>null</code>  及  <code>undefined</code>  类型。</p>\n</blockquote>\n<h4 id=\"定义-10\"><a class=\"anchor\" href=\"#定义-10\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> extendsnull <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-9\"><a class=\"anchor\" href=\"#举例说明-9\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string[]</span></pre></td></tr></table></figure><h3 id=\"parameters\"><a class=\"anchor\" href=\"#parameters\">#</a> Parameters</h3>\n<blockquote>\n<p><code>Parameters&lt;T&gt;</code>  的作用是用于获得函数的参数类型组成的元组类型。</p>\n</blockquote>\n<h4 id=\"定义-11\"><a class=\"anchor\" href=\"#定义-11\">#</a> 定义</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"举例说明-10\"><a class=\"anchor\" href=\"#举例说明-10\">#</a> 举例说明</h4>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofArray<span class=\"token punctuation\">.</span>isArray<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [any]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofparseInt<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [string, (number | undefined)?]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofMath<span class=\"token punctuation\">.</span>max<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number[]</span></pre></td></tr></table></figure><h1 id=\"tsconfigtypescripton\"><a class=\"anchor\" href=\"#tsconfigtypescripton\">#</a> tsconfig.typescripton</h1>\n<h2 id=\"tsconfigtypescripton介绍\"><a class=\"anchor\" href=\"#tsconfigtypescripton介绍\">#</a> tsconfig.typescripton 介绍</h2>\n<p>tsconfig.typescripton 是 TypeScript 项目的配置文件。如果一个目录下存在一个 tsconfig.typescripton 文件，那么往往意味着这个目录就是 TypeScript 项目的根目录。</p>\n<p>tsconfig.typescripton 包含 TypeScript 编译的相关配置，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。</p>\n<h2 id=\"tsconfigtypescripton-重要字段\"><a class=\"anchor\" href=\"#tsconfigtypescripton-重要字段\">#</a> tsconfig.typescripton 重要字段</h2>\n<ul>\n<li>files - 设置要编译的文件的名称；</li>\n<li>include - 设置需要进行编译的文件，支持路径模式匹配；</li>\n<li>exclude - 设置无需进行编译的文件，支持路径模式匹配；</li>\n<li>compilerOptions - 设置与编译流程相关的选项。</li>\n</ul>\n<h2 id=\"compileroptions-选项\"><a class=\"anchor\" href=\"#compileroptions-选项\">#</a> compilerOptions 选项</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* 基本选项 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commontypescript\"</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 指定使用模块: 'commontypescript', 'amd', 'system', 'umd' or 'es2015'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">// 指定要包含在编译中的库文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"allowtypescript\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 允许编译 javascript 文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">\"checktypescript\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 报告 javascript 文件中的错误</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"typescriptx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 指定 typescriptx 代码的生成: 'preserve', 'react-native', or 'react'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 生成相应的 '.d.ts' 文件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 生成相应的 '.map' 文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token string\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 将输出文件合并为一个文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 指定输出目录</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用来控制输出目录结构 --outDir.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 删除编译后的所有的注释</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 不生成输出文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 从 tslib 导入辅助工具函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/* 严格的类型检查选项 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 启用所有严格类型检查选项</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 在表达式和声明上有隐含的 any 类型时报错</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 启用严格的 null 检查</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token string\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/* 额外的检查 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token string\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 有未使用的变量时，抛出错误</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 有未使用的参数时，抛出错误</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token string\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 并不是所有函数里的代码都有返回值时，抛出错误</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/* 模块解析选项 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 选择模块解析策略： 'node' (Node.typescript) or 'classic' (TypeScript pre-1.6)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用于解析非相对模块名称的基目录</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 模块名到基于 baseUrl 的路径映射的列表</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">\"rootDirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 包含类型声明的文件列表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 需要包含的类型声明文件名列表</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 允许从没有设置默认导出的模块中默认导入。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/* Source Map Options */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token string\">\"sourceRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token string\">\"mapRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定调试器应该找到映射文件而不是生成文件的位置</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token string\">\"inlineSourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token string\">\"inlineSources\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/* 其他选项 */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token string\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 启用装饰器</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token string\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>          <span class=\"token comment\">// 为装饰器提供元数据的支持</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"编写高效-ts-代码的一些建议\"><a class=\"anchor\" href=\"#编写高效-ts-代码的一些建议\">#</a> 编写高效 TS 代码的一些建议</h1>\n<h2 id=\"尽量减少重复代码\"><a class=\"anchor\" href=\"#尽量减少重复代码\">#</a> 尽量减少重复代码</h2>\n<p>对于刚接触 TypeScript 的小伙伴来说，在定义接口时，可能一不小心会出现以下类似的重复代码。比如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  birth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显，相对于  <code>Person</code>  接口来说， <code>PersonWithBirthDate</code>  接口只是多了一个  <code>birth</code>  属性，其他的属性跟  <code>Person</code>  接口是一样的。那么如何避免出现例子中的重复代码呢？要解决这个问题，可以利用  <code>extends</code>  关键字：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  birth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然除了使用  <code>extends</code>  关键字之外，也可以使用交叉运算符（&amp;）：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> birth<span class=\"token operator\">:</span> Date <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外，有时候你可能还会发现自己想要定义一个类型来匹配一个初始配置对象的「形状」，比如：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">INIT_OPTIONS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  width<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token string\">\"#00FF00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token string\">\"VGA\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实，对于 Options 接口来说，你也可以使用 typeof 操作符来快速获取配置对象的「形状」：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Options</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">INIT_OPTIONS</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在实际的开发过程中，重复的类型并不总是那么容易被发现。有时它们会被语法所掩盖。比如有多个函数拥有相同的类型签名：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于上面的 get 和 post 方法，为了避免重复的代码，你可以提取统一的类型签名：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> get<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> post<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用更精确的类型替代字符串类型\"><a class=\"anchor\" href=\"#使用更精确的类型替代字符串类型\">#</a> 使用更精确的类型替代字符串类型</h2>\n<p>假设你正在构建一个音乐集，并希望为专辑定义一个类型。这时你可以使用  <code>interface</code>  关键字来定义一个  <code>Album</code>  类型：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Album</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  artist<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 艺术家</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 专辑标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  releaseDate<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发行日期：YYYY-MM-DD</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  recordingType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 录制类型：\"live\" 或 \"studio\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于  <code>Album</code>  类型，你希望  <code>releaseDate</code>  属性值的格式为  <code>YYYY-MM-DD</code> ，而  <code>recordingType</code>  属性值的范围为  <code>live</code>  或  <code>studio</code> 。但因为接口中  <code>releaseDate</code>  和  <code>recordingType</code>  属性的类型都是字符串，所以在使用  <code>Album</code>  接口时，可能会出现以下问题：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> dangerous<span class=\"token operator\">:</span> Album <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  artist<span class=\"token operator\">:</span> <span class=\"token string\">\"Michael Jackson\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Dangerous\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  releaseDate<span class=\"token operator\">:</span> <span class=\"token string\">\"November 31, 1991\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 与预期格式不匹配</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  recordingType<span class=\"token operator\">:</span> <span class=\"token string\">\"Studio\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 与预期格式不匹配</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虽然  <code>releaseDate</code>  和  <code>recordingType</code>  的值与预期的格式不匹配，但此时 TypeScript 编译器并不能发现该问题。为了解决这个问题，你应该为  <code>releaseDate</code>  和  <code>recordingType</code>  属性定义更精确的类型，比如这样：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Album</span> <span class=\"token punctuation\">&#123;</span>\\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  artist<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 艺术家</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 专辑标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  releaseDate<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发行日期：YYYY-MM-DD</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  recordingType<span class=\"token operator\">:</span> <span class=\"token string\">\"studio\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"live\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 录制类型：\"live\" 或 \"studio\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重新定义  <code>Album</code>  接口之后，对于前面的赋值语句，TypeScript 编译器就会提示以下异常信息：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> dangerous<span class=\"token operator\">:</span> Album <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  artist<span class=\"token operator\">:</span> <span class=\"token string\">\"Michael Jackson\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Dangerous\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 不能将类型 “string” 分配给类型 “Date”。ts (2322)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  releaseDate<span class=\"token operator\">:</span> <span class=\"token string\">\"November 31, 1991\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 不能将类型 “\"Studio\"” 分配给类型 “\"studio\" | \"live\"”。ts (2322)\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  recordingType<span class=\"token operator\">:</span> <span class=\"token string\">\"Studio\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了解决上面的问题，你需要为  <code>releaseDate</code>  和  <code>recordingType</code>  属性设置正确的类型，比如这样：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> dangerous<span class=\"token operator\">:</span> Album <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  artist<span class=\"token operator\">:</span> <span class=\"token string\">\"Michael Jackson\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Dangerous\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  releaseDate<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1991-11-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  recordingType<span class=\"token operator\">:</span> <span class=\"token string\">\"studio\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"定义的类型总是表示有效的状态\"><a class=\"anchor\" href=\"#定义的类型总是表示有效的状态\">#</a> 定义的类型总是表示有效的状态</h2>\n<p>假设你正在构建一个允许用户指定页码，然后加载并显示该页面对应内容的 Web 应用程序。首先，你可能会先定义  <code>State</code>  对象：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  pageContent<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  isLoading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  errorMsg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着你会定义一个  <code>renderPage</code>  函数，用来渲染页面：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>errorMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">呜呜呜，加载页面出现异常了...</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>state<span class=\"token punctuation\">.</span>errorMsg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">页面加载中~~~</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>state<span class=\"token punctuation\">.</span>pageContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 输出结果：页面加载中～～～</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> pageContent<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 输出结果：&lt;div > 大家好 & lt;/div></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> pageContent<span class=\"token operator\">:</span> <span class=\"token string\">\"大家好呀\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建好  <code>renderPage</code>  函数，你可以继续定义一个  <code>changePage</code>  函数，用于根据页码获取对应的页面数据：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> newPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  state<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUrlForPage</span><span class=\"token punctuation\">(</span>newPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unable to load </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>newPage<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    state<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    state<span class=\"token punctuation\">.</span>pageContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    state<span class=\"token punctuation\">.</span>errorMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于以上的  <code>changePage</code>  函数，它存在以下问题：</p>\n<ul>\n<li>在 catch 语句中，未把  <code>state.isLoading</code>  的状态设置为  <code>false</code> ；</li>\n<li>未及时清理  <code>state.errorMsg</code>  的值，因此如果之前的请求失败，那么你将继续看到错误消息，而不是加载消息。</li>\n</ul>\n<p>出现上述问题的原因是，前面定义的  <code>State</code>  类型允许同时设置  <code>isLoading</code>  和  <code>errorMsg</code>  的值，尽管这是一种无效的状态。针对这个问题，你可以考虑引入可辨识联合类型来定义不同的页面请求状态：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestPending</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestError</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  errorMsg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestSuccess</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  pageContent<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">RequestState</span> <span class=\"token operator\">=</span> RequestPending <span class=\"token operator\">|</span> RequestError <span class=\"token operator\">|</span> RequestSuccess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  currentPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  requests<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> RequestState <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在以上代码中，通过使用可辨识联合类型分别定义了 3 种不同的请求状态，这样就可以很容易的区分出不同的请求状态，从而让业务逻辑处理更加清晰。接下来，需要基于更新后的  <code>State</code>  类型，来分别更新一下前面创建的  <code>renderPage</code>  和  <code>changePage</code>  函数：</p>\n<p><strong>更新后的 renderPage 函数</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> currentPage <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> requestState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span>currentPage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>requestState<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"pending\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">页面加载中~~~</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">呜呜呜，加载第</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>currentPage<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">页出现异常了...</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>requestState<span class=\"token punctuation\">.</span>errorMsg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ok\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>第</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>currentPage<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">页的内容：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>requestState<span class=\"token punctuation\">.</span>pageContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>更新后的 changePage 函数</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> newPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  state<span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span>newPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token operator\">:</span> <span class=\"token string\">\"pending\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  state<span class=\"token punctuation\">.</span>currentPage <span class=\"token operator\">=</span> newPage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUrlForPage</span><span class=\"token punctuation\">(</span>newPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">无法正常加载页面 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>newPage<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> pageContent <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    state<span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span>newPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token operator\">:</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> pageContent <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    state<span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span>newPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> errorMsg<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> e <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>changePage</code>  函数中，会根据不同的情形设置不同的请求状态，而不同的请求状态会包含不同的信息。这样  <code>renderPage</code>  函数就可以根据统一的  <code>state</code>  属性值来进行相应的处理。因此，通过使用可辨识联合类型，让请求的每种状态都是有效的状态，不会出现无效状态的问题。</p>\n",
            "tags": [
                "typescript",
                "typescript"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/7.%20%E7%AE%80%E5%8E%86%E6%A8%A1%E5%9D%97%E5%88%B6%E4%BD%9C/",
            "url": "http://jluyeyu.com/project/onlineResume/7.%20%E7%AE%80%E5%8E%86%E6%A8%A1%E5%9D%97%E5%88%B6%E4%BD%9C/",
            "title": "7. 简历制作模块",
            "date_published": "2022-01-10T08:30:52.000Z",
            "content_html": "<h2 id=\"简历制作模块\"><a class=\"anchor\" href=\"#简历制作模块\">#</a> 简历制作模块</h2>\n<p>回顾一下现在的文件结构，在上一节时，我们将常用的组件进行抽离封装，对类型进行了约束，添加了 templates 模版文件夹，用于存放所有模版，新增 resumeModel 定义用户简历信息的数据字段。</p>\n<p>万事俱备，接下来正式进入到简历制作环节，话不多说，让我们动手实践吧～</p>\n<h2 id=\"简历入口实现\"><a class=\"anchor\" href=\"#简历入口实现\">#</a> 简历入口实现</h2>\n<p>我们将简历制作的页面拆分为三大块，分别为 <code>头部操作区</code> 、 <code>简历内容展示区</code> 、 <code>工具条操作区</code> ，如下图</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_%E6%A1%86%E6%9E%B6.png\" alt=\"image.png\" /></p>\n<p>我们按照这种分层进行代码编写，在  <code>renderer/container/resume</code>  文件夹下新增三个文件夹，每个文件夹都追加一个入口文件 index.tsx 和 index.less 文件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/ResumeAction/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ResumeAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是简历头部操作区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeAction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/ResumeContent/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ResumeContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">我是简历内容展示区</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeContent<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/ResumeToolbar/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ResumeToolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">我是工具条操作区</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeToolbar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此刻我们去修改简历模块的入口文件 index.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 👇 将组件引入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> ResumeAction <span class=\"token keyword\">from</span> <span class=\"token string\">'./ResumeAction'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> ResumeContent <span class=\"token keyword\">from</span> <span class=\"token string\">'./ResumeContent'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> ResumeToolbar <span class=\"token keyword\">from</span> <span class=\"token string\">'./ResumeToolbar'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>ResumeAction <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">&lt;</span>ResumeContent <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"toolbar\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span>ResumeToolbar <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Resume<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>加上 CSS 定位和布局</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #27292c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// color: #fff;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token selector\">.header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 820px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 32px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span><span class=\"token comment\">// 一会调整时需要修改</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token selector\">.content</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 32px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 820px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100vh <span class=\"token operator\">-</span> 76px <span class=\"token operator\">-</span> 16px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token selector\">.toolbar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 280px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 120px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 888px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_%E7%AE%80%E5%8E%86%E6%A1%86%E6%9E%B6.png\" alt=\"image.png\" /></p>\n<p>看样子布局方面没什么问题了，接下来按小模块，进行代码实现</p>\n<h3 id=\"resumeaction-操作区\"><a class=\"anchor\" href=\"#resumeaction-操作区\">#</a> ResumeAction 操作区</h3>\n<p>在功能上，该组件只需要实现 <code>返回首页</code> 与 <code>导出PDF</code>  功能，这边我们只需要知道点击之后，触发导出事件即可。我们来修改 ResumeAction 中的 index.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/ResumeAction/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token constant\">ROUTER</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> MyButton <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/components/MyButton'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ResumeAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 返回首页</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onBack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 导出 PDF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onExport</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"actions\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"back\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>onBack<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>返回<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">&lt;</span>MyButton size<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"export-btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>onExport<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>导出<span class=\"token constant\">PDF</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyButton<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeAction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>加上我们的 less 样式，并修改 resume 下的 index.less (.header 的 background-color-&gt;#27292c) 最后我们将操作区美化为下面效果图</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ResumeAction 下 less 样式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.actions</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border<span class=\"token operator\">-</span>box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space<span class=\"token operator\">-</span>between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// background-color: #ffffff;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token selector\">.back</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0.6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token selector\">:global</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">.export-btn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #27292c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_%E7%AE%80%E5%8E%86%E5%A4%B4%E9%83%A8%E6%A1%86%E6%9E%B6.png\" alt=\"image.png\" /></p>\n<h3 id=\"resumecontent-简历内容展示区\"><a class=\"anchor\" href=\"#resumecontent-简历内容展示区\">#</a> ResumeContent 简历内容展示区</h3>\n<p>由于我们的简历模版需要展示且可修改内容，为此，我们在  <code>ResumeContent</code>  下新增一个文件夹，取名为  <code>UseTemplate</code> ，寓意为使用的模版，此文件夹下存放着将来用于制作的简历模版。</p>\n<p>在上一节中事先准备好了一份静态简历模版，模版存放于： <code>renderer/container/templates</code> ，它的目的仅用于展示，告知用户当前有哪些模版可以选择，主要职责用于预览，而非制作。为了支持模版进行制作，我们将 templates 下的文件拷贝一份，存放在  <code>/ResumeContent/UseTemplate</code>  下，此时的文件目录为：</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_contentUI.png\" alt=\"image.png\" /></p>\n<p>接着我们去修改 ResumeContent 中的 index.tsx，将这份简历模版引入并展示</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/container/resume/ResumeContent/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 👇 引入简历模版</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> UseTemplateList <span class=\"token keyword\">from</span> <span class=\"token string\">'./UseTemplate'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> MyScrollBox <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/components/MyScrollBox'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ResumeContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token constant\">HEADER_ACTION_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">92</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>MyScrollBox maxHeight<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>height <span class=\"token operator\">-</span> <span class=\"token constant\">HEADER_ACTION_HEIGHT</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span>UseTemplateList<span class=\"token punctuation\">.</span>TemplateOne <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyScrollBox<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeContent<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>刷新页面，看看此刻的效果图</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19ccfa84bb174a62885aa69725509ca4~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" /></p>\n<h3 id=\"resumetoolbar-工具条操作区\"><a class=\"anchor\" href=\"#resumetoolbar-工具条操作区\">#</a> ResumeToolbar 工具条操作区</h3>\n<p>距离简历制作的入口页面，仅差最后的 Toolbar 工具条模块了，让我们来实现一下它。</p>\n<p>还记得第八章节中，我们对简历数据进行了划分，那么工具条模块的划分与之一一对应。</p>\n<p>我们进入  <code>renderer/common/constants</code>  文件夹下，新增一个 resume.ts 常量文件，在里面定义我们工具条模块的相关信息。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// app/renderer/common/constants/resume.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  personal<span class=\"token operator\">:</span> <span class=\"token string\">'personal'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 个人信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  contact<span class=\"token operator\">:</span> <span class=\"token string\">'contact'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 联系方式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  education<span class=\"token operator\">:</span> <span class=\"token string\">'education'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 教育信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  workPrefer<span class=\"token operator\">:</span> <span class=\"token string\">'workPrefer'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 工作期望</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  schoolExperience<span class=\"token operator\">:</span> <span class=\"token string\">'schoolExperience'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在校经历</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  projectExperience<span class=\"token operator\">:</span> <span class=\"token string\">'projectExperience'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 项目经验</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  workExperience<span class=\"token operator\">:</span> <span class=\"token string\">'workExperience'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 工作经历</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  certificate<span class=\"token operator\">:</span> <span class=\"token string\">'certificate'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获奖证书</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  evaluation<span class=\"token operator\">:</span> <span class=\"token string\">'evaluation'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 个人评价</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  skill<span class=\"token operator\">:</span> <span class=\"token string\">'skill'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 技能清单</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  test<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 测试用例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">RESUME_TOOLBAR_LIST</span><span class=\"token operator\">:</span> TSResume<span class=\"token punctuation\">.</span>SliderItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>personal<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'个人信息'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'更好介绍自己，机会会更多'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>education<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'教育信息'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'介绍你的学校和专业信息'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>contact<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'联系方式'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'少侠，请留下你的联系方式'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>workPrefer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'工作期望'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'聊聊你所期望的宜人办公城市'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>schoolExperience<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'在校经历'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'展示在校任职成果和人际关系'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>projectExperience<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'项目经验'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'展示研究过什么优秀项目和成果'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>workExperience<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'工作经历'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'申请岗位的相关经验和能力'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>certificate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'获奖证书'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'得过什么奖项值得炫耀'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>evaluation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'个人评价'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'低调夸一夸自己有什么亮点'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>skill<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'技能清单'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'展示具备的技能，突出你的能力'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">RESUME_TOOLBAR_MAPS</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'测试用例'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    summary<span class=\"token operator\">:</span> <span class=\"token string\">'测试用例，一键覆盖'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 ResumeToolbar 中，我们修改 index.tsx，将工具条模块常量引入，遍历展示</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @description 编辑简历 - 工具条模块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">import</span> MyScrollBox <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/components/MyScrollBox'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token constant\">RESUME_TOOLBAR_LIST</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/resume'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">ResumeToolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"slider\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token operator\">&lt;</span>MyScrollBox maxHeight<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>height <span class=\"token operator\">-</span> <span class=\"token number\">180</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             <span class=\"token operator\">&lt;</span>span styleName<span class=\"token operator\">=</span><span class=\"token string\">\"line\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             全部模块</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">RESUME_TOOLBAR_LIST</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toolbar<span class=\"token operator\">:</span> TSResume<span class=\"token punctuation\">.</span>SliderItem<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>toolbar<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                   <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"info\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                     <span class=\"token operator\">&lt;</span>i styleName<span class=\"token operator\">=</span><span class=\"token string\">\"icon\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                     <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                       <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>toolbar<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                       <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"summary\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>toolbar<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                 <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyScrollBox<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ResumeToolbar<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>刷新一下页面，我们看看最终效果</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_%E7%AE%80%E5%8E%86j%E9%9D%99%E6%80%81%E6%A1%86%E6%9E%B6.png\" alt=\"image.png\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01lbW9yeU9mTG92ZS9vbmxpbmVSZXN1bWUvdHJlZS8lRTklOUQlOTklRTYlODAlODElRTclODklODglRTYlOUMlQUM=\">静态版本代码</span></p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/5.%20Redux%E5%AD%98%E5%82%A8/",
            "url": "http://jluyeyu.com/project/onlineResume/5.%20Redux%E5%AD%98%E5%82%A8/",
            "title": "5. 如何进行数据存储和组件间通信",
            "date_published": "2022-01-10T03:30:52.000Z",
            "content_html": "<h2 id=\"5-如何进行数据存储和组件间通信\"><a class=\"anchor\" href=\"#5-如何进行数据存储和组件间通信\">#</a> 5. 如何进行数据存储和组件间通信</h2>\n<p>上一节，我们已将首页开发完毕，接下来将要进入简历制作，但在简历制作之前，我们先将数据存储模块加以实现。让我们思考篇一个问题点：</p>\n<p>简历平台最重要的是什么：数据！重启应用，你是否期望应用能恢复你上次的数据信息？</p>\n<h3 id=\"实时性数据存储\"><a class=\"anchor\" href=\"#实时性数据存储\">#</a> 实时性数据存储</h3>\n<p>我们通过 redux 进行数据状态管理，为了避免繁琐的操作，采用 rc-redux-model 进行辅助开发。</p>\n<h4 id=\"1-安装\"><a class=\"anchor\" href=\"#1-安装\">#</a> 1. 安装</h4>\n<p>让我们先来安装一下</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install redux</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install rc<span class=\"token operator\">-</span>redux<span class=\"token operator\">-</span>model <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token comment\">// 👉 安装这个库，简便 redux 操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install redux<span class=\"token operator\">-</span>logger <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token comment\">// 👉 安装这个库，让我们在控制台看到 redux 数据</span></pre></td></tr></table></figure><p>安装完成后，我们在  <code>app/renderer</code>  文件夹下，新增一个名为  <code>store</code>  的文件夹，存放着所有 redux model 相关的代码文件。在里面新增一个文件名为  <code>index.ts</code> ，该文件主要引入我们所有的 model，经过 redux 的 API，导出一颗完整的数据状态树。（看下面代码注释）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/store/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> RcReduxModel <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-redux-model'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 👇 引入我们写好的 model</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> globalModel <span class=\"token keyword\">from</span> <span class=\"token string\">'./globalModel'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 👇 这里只需要调用 RcReduxModel 实例化一下得到最后的 reduxModel</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> reduxModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RcReduxModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>globalModel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 👇 无侵入式的使用 Redux，即使你写最原始的 reducer 也照样支持</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> reducerList <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducerList<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>thunk<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面我们引入了  <code>./globalModel</code> ，那么我们在 store 文件夹下，追加一份  <code>globalModel.ts</code>  文件。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/store/globalModel.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> globalModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  namespace<span class=\"token operator\">:</span> <span class=\"token string\">'globalModel'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  openSeamlessImmutable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    appName<span class=\"token operator\">:</span> <span class=\"token string\">'简历应用平台'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> globalModel<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1N1Z2FyVHVyYm9TL3JjLXJlZHV4LW1vZGVs\">rc-redux-model</span> 官方文档介绍：在 model 中，<strong>action 以及 reducer 我们均可忽略不写</strong>。只需要定义好 state 值即可。</p>\n<p>到目前为止，我们已经将 redux 文件信息创建好了，接下来在项目中使用，不过在使用前，先捋一下 react、redux、react-redux 的关系。</p>\n<h4 id=\"2-为什么要用-react-redux\"><a class=\"anchor\" href=\"#2-为什么要用-react-redux\">#</a> 2. 为什么要用 react-redux</h4>\n<blockquote>\n<p>当多个组件需要进行数据共享，交换双方的数据，<strong>唯一的解决方案就是：提升 state</strong>，将原本兄弟组件的 state 提升到共有的父组件中管理，由父组件向下传递数据，子组件进行处理，通过回调函数回传修改 state，这样的 state 一定程度上是响应式的。redux 也是这样的原理！</p>\n</blockquote>\n<p>要知道 redux 是不区分技术栈的，意味着你也可以在 vue 中使用，只是我们经常搭配套餐使用 react。如上述的代码，我们通过  <code>createStore</code>  导出了数据状态树后，在组件中，我们如何得到数据值呢？只能通过 redux 提供的  <code>store.getState()</code>  API，意味着我们每个组件都需要写:（下面为伪代码）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store/index.ts'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 👇 每个组件都需要这么写才能拿到数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另一种方式是你可以在根组件获取 store，通过 Props 层层传递，如果你中间组件断层，没传递 Props，就会导致下层组件获取不到值，为了在使用上简洁方便，我们才引入了 react-redux 库。</p>\n<p>让我们安装一下</p>\n<pre><code>npm install react-redux\n</code></pre>\n<h4 id=\"3-在组件中使用-redux\"><a class=\"anchor\" href=\"#3-在组件中使用-redux\">#</a> 3. 在组件中使用 redux</h4>\n<p>当你捋清楚三者关系并安装 react-redux 之后，接下来在组件中使用 redux 不再是困难的事。我们将经过  <code>createStore</code>  生成的 store 挂载到 react-redux 提供的 Provider 组件上，这个 Provider 的工作任务是：通过 context 向子组件提供 store。</p>\n<p>多说无益，上手试试，我们进入根组件 app.tsx 将其进行修改</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 👇 引入 store</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 引入 Provider</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>刷新一下页面，没有发生报错，也不会出现白屏，接下来我们在首页入口模块获取一下 redux 中的数据吧～ 上面我们已经给了一个初始值， <code>appName=&quot;简历应用平台&quot;</code> ，我们修改一下首页模块的 index.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useSelector <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> appName <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>globalModel<span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appName = '</span><span class=\"token punctuation\">,</span> appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>刷新一下页面，打开控制台，看看打印的数据，很完美符合我们的预期。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test.png\" alt=\"image.png\" /></p>\n<h4 id=\"4-在组件中修改-redux\"><a class=\"anchor\" href=\"#4-在组件中修改-redux\">#</a> 4. 在组件中修改 redux</h4>\n<p>既然可以获取 redux 数据值，自然而然地，我们也需要修改 redux 的值。在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL2NvcmUtY29uY2VwdHM=\"> redux 官方文档</span>中，很明确提到：<strong>唯一改变 state 的方法就是触发 action</strong>。</p>\n<p>通过 dispatch 发起一个 action 就能修改 state 值，但仔细一想，每个 state，都对应一个 action，在简历这种多 state 值下，这是不是很麻烦呢？得益于 rc-redux-model， <code>它提供一个 action API，只需记住一个 action，就能修改 state 的任意值</code> 。接下来我们来修改一下</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useSelector<span class=\"token punctuation\">,</span> useDispatch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> appName <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>globalModel<span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3s 后修改...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'globalModel/setStore'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          key<span class=\"token operator\">:</span> <span class=\"token string\">'appName'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          values<span class=\"token operator\">:</span> <span class=\"token string\">'visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appName = '</span><span class=\"token punctuation\">,</span> appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>appName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解读一下上面代码，其中 useEffect 是<a href=\"\"> react</a> 的 hook, 后期会增加相关内容。</p>\n<p>我们在生命周期  <code>didMount</code>  中写了一段延时方法，在 3s 之后修改 appName，紧接着对 appName 进行监听，当它修改时，打印当前最新的值。小伙伴们猜测一下，3s 后数据是不是会发生改变呢？刷新页面，打开控制台，发现一切如我们预期一致。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test1.png\" alt=\"image.png\" /></p>\n<p>至此，我们能够已经能够项目中使用 redux 进行实时性数据的存储，更多的使用在接下来的实战过程中会讲到。</p>\n<h3 id=\"持久性数据存储\"><a class=\"anchor\" href=\"#持久性数据存储\">#</a> 持久性数据存储</h3>\n<p>我们采用文件形式进行持久性数据存储，最重要的就是对文件的增删改查，接下来，我们实现一套文件操作方法，需要支持的方法有：</p>\n<ul>\n<li>文件的创建</li>\n<li>文件的读取</li>\n<li>文件的更新</li>\n<li>文件的删除</li>\n<li>文件是否存在</li>\n<li>文件是否可读</li>\n<li>文件是否可写</li>\n</ul>\n<p>得益于渲染进程也能使用 NodeJS 模块，我们可以通过 fs 进行文件相关的操作。通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxMC54L2RvY3MvYXBpL2ZzLmh0bWwjZnNfZnNfcmVhZGZpbGVfcGF0aF9vcHRpb25zX2NhbGxiYWNr\">Node 官网</span> 我们发现大部分的函数方法都是通过回调函数的形式，将数据值返回，这样会造成  <code>回调地狱</code>  的形式。</p>\n<p>仔细一想，通过 Promise 方式是否对我们更加友好？但好像改造成 Promise 又增加我们的工作量，有没有现成的 API 可用呢？在 Node 10 之后，提供了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxMC54L2RvY3MvYXBpL2ZzLmh0bWwjZnNfZnNfcHJvbWlzZXNfYXBp\">fs Promises API</span> ，这里我们通过官方提供的 API 即可实现 Promise 操作 fs 模块。</p>\n<p>下面通过实战进行开发，这是一个通用的工具方法，并且期望对文件的操作都进行统一管理，我们可以在  <code>renderer/common/utils</code>  中，新增一个名为 file.ts 的文件</p>\n<p>接下来我们封装一下 file.ts 的实现</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/file.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> fs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> promises <span class=\"token keyword\">as</span> fsPromiseAPIs <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> fileAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  read<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">:</span> BufferEncoding<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> encoding<span class=\"token operator\">:</span> encoding <span class=\"token operator\">||</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  write<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">:</span> BufferEncoding<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> encoding<span class=\"token operator\">:</span> encoding <span class=\"token operator\">||</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function-variable function\">rename</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> newPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>oldPath<span class=\"token punctuation\">,</span> newPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function-variable function\">delete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function-variable function\">hasFile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">F_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function-variable function\">canWrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">W_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function-variable function\">canRead</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">R_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> fileAction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来我们在简历模块处，读取一下文件内容，修改一下  <code>container/resume/index.tsx</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/resume/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> fileAction <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/file'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 👇 读取一下当前这个文件内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  fileAction<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是简历模块<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Resume<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将项目跑起来，进入到简历路由页面下，看看控制台输出什么？</p>\n<p>它读取的是项目根路径下的 index.tsx，但是在不同的系统中可能会出现偏差。为了抹平偏差需要获得相对路径。</p>\n<p><strong>electron 提供一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJGZG9jcyUyRmFwaSUyRmFwcCUyM2FwcA==\">app</span> 模块</strong>，该模块提供了一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJGZG9jcyUyRmFwaSUyRmFwcCUyM2FwcGdldGFwcHBhdGg=\">getAppPath()</span> 方法，用于获取当前应用程序在本机中的目录路径，但有个问题在于，该 app 模块仅能在主进程中使用，而我们期望在渲染进程中得到此目录路径，只能通过 IPC 进程间通信获取。</p>\n<h4 id=\"ipc-获取应用程序所在的目录路径\"><a class=\"anchor\" href=\"#ipc-获取应用程序所在的目录路径\">#</a> IPC 获取应用程序所在的目录路径</h4>\n<p>在 utils 目录下，新增一个文件名为：appPath.ts，该文件用于获取项目的绝对路径。我们通过 Promise 来写一下它：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/appPath.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 监听主进程与渲染进程通信</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ipcRenderer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取项目绝对路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">reject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'项目路径错误'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着我们在主进程中，通过 app 模块获取项目路径，通过 ipcMain 回复渲染进程，修改一下  <code>app/main/electron.ts</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> ipcMain <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ROOT_PATH</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 👇 监听渲染进程发的消息并回复</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  event<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROOT_PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们再回过头去简历模块处，稍微修改</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> fileAction <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/file'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getAppPath <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/appPath'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'应用程序的目录路径为: '</span><span class=\"token punctuation\">,</span> rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件读取，内容数据为: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fileAction</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>rootPath<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">app/renderer/container/resume/index.tsx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是简历模块<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Resume<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test2.png\" alt=\"读取文件测试\" /></p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/6.%20%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E8%AE%BE%E8%AE%A1/",
            "url": "http://jluyeyu.com/project/onlineResume/6.%20%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E8%AE%BE%E8%AE%A1/",
            "title": "6. 通用组件和数据设计思想",
            "date_published": "2022-01-10T03:30:52.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在上一章节，我们已将数据存储的功能实现</p>\n<p>在简历制作之前，我想还是有必要单独写篇文章讲解一下常用组件的封装设计与数据字段设计，大家可能喜欢如上几章节的写作思路：先 “粗暴编写” 再 “思考优化”，但在此章节中，我们需要稍微改变一下思考的方式，不要担心，先往下看。</p>\n<h2 id=\"组件化思想\"><a class=\"anchor\" href=\"#组件化思想\">#</a> 组件化思想</h2>\n<p>必须承认一点是：人的精力与能力是有限的，你是很难一次性处理好一大堆复杂问题的。但我们与生具备的一优秀特点，那就是拆解问题。如同写代码一样，我们将所有的处理逻辑均放在一个组件中，那么后续的维护、管理及扩展将会变得困难，我们要学会去 “拆” 逻辑、“拆” 组件。</p>\n<p>React 核心思想是组件化，它期望我们通过拆解小颗粒化的组件，进行拼接，从而构造我们的应用。假设我们在一个组件中做完所有的事情，那这个组件属于多职责组件，它不需要区分各种职责，不用规划对应的结构。最终的结果导向为：定位问题时间成本相对较高，代码阅读上，极为痛苦。<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvdGhpbmtpbmctaW4tcmVhY3QuaHRtbA==\">React 哲学</span>里很明确的说道：<strong>组件应当遵循单一功能原则，换言之，一个组件原则上只能负责一个功能。</strong></p>\n<p><strong>颗粒化拆分组件，需要思考怎样的颗粒度才合适。粒度不是越小越好，粒度最小太极端，会导致小型组件很多，管理困难。所以这个颗粒，一定是最适合被复用的程度。</strong></p>\n<h2 id=\"组件封装\"><a class=\"anchor\" href=\"#组件封装\">#</a> 组件封装</h2>\n<p>接下来将会讲解目前简历应用平台的通用组件（当然随着业务开发，可能会越来越多），这里并不会贴代码实现，只会讲解其中的思考过程和为什么要封装。对于组件具体代码在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOA==\">github 仓库里</span>，可自行前往阅读查看。</p>\n<blockquote>\n<p>组件封装为了更好书写样式名，这边采用 classnames 库进行处理</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> classnames --save</pre></td></tr></table></figure><p>说白了，我们可以不用封装通用组件，所有的组件都可称之为 “业务组件”，比如你点击了 “导出” 按钮后，显示弹窗，弹窗底部有两个按钮：确定按钮、取消按钮。</p>\n<p>我们可以统称这三个按钮为业务按钮组件，每一个按钮对应自己的业务，自己的逻辑。这是合理的，只是我们自身认为不合理的地方是：他们有很多共性，在差异点上可能就文案的不同，颜色的不同，其余的交互效果一致（比如鼠标 hover 按钮、点击按钮之后的颜色改变等）正因为这些一致，在 “下一次” 新增业务组件时，我们都手动拷贝一份代码，这会导致项目中存在大量 “重复” 代码。正因为如此，我们才认为它是不合理的，也正因为这样，我们才要去封装公共组件。</p>\n<p>所有的通用组件均存放于  <code>app/renderer/common/components</code>  中，通用组件共有：</p>\n<ul>\n<li>MyButton 按钮组件</li>\n<li>MyInput 数据输入组件</li>\n<li>MyUpload 文件上传组件</li>\n<li>MyModal 弹窗组件</li>\n<li>MyScrollBox 固定区域内的滚动组件</li>\n</ul>\n<h3 id=\"mybutton\"><a class=\"anchor\" href=\"#mybutton\">#</a> MyButton</h3>\n<blockquote>\n<p>组件代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL2NvbXBvbmVudHMvTXlCdXR0b24=\">👉 查看</span></p>\n</blockquote>\n<p>之前看过一篇关于按钮组件的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTM0MDQ3NDMyNzEx\"> Button 组件</span>，</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E7%AE%80%E5%8E%86%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.png\" alt=\"image.png\" /></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>MyButton size<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击按钮'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  导出<span class=\"token constant\">PDF</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyButton<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"myinput-组件\"><a class=\"anchor\" href=\"#myinput-组件\">#</a> MyInput 组件</h3>\n<blockquote>\n<p>组件代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL2NvbXBvbmVudHMvTXlJbnB1dA==\">👉 查看</span></p>\n</blockquote>\n<p>在制作简历过程中，最重要的是用户信息的输入，我们可以通过 HTML 提供的 input 元素加以实现，这会造成的问题是：</p>\n<ul>\n<li>在组件中大量编写 input 代码</li>\n<li>需要写一大段的 css 代码加以覆盖原生样式</li>\n<li>可能需要重复编写一些额外操作功能的样式代码，如清空输入内容</li>\n</ul>\n<p>当一个东西重复出现，在交互、样式上都基本一致，那么我们就需要思考斟酌一下：能否做成通用？</p>\n<p>其次对于内容的输入，除 input 外，我们还会使用 textarea 实现，它们最直观的区别莫过于单行文本与多行文本的差异。我们思考一下，能否将两种进行合并，在 MyInput 组件中实现各自的逻辑功能，业务端使用时，不需要根据场景去编写对应的处理逻辑，仅通过一个  <code>type</code>  属性就能得到对应的组件效果。</p>\n<ul>\n<li>单行输入框</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>MyInput</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>base<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入姓名\"</span> <span class=\"token comment\">// 占位文本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  allowClear<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 是否显示清除 icon</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>多行输入框</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>MyInput</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>hobby <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"你有什么特长爱好呢\"</span> <span class=\"token comment\">// 占位文本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  allowClear<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 是否显示清除 icon</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  type<span class=\"token operator\">=</span><span class=\"token string\">\"textarea\"</span> <span class=\"token comment\">// 类型为多行文本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  rows<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 输入文本的行数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  maxLength<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 最多支持的文本长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  allowCount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 是否显示底部文本字数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"myupload\"><a class=\"anchor\" href=\"#myupload\">#</a> MyUpload</h3>\n<blockquote>\n<p>组件代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL2NvbXBvbmVudHMvTXlVcGxvYWQ=\">👉 查看</span></p>\n</blockquote>\n<p>我们期望能给 HR 留下一个良好的第一印象，照片是最能体现的一个人的精神面貌，所以我们会存在一个简历头像的上传功能，那么问题点在于：<strong>如何实现本地文件上传并显示</strong>？</p>\n<p>经验老道的程序员第一反应就是： <code>&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; /&gt;</code> ，很快的，第一个版本的  <code>&lt;MyUpload /&gt;</code>  组件实现了，如你所想，该组件职责就是用于图片上传。</p>\n<p>随即带来了问题，由于我们写死了  <code>accept=&quot;image/*&quot;</code> ，假设将来有其他资源的文件上传，该怎么办？当然有很多解决方案，这里我采用的解决方案是：封装基础的上传组件，基于此组件衍生出图片类型的上传组件，将来如果有其他资源类型的上传组件，只需要衍生即可。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.png\" alt=\"image.png\" /></p>\n<p>会不会有小伙伴存在疑问：为什么不将该 Upload 组件做得更加通用，所有东西都从由业务通过 props 决定呢？之所以没这么设计的原因在于：</p>\n<ul>\n<li>部分逻辑要在业务端处理</li>\n<li>样式 UI 的高度复用</li>\n</ul>\n<p>举个例子，默认的 input 样式并不美观，</p>\n<p>而往往我们都会自己实现一套 UI 样式，假设我们需要多种模板</p>\n<p>如果在模版一是这种效果，是不是我得在模版一中实现这个 UI 样式（写一坨 CSS），那模版二呢？模版三呢？包括选择文件之后，隶属于文件处理的部分逻辑，是不是也需要在业务端处理呢？</p>\n<p>这很好理解，我举个例子：当我选择一张图片之后，需要得到文件名、文件类型、文件大小，这些需要通过工具函数处理才能得到，这块逻辑放于业务层去处理，这属于业务层的工作吗？小伙伴们细品细品。</p>\n<p>资源上传中还实现了一个 FileEvent 类，具体实现如下</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>file <span class=\"token operator\">=</span> file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uuid <span class=\"token operator\">=</span> <span class=\"token function\">createUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> types <span class=\"token operator\">=</span> file<span class=\"token operator\">?.</span>type<span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileType <span class=\"token operator\">=</span> types<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> types<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base64URL <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本地预览地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 释放创建过的 URL，不然会存在性能问题</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 详情可见 : https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">revokeFileBase64URL</span><span class=\"token punctuation\">(</span>base64URL<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>base64URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 上传 / 取消上传 / 重试</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> FileEvent<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mymodal\"><a class=\"anchor\" href=\"#mymodal\">#</a> MyModal</h3>\n<blockquote>\n<p>组件代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL2NvbXBvbmVudHMvTXlNb2RhbA==\">👉 查看</span></p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @description 所有弹窗组件集合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 方式一：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * import MyModal from '@components/MyModal';</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * &lt;MyModal.Confirm/></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 方式二：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * import &#123;Confirm&#125; from '@components/MyModal';</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &lt;Confirm /></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> MyDialog <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyDialog'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> MyConfirm <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyConfirm'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Dialog <span class=\"token operator\">=</span> MyDialog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Confirm <span class=\"token operator\">=</span> MyConfirm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  Dialog<span class=\"token operator\">:</span> MyDialog<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  Confirm<span class=\"token operator\">:</span> MyConfirm<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而在业务中可以很简单的使用</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>MyModal<span class=\"token punctuation\">.</span>Confirm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  title<span class=\"token operator\">=</span><span class=\"token string\">\"确定要打印简历吗？\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  description<span class=\"token operator\">=</span><span class=\"token string\">\"请确保信息的正确，目前仅支持单页打印哦～\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  config<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"myscrollbox\"><a class=\"anchor\" href=\"#myscrollbox\">#</a> MyScrollBox</h3>\n<blockquote>\n<p>组件代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL2NvbXBvbmVudHMvTXlTY3JvbGxCb3g=\">👉 查看</span></p>\n</blockquote>\n<p>该组件的职责功能是：在给定的一个最大高度内，超出高度滚动展示。</p>\n<p>我们常常会有一些交互效果是给容器定个最大高度，如果展示内容超出此高度，则在此容器内进行滚动，但往往我们会出现默认的滚动条，及其不美观，于是在去掉滚动条的基础上进行组件封装，从而达到我们期望的效果。下面是业务中的使用</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> MyScrollBox <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/components/MyScrollBox'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token constant\">HEADER_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>MyScrollBox maxHeight<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>height <span class=\"token operator\">-</span> <span class=\"token constant\">HEADER_HEIGHT</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Template<span class=\"token punctuation\">.</span>TemplateOne <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyScrollBox<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"简历数据设计\"><a class=\"anchor\" href=\"#简历数据设计\">#</a> 简历数据设计</h2>\n<p>一份简历最为重要的莫过于数据字段的设计，在说字段设计之前，我们往 redux 中添加一份简历信息的 model，进入  <code>app/renderer/store</code>  文件夹中，新增一份代码文件，取名为:  <code>resumeModel</code> ，然后将其添加到 reducerList 中。</p>\n<blockquote>\n<p>这边通过 TSRcReduxModel 与 TSResume 对其进行了类型约束，可前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BES1NvcGhpYS92aXNSZXN1bWVNb29rL3RyZWUvY2hhcHRlci0wOC9hcHAvcmVuZGVyZXIvY29tbW9uL3R5cGVz\">types</span> 查看</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> RcReduxModel <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-redux-model'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 👇 引入我们写好的 model</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> globalModel <span class=\"token keyword\">from</span> <span class=\"token string\">'./globalModel'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> resumeModel <span class=\"token keyword\">from</span> <span class=\"token string\">'./resumeModel'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 👇 这里只需要调用 RcReduxModel 实例化一下得到最后的 reduxModel</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> reduxModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RcReduxModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>globalModel<span class=\"token punctuation\">,</span> resumeModel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 👇 无侵入式的使用 Redux，即使你写最原始的 reducer 也照样支持</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> reducerList <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducerList<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>thunk<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来讨论一下简历数据有哪些字段吧？如果按照模块来分，我们是否能划分出下面几大模块？</p>\n<ul>\n<li>基本信息</li>\n<li>联系方式</li>\n<li>求职意向</li>\n<li>技能清单</li>\n<li>个人评价</li>\n<li>荣誉证书</li>\n<li>在校经验</li>\n<li>工作经验</li>\n<li>项目经验</li>\n</ul>\n<p>模块划分出来后，剩下的就好办了，下面是一份完整的简历数据格式，关于类型定义可看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRlBES1NvcGhpYSUyRnZpc1Jlc3VtZU1vb2slMkZibG9iJTJGY2hhcHRlci0wOCUyRmFwcCUyRnJlbmRlcmVyJTJGY29tbW9uJTJGdHlwZXMlMkZyZXN1bWUuZC50cw==\">resume.d.ts</span></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> userResume <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  base<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    avatar<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    area<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    school<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    major<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    degree<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    hometown<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    onSchoolTime<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      beginTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      endTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    phone<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    github<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    juejin<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  work<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    job<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    city<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cityList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  hobby<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  skill<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  skillList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  evaluation<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  evaluationList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  certificate<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  certificateList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  schoolExperience<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      beginTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      endTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      post<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      department<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      content<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      parseContent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  workExperience<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      beginTime<span class=\"token operator\">:</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      endTime<span class=\"token operator\">:</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      post<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      department<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      content<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      parseContent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  projectExperience<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      beginTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      endTime<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      projectName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      post<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      content<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      parseContent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      date<span class=\"token operator\">:</span> <span class=\"token number\">1621145137865</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/javascript/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AFjs%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "url": "http://jluyeyu.com/javascript/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AFjs%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "title": "抽象语法树ast初识",
            "date_published": "2022-01-08T11:35:52.000Z",
            "content_html": "<h2 id=\"为什么要了解ast\"><a class=\"anchor\" href=\"#为什么要了解ast\">#</a> 为什么要了解 AST</h2>\n<p>如果你想了解 js 编译执行的原理，那么你就得了解 AST，目前前端常用的一些插件或者工具，比如说 javascript 转译、代码压缩、css 预处理器、elint、pretiier 等功能的实现，都是建立在 AST 的基础之上。</p>\n<p>在线解析 ast 的网站:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc3RleHBsb3Jlci5uZXQv\">https://astexplorer.net/</span></p>\n<h2 id=\"javascript-编译执行流程\"><a class=\"anchor\" href=\"#javascript-编译执行流程\">#</a> JavaScript 编译执行流程</h2>\n<p>js 执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成 token，之后再通过语法分析生成 AST（Abstract Syntax Tree），最后生成机器码执行。</p>\n<h3 id=\"词法分析\"><a class=\"anchor\" href=\"#词法分析\">#</a> 词法分析</h3>\n<p>词法分析，也称之为扫描（scanner），简单来说就是调用 next () 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的 Token。Token 是一个不可分割的最小单元，例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。词法分析器里，每个关键字是一个 Token ，每个标识符是一个 Token，每个操作符是一个 Token，每个标点符号也都是一个 Token。除此之外，还会过滤掉源程序中的注释和空白字符（换行符、空格、制表符等）。<br />\n最终，整个代码将被分割进一个 tokens 列表（或者说一维数组）。</p>\n<pre><code>n * n;\n\n[\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;*&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  ...\n]\n</code></pre>\n<p>每一个 type 有一组属性来描述该令牌：</p>\n<pre><code>&#123;\n  type: &#123;\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  &#125;,\n  ...\n&#125;\n</code></pre>\n<h3 id=\"语法分析\"><a class=\"anchor\" href=\"#语法分析\">#</a> 语法分析</h3>\n<p>语法分析会将词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。</p>\n<h3 id=\"什么是ast抽象语法树\"><a class=\"anchor\" href=\"#什么是ast抽象语法树\">#</a> 什么是 AST（抽象语法树）</h3>\n<p>抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<pre><code>function square(n) &#123;\n  return n * n;\n&#125;\n</code></pre>\n<p>上面的程序可以被表示成如下的一棵树：</p>\n<pre><code>- FunctionDeclaration:\n  - id:\n    - Identifier:\n      - name: square\n  - params [1]\n    - Identifier\n      - name: n\n  - body:\n    - BlockStatement\n      - body [1]\n        - ReturnStatement\n          - argument\n            - Binaryion\n              - operator: *\n              - left\n                - Identifier\n                  - name: n\n              - right\n                - Identifier\n                  - name: n\n</code></pre>\n<p>或是如下所示的 JavaScript Object（对象）：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;square&quot;\n  &#125;,\n  params: [&#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;n&quot;\n  &#125;],\n  body: &#123;\n    type: &quot;BlockStatement&quot;,\n    body: [&#123;\n      type: &quot;ReturnStatement&quot;,\n      argument: &#123;\n        type: &quot;BinaryExpression&quot;,\n        operator: &quot;*&quot;,\n        left: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;,\n        right: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;\n      &#125;\n    &#125;]\n  &#125;\n&#125;\n</code></pre>\n<p>你会留意到 AST 的每一层都拥有相同的结构：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;...&#125;,\n  params: [...],\n  body: &#123;...&#125;\n&#125;\n&#123;\n  type: &quot;Identifier&quot;,\n  name: ...\n&#125;\n&#123;\n  type: &quot;BinaryExpression&quot;,\n  operator: ...,\n  left: &#123;...&#125;,\n  right: &#123;...&#125;\n&#125;\n</code></pre>\n<p>这样的每一层结构也被叫做 <strong>节点（Node）</strong>。 一个 AST 可以由单一的节点或是成百上千个节点构成。 它们组合在一起可以描述用于静态分析的程序语法。</p>\n<p>每一个节点都有如下所示的接口（Interface）：</p>\n<pre><code>interface Node &#123;\n  type: string;\n&#125;\n</code></pre>\n<p>字符串形式的  <code>type</code>  字段表示节点的类型（如： “ <code>FunctionDeclaration</code> “，” <code>Identifier</code> “，或 “ <code>BinaryExpression</code> “）。 每一种类型的节点定义了一些附加属性用来进一步描述该节点类型。</p>\n<h3 id=\"ast-节点介绍\"><a class=\"anchor\" href=\"#ast-节点介绍\">#</a> AST 节点介绍</h3>\n<h4 id=\"identifier\"><a class=\"anchor\" href=\"#identifier\">#</a> Identifier</h4>\n<p>标识符，就是我们写 JS 时自定义的名称，如变量名，函数名，属性名，都归为标识符。相应的接口是这样的：</p>\n<pre><code>interface Identifier &lt;: Expression, Pattern &#123;\n    type: &quot;Identifier&quot;;\n    name: string;\n&#125;\n</code></pre>\n<p>一个标识符可能是一个表达式，或者是解构的模式（ES6 中的解构语法）。我们等会会看到  <code>Expression</code>  和  <code>Pattern</code>  相关的内容的。</p>\n<h4 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a> Literal</h4>\n<p>字面量，这里不是指  <code>[]</code>  或者  <code>&#123;&#125;</code>  这些，而是本身语义就代表了一个值的字面量，如  <code>1</code> ， <code>“hello”</code> ,  <code>true</code>  这些，还有正则表达式（有一个扩展的 Node 来表示正则表达式），如  <code>/\\d?/</code> 。我们看一下文档的定义：</p>\n<pre><code>interface Literal &lt;: Expression &#123;\n    type: &quot;Literal&quot;;\n    value: string | boolean | null | number | RegExp;\n&#125;\n</code></pre>\n<p>这里即对应了字面量的值，我们可以看出字面量值的类型，字符串，布尔，数值，null 和正则。</p>\n<h4 id=\"regexpliteral\"><a class=\"anchor\" href=\"#regexpliteral\">#</a> RegExpLiteral</h4>\n<p>这个针对正则字面量的，为了更好地来解析正则表达式的内容，添加多一个  <code>regex</code>  字段，里边会包括正则本身，以及正则的  <code>flags</code> 。</p>\n<pre><code>interface RegExpLiteral &lt;: Literal &#123;\n  regex: &#123;\n    pattern: string;\n    flags: string;\n  &#125;;\n&#125;\n</code></pre>\n<h4 id=\"programs\"><a class=\"anchor\" href=\"#programs\">#</a> Programs</h4>\n<p>一般这个是作为跟节点的，即代表了一棵完整的程序代码树。</p>\n<pre><code>interface Program &lt;: Node &#123;\n    type: &quot;Program&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<p><code>body</code>  属性是一个数组，包含了多个  <code>Statement</code> （即语句）节点。</p>\n<h4 id=\"functions\"><a class=\"anchor\" href=\"#functions\">#</a> Functions</h4>\n<p>函数声明或者函数表达式节点。</p>\n<pre><code>interface Function &lt;: Node &#123;\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p><code>id</code>  是函数名， <code>params</code>  属性是一个数组，表示函数的参数。 <code>body</code>  是一个块语句。<br />\n有一个值得留意的点是，你在测试过程中，是不会找到  <code>type: &quot;Function&quot;</code>  的节点的，但是你可以找到  <code>type: &quot;FunctionDeclaration&quot;</code>  和  <code>type: &quot;FunctionExpression&quot;</code> ，因为函数要么以声明语句出现，要么以函数表达式出现，都是节点类型的组合类型，后边会再提及  <code>FunctionDeclaration</code>  和  <code>FunctionExpression</code>  的相关内容。<br />\n这让人感觉这个文档规划得蛮细致的，函数名，参数和函数块是属于函数部分的内容，而声明或者表达式则有它自己需要的东西。</p>\n<h4 id=\"statement\"><a class=\"anchor\" href=\"#statement\">#</a> Statement</h4>\n<p>语句节点没什么特别的，它只是一个节点，一种区分，但是语句有很多种，下边会详述。</p>\n<pre><code>interface Statement &lt;: Node &#123; &#125;ExpressionStatement\n</code></pre>\n<h4 id=\"expressionstatement\"><a class=\"anchor\" href=\"#expressionstatement\">#</a> ExpressionStatement</h4>\n<p>表达式语句节点， <code>a = a + 1</code>  或者  <code>a++</code>  里边会有一个  <code>expression</code>  属性指向一个表达式节点对象（后边会提及表达式）。</p>\n<pre><code>interface ExpressionStatement &lt;: Statement &#123;\n    type: &quot;ExpressionStatement&quot;;\n    expression: Expression;\n&#125;\n</code></pre>\n<h4 id=\"blockstatement\"><a class=\"anchor\" href=\"#blockstatement\">#</a> BlockStatement</h4>\n<p>块语句节点，举个例子： <code>if (...) &#123; // 这里是块语句的内容 &#125;</code> ，块里边可以包含多个其他的语句，所以有一个  <code>body</code>  属性，是一个数组，表示了块里边的多个语句。</p>\n<pre><code>interface BlockStatement &lt;: Statement &#123;\n    type: &quot;BlockStatement&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<h4 id=\"emptystatement\"><a class=\"anchor\" href=\"#emptystatement\">#</a> EmptyStatement</h4>\n<p>一个空的语句节点，没有执行任何有用的代码，例如一个单独的分号；</p>\n<pre><code>interface EmptyStatement &lt;: Statement &#123;\n    type: &quot;EmptyStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"debuggerstatement\"><a class=\"anchor\" href=\"#debuggerstatement\">#</a> DebuggerStatement</h4>\n<p><code>debugger</code> ，就是表示这个，没有其他了。</p>\n<pre><code>interface DebuggerStatement &lt;: Statement &#123;\n    type: &quot;DebuggerStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"withstatement\"><a class=\"anchor\" href=\"#withstatement\">#</a> WithStatement</h4>\n<p><code>with</code>  语句节点，里边有两个特别的属性， <code>object</code>  表示  <code>with</code>  要使用的那个对象（可以是一个表达式）， <code>body</code>  则是对应  <code>with</code>  后边要执行的语句，一般会是一个块语句。</p>\n<pre><code>interface WithStatement &lt;: Statement &#123;\n    type: &quot;WithStatement&quot;;\n    object: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<p>下边是控制流的语句：</p>\n<h4 id=\"returnstatement\"><a class=\"anchor\" href=\"#returnstatement\">#</a> ReturnStatement</h4>\n<p>返回语句节点， <code>argument</code>  属性是一个表达式，代表返回的内容。</p>\n<pre><code>interface ReturnStatement &lt;: Statement &#123;\n    type: &quot;ReturnStatement&quot;;\n    argument: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"labeledstatement\"><a class=\"anchor\" href=\"#labeledstatement\">#</a> LabeledStatement</h4>\n<p><code>label</code>  语句，平时可能会比较少接触到，举个例子：</p>\n<pre><code>loop: for(let i = 0; i &lt; len; i++) &#123;\n    // ...\n    for (let j = 0; j &lt; min; j++) &#123;\n        // ...\n        break loop;\n    &#125;\n&#125;\n</code></pre>\n<p>这里的  <code>loop</code>  就是一个  <code>label</code>  了，我们可以在循环嵌套中使用  <code>break loop</code>  来指定跳出哪个循环。所以这里的  <code>label</code>  语句指的就是  <code>loop: ...</code>  这个。<br />\n一个  <code>label</code>  语句节点会有两个属性，一个  <code>label</code>  属性表示  <code>label</code>  的名称，另外一个  <code>body</code>  属性指向对应的语句，通常是一个循环语句或者  <code>switch</code>  语句。</p>\n<pre><code>interface LabeledStatement &lt;: Statement &#123;\n    type: &quot;LabeledStatement&quot;;\n    label: Identifier;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"breakstatement\"><a class=\"anchor\" href=\"#breakstatement\">#</a> BreakStatement</h4>\n<p><code>break</code>  语句节点，会有一个  <code>label</code>  属性表示需要的  <code>label</code>  名称，当不需要  <code>label</code>  的时候（通常都不需要），便是  <code>null</code> 。</p>\n<pre><code>interface BreakStatement &lt;: Statement &#123;\n    type: &quot;BreakStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<h4 id=\"continuestatement\"><a class=\"anchor\" href=\"#continuestatement\">#</a> ContinueStatement</h4>\n<p><code>continue</code>  语句节点，和  <code>break</code>  类似。</p>\n<pre><code>interface ContinueStatement &lt;: Statement &#123;\n    type: &quot;ContinueStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<p>下边是条件语句：</p>\n<h4 id=\"ifstatement\"><a class=\"anchor\" href=\"#ifstatement\">#</a> IfStatement</h4>\n<p><code>if</code>  语句节点，很常见，会带有三个属性，test 属性表示  <code>if (...)</code>  括号中的表达式。<br />\n <code>consequent</code>  属性是表示条件为  <code>true</code>  时的执行语句，通常会是一个块语句。<br />\n <code>alternate</code>  属性则是用来表示  <code>else</code>  后跟随的语句节点，通常也会是块语句，但也可以又是一个  <code>if</code>  语句节点，即类似这样的结构： <code>if (a) &#123; //... &#125; else if (b) &#123; // ... &#125;</code> 。 <code>alternate</code>  当然也可以为  <code>null</code> 。</p>\n<pre><code>interface IfStatement &lt;: Statement &#123;\n    type: &quot;IfStatement&quot;;\n    test: Expression;\n    consequent: Statement;\n    alternate: Statement | null;\n&#125;\n</code></pre>\n<h4 id=\"switchstatement\"><a class=\"anchor\" href=\"#switchstatement\">#</a> SwitchStatement</h4>\n<p><code>switch</code>  语句节点，有两个属性， <code>discriminant</code>  属性表示  <code>switch</code>  语句后紧随的表达式，通常会是一个变量， <code>cases</code>  属性是一个  <code>case</code>  节点的数组，用来表示各个  <code>case</code>  语句。</p>\n<pre><code>interface SwitchStatement &lt;: Statement &#123;\n    type: &quot;SwitchStatement&quot;;\n    discriminant: Expression;\n    cases: [ SwitchCase ];\n&#125;\n</code></pre>\n<h4 id=\"switchcase\"><a class=\"anchor\" href=\"#switchcase\">#</a> SwitchCase</h4>\n<p><code>switch</code>  的  <code>case</code>  节点。 <code>test</code>  属性代表这个  <code>case</code>  的判断表达式， <code>consequent</code>  则是这个  <code>case</code>  的执行语句。<br />\n当  <code>test</code>  属性是  <code>null</code>  时，则是表示  <code>default</code>  这个  <code>case</code>  节点。</p>\n<pre><code>interface SwitchCase &lt;: Node &#123;\n    type: &quot;SwitchCase&quot;;\n    test: Expression | null;\n    consequent: [ Statement ];\n&#125;\n</code></pre>\n<p>下边是异常相关的语句：</p>\n<h4 id=\"throwstatement\"><a class=\"anchor\" href=\"#throwstatement\">#</a> ThrowStatement</h4>\n<p><code>throw</code>  语句节点， <code>argument</code>  属性用以表示  <code>throw</code>  后边紧跟的表达式。</p>\n<pre><code>interface ThrowStatement &lt;: Statement &#123;\n    type: &quot;ThrowStatement&quot;;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"trystatement\"><a class=\"anchor\" href=\"#trystatement\">#</a> TryStatement</h4>\n<p><code>try</code>  语句节点， <code>block</code>  属性表示  <code>try</code>  的执行语句，通常是一个块语句。<br />\n <code>hanlder</code>  属性是指  <code>catch</code>  节点， <code>finalizer</code>  是指  <code>finally</code>  语句节点，当  <code>hanlder</code>  为  <code>null</code>  时， <code>finalizer</code>  必须是一个块语句节点。</p>\n<pre><code>interface TryStatement &lt;: Statement &#123;\n    type: &quot;TryStatement&quot;;\n    block: BlockStatement;\n    handler: CatchClause | null;\n    finalizer: BlockStatement | null;\n&#125;\n</code></pre>\n<h4 id=\"catchclause\"><a class=\"anchor\" href=\"#catchclause\">#</a> CatchClause</h4>\n<p><code>catch</code>  节点， <code>param</code>  用以表示  <code>catch</code>  后的参数， <code>body</code>  则表示  <code>catch</code>  后的执行语句，通常是一个块语句。</p>\n<pre><code>interface CatchClause &lt;: Node &#123;\n    type: &quot;CatchClause&quot;;\n    param: Pattern;\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p>下边是循环语句：</p>\n<h4 id=\"whilestatement\"><a class=\"anchor\" href=\"#whilestatement\">#</a> WhileStatement</h4>\n<p><code>while</code>  语句节点， <code>test</code>  表示括号中的表达式， <code>body</code>  是表示要循环执行的语句。</p>\n<pre><code>interface WhileStatement &lt;: Statement &#123;\n    type: &quot;WhileStatement&quot;;\n    test: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"dowhilestatement\"><a class=\"anchor\" href=\"#dowhilestatement\">#</a> DoWhileStatement</h4>\n<p><code>do/while</code>  语句节点，和  <code>while</code>  语句类似。</p>\n<pre><code>interface DoWhileStatement &lt;: Statement &#123;\n    type: &quot;DoWhileStatement&quot;;\n    body: Statement;\n    test: Expression;\n&#125;\n</code></pre>\n<h4 id=\"forstatement\"><a class=\"anchor\" href=\"#forstatement\">#</a> ForStatement</h4>\n<p><code>for</code>  循环语句节点，属性  <code>init/test/update</code>  分别表示了  <code>for</code>  语句括号中的三个表达式，初始化值，循环判断条件，每次循环执行的变量更新语句（ <code>init</code>  可以是变量声明或者表达式）。这三个属性都可以为  <code>null</code> ，即  <code>for(;;)&#123;&#125;</code> 。 <code>body</code>  属性用以表示要循环执行的语句。</p>\n<pre><code>interface ForStatement &lt;: Statement &#123;\n    type: &quot;ForStatement&quot;;\n    init: VariableDeclaration | Expression | null;\n    test: Expression | null;\n    update: Expression | null;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"forinstatement\"><a class=\"anchor\" href=\"#forinstatement\">#</a> ForInStatement</h4>\n<p><code>for/in</code>  语句节点， <code>left</code>  和  <code>right</code>  属性分别表示在  <code>in</code>  关键词左右的语句（左侧可以是一个变量声明或者表达式）。 <code>body</code>  依旧是表示要循环执行的语句。</p>\n<pre><code>interface ForInStatement &lt;: Statement &#123;\n    type: &quot;ForInStatement&quot;;\n    left: VariableDeclaration |  Pattern;\n    right: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"declarations\"><a class=\"anchor\" href=\"#declarations\">#</a> Declarations</h4>\n<p>声明语句节点，同样也是语句，只是一个类型的细化。下边会介绍各种声明语句类型。</p>\n<pre><code>interface Declaration &lt;: Statement &#123; &#125;\n</code></pre>\n<h4 id=\"functiondeclaration\"><a class=\"anchor\" href=\"#functiondeclaration\">#</a> FunctionDeclaration</h4>\n<p>函数声明，和之前提到的  <code>Function</code>  不同的是， <code>id</code>  不能为  <code>null</code> 。</p>\n<pre><code>interface FunctionDeclaration &lt;: Function, Declaration &#123;\n    type: &quot;FunctionDeclaration&quot;;\n    id: Identifier;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclaration\"><a class=\"anchor\" href=\"#variabledeclaration\">#</a> VariableDeclaration</h4>\n<p>变量声明， <code>kind</code>  属性表示是什么类型的声明，因为 ES6 引入了  <code>const/let</code> 。 <code>declarations</code>  表示声明的多个描述，因为我们可以这样： <code>let a = 1, b = 2;</code> 。</p>\n<pre><code>interface VariableDeclaration &lt;: Declaration &#123;\n    type: &quot;VariableDeclaration&quot;;\n    declarations: [ VariableDeclarator ];\n    kind: &quot;var&quot;;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclarator\"><a class=\"anchor\" href=\"#variabledeclarator\">#</a> VariableDeclarator</h4>\n<p>变量声明的描述， <code>id</code>  表示变量名称节点， <code>init</code>  表示初始值的表达式，可以为  <code>null</code> 。</p>\n<pre><code>interface VariableDeclarator &lt;: Node &#123;\n    type: &quot;VariableDeclarator&quot;;\n    id: Pattern;\n    init: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"expressions\"><a class=\"anchor\" href=\"#expressions\">#</a> Expressions</h4>\n<p>表达式节点。</p>\n<pre><code>interface Expression &lt;: Node &#123; &#125;\n</code></pre>\n<h4 id=\"thisexpression\"><a class=\"anchor\" href=\"#thisexpression\">#</a> ThisExpression</h4>\n<p>表示  <code>this</code> 。</p>\n<pre><code>interface ThisExpression &lt;: Expression &#123;\n    type: &quot;ThisExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"arrayexpression\"><a class=\"anchor\" href=\"#arrayexpression\">#</a> ArrayExpression</h4>\n<p>数组表达式节点， <code>elements</code>  属性是一个数组，表示数组的多个元素，每一个元素都是一个表达式节点。</p>\n<pre><code>interface ArrayExpression &lt;: Expression &#123;\n    type: &quot;ArrayExpression&quot;;\n    elements: [ Expression | null ];\n&#125;\n</code></pre>\n<h4 id=\"objectexpression\"><a class=\"anchor\" href=\"#objectexpression\">#</a> ObjectExpression</h4>\n<p>对象表达式节点， <code>property</code>  属性是一个数组，表示对象的每一个键值对，每一个元素都是一个属性节点。</p>\n<pre><code>interface ObjectExpression &lt;: Expression &#123;\n    type: &quot;ObjectExpression&quot;;\n    properties: [ Property ];\n&#125;\n</code></pre>\n<h4 id=\"property\"><a class=\"anchor\" href=\"#property\">#</a> Property</h4>\n<p>对象表达式中的属性节点。 <code>key</code>  表示键， <code>value</code>  表示值，由于 ES5 语法中有  <code>get/set</code>  的存在，所以有一个  <code>kind</code>  属性，用来表示是普通的初始化，或者是  <code>get/set</code> 。</p>\n<pre><code>interface Property &lt;: Node &#123;\n    type: &quot;Property&quot;;\n    key: Literal | Identifier;\n    value: Expression;\n    kind: &quot;init&quot; | &quot;get&quot; | &quot;set&quot;;\n&#125;\n</code></pre>\n<h4 id=\"functionexpression\"><a class=\"anchor\" href=\"#functionexpression\">#</a> FunctionExpression</h4>\n<p>函数表达式节点。</p>\n<pre><code>interface FunctionExpression &lt;: Function, Expression &#123;\n    type: &quot;FunctionExpression&quot;;\n&#125;\n</code></pre>\n<p>下边是一元运算符相关的表达式部分：</p>\n<h4 id=\"unaryexpression\"><a class=\"anchor\" href=\"#unaryexpression\">#</a> UnaryExpression</h4>\n<p>一元运算表达式节点（ <code>++/--</code>  是  <code>update</code>  运算符，不在这个范畴内）， <code>operator</code>  表示运算符， <code>prefix</code>  表示是否为前缀运算符。 <code>argument</code>  是要执行运算的表达式。</p>\n<pre><code>interface UnaryExpression &lt;: Expression &#123;\n    type: &quot;UnaryExpression&quot;;\n    operator: UnaryOperator;\n    prefix: boolean;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"unaryoperator\"><a class=\"anchor\" href=\"#unaryoperator\">#</a> UnaryOperator</h4>\n<p>一元运算符，枚举类型，所有值如下：</p>\n<pre><code>enum UnaryOperator &#123;\n    &quot;-&quot; | &quot;+&quot; | &quot;!&quot; | &quot;~&quot; | &quot;typeof&quot; | &quot;void&quot; | &quot;delete&quot;\n&#125;\n</code></pre>\n<h4 id=\"updateexpression\"><a class=\"anchor\" href=\"#updateexpression\">#</a> UpdateExpression</h4>\n<p><code>update</code>  运算表达式节点，即  <code>++/--</code> ，和一元运算符类似，只是  <code>operator</code>  指向的节点对象类型不同，这里是  <code>update</code>  运算符。</p>\n<pre><code>interface UpdateExpression &lt;: Expression &#123;\n    type: &quot;UpdateExpression&quot;;\n    operator: UpdateOperator;\n    argument: Expression;\n    prefix: boolean;\n&#125;\n</code></pre>\n<h4 id=\"updateoperator\"><a class=\"anchor\" href=\"#updateoperator\">#</a> UpdateOperator</h4>\n<p><code>update</code>  运算符，值为  <code>++</code>  或  <code>--</code> ，配合  <code>update</code>  表达式节点的  <code>prefix</code>  属性来表示前后。</p>\n<pre><code>enum UpdateOperator &#123;\n    &quot;++&quot; | &quot;--&quot;\n&#125;\n</code></pre>\n<p>下边是二元运算符相关的表达式部分：</p>\n<h4 id=\"binaryexpression\"><a class=\"anchor\" href=\"#binaryexpression\">#</a> BinaryExpression</h4>\n<p>二元运算表达式节点， <code>left</code>  和  <code>right</code>  表示运算符左右的两个表达式， <code>operator</code>  表示一个二元运算符。</p>\n<pre><code>interface BinaryExpression &lt;: Expression &#123;\n    type: &quot;BinaryExpression&quot;;\n    operator: BinaryOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"binaryoperator\"><a class=\"anchor\" href=\"#binaryoperator\">#</a> BinaryOperator</h4>\n<p>二元运算符，所有值如下：</p>\n<pre><code>enum BinaryOperator &#123;\n    &quot;==&quot; | &quot;!=&quot; | &quot;===&quot; | &quot;!==&quot;\n         | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot;\n         | &quot;&lt;&lt;&quot; | &quot;&gt;&gt;&quot; | &quot;&gt;&gt;&gt;&quot;\n         | &quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; | &quot;%&quot;\n         | &quot;|&quot; | &quot;^&quot; | &quot;&amp;&quot; | &quot;in&quot;\n         | &quot;instanceof&quot;\n&#125;\n</code></pre>\n<h4 id=\"assignmentexpression\"><a class=\"anchor\" href=\"#assignmentexpression\">#</a> AssignmentExpression</h4>\n<p>赋值表达式节点， <code>operator</code>  属性表示一个赋值运算符， <code>left</code>  和  <code>right</code>  是赋值运算符左右的表达式。</p>\n<pre><code>interface AssignmentExpression &lt;: Expression &#123;\n    type: &quot;AssignmentExpression&quot;;\n    operator: AssignmentOperator;\n    left: Pattern | Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"assignmentoperator\"><a class=\"anchor\" href=\"#assignmentoperator\">#</a> AssignmentOperator</h4>\n<p>赋值运算符，所有值如下：（常用的并不多）</p>\n<pre><code>enum AssignmentOperator &#123;\n    &quot;=&quot; | &quot;+=&quot; | &quot;-=&quot; | &quot;*=&quot; | &quot;/=&quot; | &quot;%=&quot;\n        | &quot;&lt;&lt;=&quot; | &quot;&gt;&gt;=&quot; | &quot;&gt;&gt;&gt;=&quot;\n        | &quot;|=&quot; | &quot;^=&quot; | &quot;&amp;=&quot;\n&#125;\n</code></pre>\n<h4 id=\"logicalexpression\"><a class=\"anchor\" href=\"#logicalexpression\">#</a> LogicalExpression</h4>\n<p>逻辑运算表达式节点，和赋值或者二元运算类型，只不过  <code>operator</code>  是逻辑运算符类型。</p>\n<pre><code>interface LogicalExpression &lt;: Expression &#123;\n    type: &quot;LogicalExpression&quot;;\n    operator: LogicalOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"logicaloperator\"><a class=\"anchor\" href=\"#logicaloperator\">#</a> LogicalOperator</h4>\n<p>逻辑运算符，两种值，即 <code>与</code>   <code>或</code> 。</p>\n<pre><code>enum LogicalOperator &#123;\n    &quot;||&quot; | &quot;&amp;&amp;&quot;\n&#125;\n</code></pre>\n<h4 id=\"memberexpression\"><a class=\"anchor\" href=\"#memberexpression\">#</a> MemberExpression</h4>\n<p>成员表达式节点，即表示引用对象成员的语句， <code>object</code>  是引用对象的表达式节点， <code>property</code>  是表示属性名称， <code>computed</code>  如果为  <code>false</code> ，是表示  <code>.</code>  来引用成员， <code>property</code>  应该为一个  <code>Identifier</code>  节点，如果  <code>computed</code>  属性为  <code>true</code> ，则是  <code>[]</code>  来进行引用，即  <code>property</code>  是一个  <code>Expression</code>  节点，名称是表达式的结果值。</p>\n<pre><code>interface MemberExpression &lt;: Expression, Pattern &#123;\n    type: &quot;MemberExpression&quot;;\n    object: Expression;\n    property: Expression;\n    computed: boolean;\n&#125;\n</code></pre>\n<p>下边是其他的一些表达式：</p>\n<h4 id=\"conditionalexpression\"><a class=\"anchor\" href=\"#conditionalexpression\">#</a> ConditionalExpression</h4>\n<p>条件表达式，通常我们称之为三元运算表达式，即  <code>boolean ? true : false</code> 。属性参考条件语句。</p>\n<pre><code>interface ConditionalExpression &lt;: Expression &#123;\n    type: &quot;ConditionalExpression&quot;;\n    test: Expression;\n    alternate: Expression;\n    consequent: Expression;\n&#125;\n</code></pre>\n<h4 id=\"callexpression\"><a class=\"anchor\" href=\"#callexpression\">#</a> CallExpression</h4>\n<p>函数调用表达式，即表示了  <code>func(1, 2)</code>  这一类型的语句。callee 属性是一个表达式节点，表示函数，arguments 是一个数组，元素是表达式节点，表示函数参数列表。</p>\n<pre><code>interface CallExpression &lt;: Expression &#123;\n    type: &quot;CallExpression&quot;;\n    callee: Expression;\n    arguments: [ Expression ];\n&#125;\n</code></pre>\n<h4 id=\"newexpression\"><a class=\"anchor\" href=\"#newexpression\">#</a> NewExpression</h4>\n<p><code>new</code>  表达式。</p>\n<pre><code>interface NewExpression &lt;: CallExpression &#123;\n    type: &quot;NewExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"sequenceexpression\"><a class=\"anchor\" href=\"#sequenceexpression\">#</a> SequenceExpression</h4>\n<p>这个就是逗号运算符构建的表达式（不知道确切的名称）， <code>expressions</code>  属性为一个数组，即表示构成整个表达式，被逗号分割的多个表达式。</p>\n<pre><code>interface SequenceExpression &lt;: Expression &#123;\n    type: &quot;SequenceExpression&quot;;\n    expressions: [ Expression ];\n&#125;\n</code></pre>\n<p><em>参考链接：</em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phbWllYnVpbGRzL2JhYmVsLWhhbmRib29rL2Jsb2IvbWFzdGVyL3RyYW5zbGF0aW9ucy96aC1IYW5zL3BsdWdpbi1oYW5kYm9vay5tZA==\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvZGVMaXR0bGVQcmluY2UvYmxvZy9pc3N1ZXMvMTk=\">https://github.com/CodeLittlePrince/blog/issues/19</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ODI0MjU0MDJlOTU4YTEyOTkyNmZjYjQ=\">https://juejin.im/post/582425402e958a129926fcb4</span></em></p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/javascript/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E5%88%9D%E8%AF%86/",
            "url": "http://jluyeyu.com/javascript/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E5%88%9D%E8%AF%86/",
            "title": "抽象语法树ast初识",
            "date_published": "2022-01-08T11:35:52.000Z",
            "content_html": "<h2 id=\"为什么要了解ast\"><a class=\"anchor\" href=\"#为什么要了解ast\">#</a> 为什么要了解 AST</h2>\n<p>如果你想了解 js 编译执行的原理，那么你就得了解 AST，目前前端常用的一些插件或者工具，比如说 javascript 转译、代码压缩、css 预处理器、elint、pretiier 等功能的实现，都是建立在 AST 的基础之上。</p>\n<p>在线解析 ast 的网站:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc3RleHBsb3Jlci5uZXQv\">https://astexplorer.net/</span></p>\n<h2 id=\"javascript-编译执行流程\"><a class=\"anchor\" href=\"#javascript-编译执行流程\">#</a> JavaScript 编译执行流程</h2>\n<p>js 执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成 token，之后再通过语法分析生成 AST（Abstract Syntax Tree），最后生成机器码执行。</p>\n<h3 id=\"词法分析\"><a class=\"anchor\" href=\"#词法分析\">#</a> 词法分析</h3>\n<p>词法分析，也称之为扫描（scanner），简单来说就是调用 next () 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的 Token。Token 是一个不可分割的最小单元，例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。词法分析器里，每个关键字是一个 Token ，每个标识符是一个 Token，每个操作符是一个 Token，每个标点符号也都是一个 Token。除此之外，还会过滤掉源程序中的注释和空白字符（换行符、空格、制表符等）。<br />\n最终，整个代码将被分割进一个 tokens 列表（或者说一维数组）。</p>\n<pre><code>n * n;\n\n[\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;*&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  ...\n]\n</code></pre>\n<p>每一个 type 有一组属性来描述该令牌：</p>\n<pre><code>&#123;\n  type: &#123;\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  &#125;,\n  ...\n&#125;\n</code></pre>\n<h3 id=\"语法分析\"><a class=\"anchor\" href=\"#语法分析\">#</a> 语法分析</h3>\n<p>语法分析会将词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。</p>\n<h3 id=\"什么是ast抽象语法树\"><a class=\"anchor\" href=\"#什么是ast抽象语法树\">#</a> 什么是 AST（抽象语法树）</h3>\n<p>抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<pre><code>function square(n) &#123;\n  return n * n;\n&#125;\n</code></pre>\n<p>上面的程序可以被表示成如下的一棵树：</p>\n<pre><code>- FunctionDeclaration:\n  - id:\n    - Identifier:\n      - name: square\n  - params [1]\n    - Identifier\n      - name: n\n  - body:\n    - BlockStatement\n      - body [1]\n        - ReturnStatement\n          - argument\n            - Binaryion\n              - operator: *\n              - left\n                - Identifier\n                  - name: n\n              - right\n                - Identifier\n                  - name: n\n</code></pre>\n<p>或是如下所示的 JavaScript Object（对象）：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;square&quot;\n  &#125;,\n  params: [&#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;n&quot;\n  &#125;],\n  body: &#123;\n    type: &quot;BlockStatement&quot;,\n    body: [&#123;\n      type: &quot;ReturnStatement&quot;,\n      argument: &#123;\n        type: &quot;BinaryExpression&quot;,\n        operator: &quot;*&quot;,\n        left: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;,\n        right: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;\n      &#125;\n    &#125;]\n  &#125;\n&#125;\n</code></pre>\n<p>你会留意到 AST 的每一层都拥有相同的结构：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;...&#125;,\n  params: [...],\n  body: &#123;...&#125;\n&#125;\n&#123;\n  type: &quot;Identifier&quot;,\n  name: ...\n&#125;\n&#123;\n  type: &quot;BinaryExpression&quot;,\n  operator: ...,\n  left: &#123;...&#125;,\n  right: &#123;...&#125;\n&#125;\n</code></pre>\n<p>这样的每一层结构也被叫做 <strong>节点（Node）</strong>。 一个 AST 可以由单一的节点或是成百上千个节点构成。 它们组合在一起可以描述用于静态分析的程序语法。</p>\n<p>每一个节点都有如下所示的接口（Interface）：</p>\n<pre><code>interface Node &#123;\n  type: string;\n&#125;\n</code></pre>\n<p>字符串形式的  <code>type</code>  字段表示节点的类型（如： “ <code>FunctionDeclaration</code> “，” <code>Identifier</code> “，或 “ <code>BinaryExpression</code> “）。 每一种类型的节点定义了一些附加属性用来进一步描述该节点类型。</p>\n<h3 id=\"ast-节点介绍\"><a class=\"anchor\" href=\"#ast-节点介绍\">#</a> AST 节点介绍</h3>\n<h4 id=\"identifier\"><a class=\"anchor\" href=\"#identifier\">#</a> Identifier</h4>\n<p>标识符，就是我们写 JS 时自定义的名称，如变量名，函数名，属性名，都归为标识符。相应的接口是这样的：</p>\n<pre><code>interface Identifier &lt;: Expression, Pattern &#123;\n    type: &quot;Identifier&quot;;\n    name: string;\n&#125;\n</code></pre>\n<p>一个标识符可能是一个表达式，或者是解构的模式（ES6 中的解构语法）。我们等会会看到  <code>Expression</code>  和  <code>Pattern</code>  相关的内容的。</p>\n<h4 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a> Literal</h4>\n<p>字面量，这里不是指  <code>[]</code>  或者  <code>&#123;&#125;</code>  这些，而是本身语义就代表了一个值的字面量，如  <code>1</code> ， <code>“hello”</code> ,  <code>true</code>  这些，还有正则表达式（有一个扩展的 Node 来表示正则表达式），如  <code>/\\d?/</code> 。我们看一下文档的定义：</p>\n<pre><code>interface Literal &lt;: Expression &#123;\n    type: &quot;Literal&quot;;\n    value: string | boolean | null | number | RegExp;\n&#125;\n</code></pre>\n<p>这里即对应了字面量的值，我们可以看出字面量值的类型，字符串，布尔，数值，null 和正则。</p>\n<h4 id=\"regexpliteral\"><a class=\"anchor\" href=\"#regexpliteral\">#</a> RegExpLiteral</h4>\n<p>这个针对正则字面量的，为了更好地来解析正则表达式的内容，添加多一个  <code>regex</code>  字段，里边会包括正则本身，以及正则的  <code>flags</code> 。</p>\n<pre><code>interface RegExpLiteral &lt;: Literal &#123;\n  regex: &#123;\n    pattern: string;\n    flags: string;\n  &#125;;\n&#125;\n</code></pre>\n<h4 id=\"programs\"><a class=\"anchor\" href=\"#programs\">#</a> Programs</h4>\n<p>一般这个是作为跟节点的，即代表了一棵完整的程序代码树。</p>\n<pre><code>interface Program &lt;: Node &#123;\n    type: &quot;Program&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<p><code>body</code>  属性是一个数组，包含了多个  <code>Statement</code> （即语句）节点。</p>\n<h4 id=\"functions\"><a class=\"anchor\" href=\"#functions\">#</a> Functions</h4>\n<p>函数声明或者函数表达式节点。</p>\n<pre><code>interface Function &lt;: Node &#123;\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p><code>id</code>  是函数名， <code>params</code>  属性是一个数组，表示函数的参数。 <code>body</code>  是一个块语句。<br />\n有一个值得留意的点是，你在测试过程中，是不会找到  <code>type: &quot;Function&quot;</code>  的节点的，但是你可以找到  <code>type: &quot;FunctionDeclaration&quot;</code>  和  <code>type: &quot;FunctionExpression&quot;</code> ，因为函数要么以声明语句出现，要么以函数表达式出现，都是节点类型的组合类型，后边会再提及  <code>FunctionDeclaration</code>  和  <code>FunctionExpression</code>  的相关内容。<br />\n这让人感觉这个文档规划得蛮细致的，函数名，参数和函数块是属于函数部分的内容，而声明或者表达式则有它自己需要的东西。</p>\n<h4 id=\"statement\"><a class=\"anchor\" href=\"#statement\">#</a> Statement</h4>\n<p>语句节点没什么特别的，它只是一个节点，一种区分，但是语句有很多种，下边会详述。</p>\n<pre><code>interface Statement &lt;: Node &#123; &#125;ExpressionStatement\n</code></pre>\n<h4 id=\"expressionstatement\"><a class=\"anchor\" href=\"#expressionstatement\">#</a> ExpressionStatement</h4>\n<p>表达式语句节点， <code>a = a + 1</code>  或者  <code>a++</code>  里边会有一个  <code>expression</code>  属性指向一个表达式节点对象（后边会提及表达式）。</p>\n<pre><code>interface ExpressionStatement &lt;: Statement &#123;\n    type: &quot;ExpressionStatement&quot;;\n    expression: Expression;\n&#125;\n</code></pre>\n<h4 id=\"blockstatement\"><a class=\"anchor\" href=\"#blockstatement\">#</a> BlockStatement</h4>\n<p>块语句节点，举个例子： <code>if (...) &#123; // 这里是块语句的内容 &#125;</code> ，块里边可以包含多个其他的语句，所以有一个  <code>body</code>  属性，是一个数组，表示了块里边的多个语句。</p>\n<pre><code>interface BlockStatement &lt;: Statement &#123;\n    type: &quot;BlockStatement&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<h4 id=\"emptystatement\"><a class=\"anchor\" href=\"#emptystatement\">#</a> EmptyStatement</h4>\n<p>一个空的语句节点，没有执行任何有用的代码，例如一个单独的分号；</p>\n<pre><code>interface EmptyStatement &lt;: Statement &#123;\n    type: &quot;EmptyStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"debuggerstatement\"><a class=\"anchor\" href=\"#debuggerstatement\">#</a> DebuggerStatement</h4>\n<p><code>debugger</code> ，就是表示这个，没有其他了。</p>\n<pre><code>interface DebuggerStatement &lt;: Statement &#123;\n    type: &quot;DebuggerStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"withstatement\"><a class=\"anchor\" href=\"#withstatement\">#</a> WithStatement</h4>\n<p><code>with</code>  语句节点，里边有两个特别的属性， <code>object</code>  表示  <code>with</code>  要使用的那个对象（可以是一个表达式）， <code>body</code>  则是对应  <code>with</code>  后边要执行的语句，一般会是一个块语句。</p>\n<pre><code>interface WithStatement &lt;: Statement &#123;\n    type: &quot;WithStatement&quot;;\n    object: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<p>下边是控制流的语句：</p>\n<h4 id=\"returnstatement\"><a class=\"anchor\" href=\"#returnstatement\">#</a> ReturnStatement</h4>\n<p>返回语句节点， <code>argument</code>  属性是一个表达式，代表返回的内容。</p>\n<pre><code>interface ReturnStatement &lt;: Statement &#123;\n    type: &quot;ReturnStatement&quot;;\n    argument: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"labeledstatement\"><a class=\"anchor\" href=\"#labeledstatement\">#</a> LabeledStatement</h4>\n<p><code>label</code>  语句，平时可能会比较少接触到，举个例子：</p>\n<pre><code>loop: for(let i = 0; i &lt; len; i++) &#123;\n    // ...\n    for (let j = 0; j &lt; min; j++) &#123;\n        // ...\n        break loop;\n    &#125;\n&#125;\n</code></pre>\n<p>这里的  <code>loop</code>  就是一个  <code>label</code>  了，我们可以在循环嵌套中使用  <code>break loop</code>  来指定跳出哪个循环。所以这里的  <code>label</code>  语句指的就是  <code>loop: ...</code>  这个。<br />\n一个  <code>label</code>  语句节点会有两个属性，一个  <code>label</code>  属性表示  <code>label</code>  的名称，另外一个  <code>body</code>  属性指向对应的语句，通常是一个循环语句或者  <code>switch</code>  语句。</p>\n<pre><code>interface LabeledStatement &lt;: Statement &#123;\n    type: &quot;LabeledStatement&quot;;\n    label: Identifier;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"breakstatement\"><a class=\"anchor\" href=\"#breakstatement\">#</a> BreakStatement</h4>\n<p><code>break</code>  语句节点，会有一个  <code>label</code>  属性表示需要的  <code>label</code>  名称，当不需要  <code>label</code>  的时候（通常都不需要），便是  <code>null</code> 。</p>\n<pre><code>interface BreakStatement &lt;: Statement &#123;\n    type: &quot;BreakStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<h4 id=\"continuestatement\"><a class=\"anchor\" href=\"#continuestatement\">#</a> ContinueStatement</h4>\n<p><code>continue</code>  语句节点，和  <code>break</code>  类似。</p>\n<pre><code>interface ContinueStatement &lt;: Statement &#123;\n    type: &quot;ContinueStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<p>下边是条件语句：</p>\n<h4 id=\"ifstatement\"><a class=\"anchor\" href=\"#ifstatement\">#</a> IfStatement</h4>\n<p><code>if</code>  语句节点，很常见，会带有三个属性，test 属性表示  <code>if (...)</code>  括号中的表达式。<br />\n <code>consequent</code>  属性是表示条件为  <code>true</code>  时的执行语句，通常会是一个块语句。<br />\n <code>alternate</code>  属性则是用来表示  <code>else</code>  后跟随的语句节点，通常也会是块语句，但也可以又是一个  <code>if</code>  语句节点，即类似这样的结构： <code>if (a) &#123; //... &#125; else if (b) &#123; // ... &#125;</code> 。 <code>alternate</code>  当然也可以为  <code>null</code> 。</p>\n<pre><code>interface IfStatement &lt;: Statement &#123;\n    type: &quot;IfStatement&quot;;\n    test: Expression;\n    consequent: Statement;\n    alternate: Statement | null;\n&#125;\n</code></pre>\n<h4 id=\"switchstatement\"><a class=\"anchor\" href=\"#switchstatement\">#</a> SwitchStatement</h4>\n<p><code>switch</code>  语句节点，有两个属性， <code>discriminant</code>  属性表示  <code>switch</code>  语句后紧随的表达式，通常会是一个变量， <code>cases</code>  属性是一个  <code>case</code>  节点的数组，用来表示各个  <code>case</code>  语句。</p>\n<pre><code>interface SwitchStatement &lt;: Statement &#123;\n    type: &quot;SwitchStatement&quot;;\n    discriminant: Expression;\n    cases: [ SwitchCase ];\n&#125;\n</code></pre>\n<h4 id=\"switchcase\"><a class=\"anchor\" href=\"#switchcase\">#</a> SwitchCase</h4>\n<p><code>switch</code>  的  <code>case</code>  节点。 <code>test</code>  属性代表这个  <code>case</code>  的判断表达式， <code>consequent</code>  则是这个  <code>case</code>  的执行语句。<br />\n当  <code>test</code>  属性是  <code>null</code>  时，则是表示  <code>default</code>  这个  <code>case</code>  节点。</p>\n<pre><code>interface SwitchCase &lt;: Node &#123;\n    type: &quot;SwitchCase&quot;;\n    test: Expression | null;\n    consequent: [ Statement ];\n&#125;\n</code></pre>\n<p>下边是异常相关的语句：</p>\n<h4 id=\"throwstatement\"><a class=\"anchor\" href=\"#throwstatement\">#</a> ThrowStatement</h4>\n<p><code>throw</code>  语句节点， <code>argument</code>  属性用以表示  <code>throw</code>  后边紧跟的表达式。</p>\n<pre><code>interface ThrowStatement &lt;: Statement &#123;\n    type: &quot;ThrowStatement&quot;;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"trystatement\"><a class=\"anchor\" href=\"#trystatement\">#</a> TryStatement</h4>\n<p><code>try</code>  语句节点， <code>block</code>  属性表示  <code>try</code>  的执行语句，通常是一个块语句。<br />\n <code>hanlder</code>  属性是指  <code>catch</code>  节点， <code>finalizer</code>  是指  <code>finally</code>  语句节点，当  <code>hanlder</code>  为  <code>null</code>  时， <code>finalizer</code>  必须是一个块语句节点。</p>\n<pre><code>interface TryStatement &lt;: Statement &#123;\n    type: &quot;TryStatement&quot;;\n    block: BlockStatement;\n    handler: CatchClause | null;\n    finalizer: BlockStatement | null;\n&#125;\n</code></pre>\n<h4 id=\"catchclause\"><a class=\"anchor\" href=\"#catchclause\">#</a> CatchClause</h4>\n<p><code>catch</code>  节点， <code>param</code>  用以表示  <code>catch</code>  后的参数， <code>body</code>  则表示  <code>catch</code>  后的执行语句，通常是一个块语句。</p>\n<pre><code>interface CatchClause &lt;: Node &#123;\n    type: &quot;CatchClause&quot;;\n    param: Pattern;\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p>下边是循环语句：</p>\n<h4 id=\"whilestatement\"><a class=\"anchor\" href=\"#whilestatement\">#</a> WhileStatement</h4>\n<p><code>while</code>  语句节点， <code>test</code>  表示括号中的表达式， <code>body</code>  是表示要循环执行的语句。</p>\n<pre><code>interface WhileStatement &lt;: Statement &#123;\n    type: &quot;WhileStatement&quot;;\n    test: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"dowhilestatement\"><a class=\"anchor\" href=\"#dowhilestatement\">#</a> DoWhileStatement</h4>\n<p><code>do/while</code>  语句节点，和  <code>while</code>  语句类似。</p>\n<pre><code>interface DoWhileStatement &lt;: Statement &#123;\n    type: &quot;DoWhileStatement&quot;;\n    body: Statement;\n    test: Expression;\n&#125;\n</code></pre>\n<h4 id=\"forstatement\"><a class=\"anchor\" href=\"#forstatement\">#</a> ForStatement</h4>\n<p><code>for</code>  循环语句节点，属性  <code>init/test/update</code>  分别表示了  <code>for</code>  语句括号中的三个表达式，初始化值，循环判断条件，每次循环执行的变量更新语句（ <code>init</code>  可以是变量声明或者表达式）。这三个属性都可以为  <code>null</code> ，即  <code>for(;;)&#123;&#125;</code> 。 <code>body</code>  属性用以表示要循环执行的语句。</p>\n<pre><code>interface ForStatement &lt;: Statement &#123;\n    type: &quot;ForStatement&quot;;\n    init: VariableDeclaration | Expression | null;\n    test: Expression | null;\n    update: Expression | null;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"forinstatement\"><a class=\"anchor\" href=\"#forinstatement\">#</a> ForInStatement</h4>\n<p><code>for/in</code>  语句节点， <code>left</code>  和  <code>right</code>  属性分别表示在  <code>in</code>  关键词左右的语句（左侧可以是一个变量声明或者表达式）。 <code>body</code>  依旧是表示要循环执行的语句。</p>\n<pre><code>interface ForInStatement &lt;: Statement &#123;\n    type: &quot;ForInStatement&quot;;\n    left: VariableDeclaration |  Pattern;\n    right: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"declarations\"><a class=\"anchor\" href=\"#declarations\">#</a> Declarations</h4>\n<p>声明语句节点，同样也是语句，只是一个类型的细化。下边会介绍各种声明语句类型。</p>\n<pre><code>interface Declaration &lt;: Statement &#123; &#125;\n</code></pre>\n<h4 id=\"functiondeclaration\"><a class=\"anchor\" href=\"#functiondeclaration\">#</a> FunctionDeclaration</h4>\n<p>函数声明，和之前提到的  <code>Function</code>  不同的是， <code>id</code>  不能为  <code>null</code> 。</p>\n<pre><code>interface FunctionDeclaration &lt;: Function, Declaration &#123;\n    type: &quot;FunctionDeclaration&quot;;\n    id: Identifier;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclaration\"><a class=\"anchor\" href=\"#variabledeclaration\">#</a> VariableDeclaration</h4>\n<p>变量声明， <code>kind</code>  属性表示是什么类型的声明，因为 ES6 引入了  <code>const/let</code> 。 <code>declarations</code>  表示声明的多个描述，因为我们可以这样： <code>let a = 1, b = 2;</code> 。</p>\n<pre><code>interface VariableDeclaration &lt;: Declaration &#123;\n    type: &quot;VariableDeclaration&quot;;\n    declarations: [ VariableDeclarator ];\n    kind: &quot;var&quot;;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclarator\"><a class=\"anchor\" href=\"#variabledeclarator\">#</a> VariableDeclarator</h4>\n<p>变量声明的描述， <code>id</code>  表示变量名称节点， <code>init</code>  表示初始值的表达式，可以为  <code>null</code> 。</p>\n<pre><code>interface VariableDeclarator &lt;: Node &#123;\n    type: &quot;VariableDeclarator&quot;;\n    id: Pattern;\n    init: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"expressions\"><a class=\"anchor\" href=\"#expressions\">#</a> Expressions</h4>\n<p>表达式节点。</p>\n<pre><code>interface Expression &lt;: Node &#123; &#125;\n</code></pre>\n<h4 id=\"thisexpression\"><a class=\"anchor\" href=\"#thisexpression\">#</a> ThisExpression</h4>\n<p>表示  <code>this</code> 。</p>\n<pre><code>interface ThisExpression &lt;: Expression &#123;\n    type: &quot;ThisExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"arrayexpression\"><a class=\"anchor\" href=\"#arrayexpression\">#</a> ArrayExpression</h4>\n<p>数组表达式节点， <code>elements</code>  属性是一个数组，表示数组的多个元素，每一个元素都是一个表达式节点。</p>\n<pre><code>interface ArrayExpression &lt;: Expression &#123;\n    type: &quot;ArrayExpression&quot;;\n    elements: [ Expression | null ];\n&#125;\n</code></pre>\n<h4 id=\"objectexpression\"><a class=\"anchor\" href=\"#objectexpression\">#</a> ObjectExpression</h4>\n<p>对象表达式节点， <code>property</code>  属性是一个数组，表示对象的每一个键值对，每一个元素都是一个属性节点。</p>\n<pre><code>interface ObjectExpression &lt;: Expression &#123;\n    type: &quot;ObjectExpression&quot;;\n    properties: [ Property ];\n&#125;\n</code></pre>\n<h4 id=\"property\"><a class=\"anchor\" href=\"#property\">#</a> Property</h4>\n<p>对象表达式中的属性节点。 <code>key</code>  表示键， <code>value</code>  表示值，由于 ES5 语法中有  <code>get/set</code>  的存在，所以有一个  <code>kind</code>  属性，用来表示是普通的初始化，或者是  <code>get/set</code> 。</p>\n<pre><code>interface Property &lt;: Node &#123;\n    type: &quot;Property&quot;;\n    key: Literal | Identifier;\n    value: Expression;\n    kind: &quot;init&quot; | &quot;get&quot; | &quot;set&quot;;\n&#125;\n</code></pre>\n<h4 id=\"functionexpression\"><a class=\"anchor\" href=\"#functionexpression\">#</a> FunctionExpression</h4>\n<p>函数表达式节点。</p>\n<pre><code>interface FunctionExpression &lt;: Function, Expression &#123;\n    type: &quot;FunctionExpression&quot;;\n&#125;\n</code></pre>\n<p>下边是一元运算符相关的表达式部分：</p>\n<h4 id=\"unaryexpression\"><a class=\"anchor\" href=\"#unaryexpression\">#</a> UnaryExpression</h4>\n<p>一元运算表达式节点（ <code>++/--</code>  是  <code>update</code>  运算符，不在这个范畴内）， <code>operator</code>  表示运算符， <code>prefix</code>  表示是否为前缀运算符。 <code>argument</code>  是要执行运算的表达式。</p>\n<pre><code>interface UnaryExpression &lt;: Expression &#123;\n    type: &quot;UnaryExpression&quot;;\n    operator: UnaryOperator;\n    prefix: boolean;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"unaryoperator\"><a class=\"anchor\" href=\"#unaryoperator\">#</a> UnaryOperator</h4>\n<p>一元运算符，枚举类型，所有值如下：</p>\n<pre><code>enum UnaryOperator &#123;\n    &quot;-&quot; | &quot;+&quot; | &quot;!&quot; | &quot;~&quot; | &quot;typeof&quot; | &quot;void&quot; | &quot;delete&quot;\n&#125;\n</code></pre>\n<h4 id=\"updateexpression\"><a class=\"anchor\" href=\"#updateexpression\">#</a> UpdateExpression</h4>\n<p><code>update</code>  运算表达式节点，即  <code>++/--</code> ，和一元运算符类似，只是  <code>operator</code>  指向的节点对象类型不同，这里是  <code>update</code>  运算符。</p>\n<pre><code>interface UpdateExpression &lt;: Expression &#123;\n    type: &quot;UpdateExpression&quot;;\n    operator: UpdateOperator;\n    argument: Expression;\n    prefix: boolean;\n&#125;\n</code></pre>\n<h4 id=\"updateoperator\"><a class=\"anchor\" href=\"#updateoperator\">#</a> UpdateOperator</h4>\n<p><code>update</code>  运算符，值为  <code>++</code>  或  <code>--</code> ，配合  <code>update</code>  表达式节点的  <code>prefix</code>  属性来表示前后。</p>\n<pre><code>enum UpdateOperator &#123;\n    &quot;++&quot; | &quot;--&quot;\n&#125;\n</code></pre>\n<p>下边是二元运算符相关的表达式部分：</p>\n<h4 id=\"binaryexpression\"><a class=\"anchor\" href=\"#binaryexpression\">#</a> BinaryExpression</h4>\n<p>二元运算表达式节点， <code>left</code>  和  <code>right</code>  表示运算符左右的两个表达式， <code>operator</code>  表示一个二元运算符。</p>\n<pre><code>interface BinaryExpression &lt;: Expression &#123;\n    type: &quot;BinaryExpression&quot;;\n    operator: BinaryOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"binaryoperator\"><a class=\"anchor\" href=\"#binaryoperator\">#</a> BinaryOperator</h4>\n<p>二元运算符，所有值如下：</p>\n<pre><code>enum BinaryOperator &#123;\n    &quot;==&quot; | &quot;!=&quot; | &quot;===&quot; | &quot;!==&quot;\n         | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot;\n         | &quot;&lt;&lt;&quot; | &quot;&gt;&gt;&quot; | &quot;&gt;&gt;&gt;&quot;\n         | &quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; | &quot;%&quot;\n         | &quot;|&quot; | &quot;^&quot; | &quot;&amp;&quot; | &quot;in&quot;\n         | &quot;instanceof&quot;\n&#125;\n</code></pre>\n<h4 id=\"assignmentexpression\"><a class=\"anchor\" href=\"#assignmentexpression\">#</a> AssignmentExpression</h4>\n<p>赋值表达式节点， <code>operator</code>  属性表示一个赋值运算符， <code>left</code>  和  <code>right</code>  是赋值运算符左右的表达式。</p>\n<pre><code>interface AssignmentExpression &lt;: Expression &#123;\n    type: &quot;AssignmentExpression&quot;;\n    operator: AssignmentOperator;\n    left: Pattern | Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"assignmentoperator\"><a class=\"anchor\" href=\"#assignmentoperator\">#</a> AssignmentOperator</h4>\n<p>赋值运算符，所有值如下：（常用的并不多）</p>\n<pre><code>enum AssignmentOperator &#123;\n    &quot;=&quot; | &quot;+=&quot; | &quot;-=&quot; | &quot;*=&quot; | &quot;/=&quot; | &quot;%=&quot;\n        | &quot;&lt;&lt;=&quot; | &quot;&gt;&gt;=&quot; | &quot;&gt;&gt;&gt;=&quot;\n        | &quot;|=&quot; | &quot;^=&quot; | &quot;&amp;=&quot;\n&#125;\n</code></pre>\n<h4 id=\"logicalexpression\"><a class=\"anchor\" href=\"#logicalexpression\">#</a> LogicalExpression</h4>\n<p>逻辑运算表达式节点，和赋值或者二元运算类型，只不过  <code>operator</code>  是逻辑运算符类型。</p>\n<pre><code>interface LogicalExpression &lt;: Expression &#123;\n    type: &quot;LogicalExpression&quot;;\n    operator: LogicalOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"logicaloperator\"><a class=\"anchor\" href=\"#logicaloperator\">#</a> LogicalOperator</h4>\n<p>逻辑运算符，两种值，即 <code>与</code>   <code>或</code> 。</p>\n<pre><code>enum LogicalOperator &#123;\n    &quot;||&quot; | &quot;&amp;&amp;&quot;\n&#125;\n</code></pre>\n<h4 id=\"memberexpression\"><a class=\"anchor\" href=\"#memberexpression\">#</a> MemberExpression</h4>\n<p>成员表达式节点，即表示引用对象成员的语句， <code>object</code>  是引用对象的表达式节点， <code>property</code>  是表示属性名称， <code>computed</code>  如果为  <code>false</code> ，是表示  <code>.</code>  来引用成员， <code>property</code>  应该为一个  <code>Identifier</code>  节点，如果  <code>computed</code>  属性为  <code>true</code> ，则是  <code>[]</code>  来进行引用，即  <code>property</code>  是一个  <code>Expression</code>  节点，名称是表达式的结果值。</p>\n<pre><code>interface MemberExpression &lt;: Expression, Pattern &#123;\n    type: &quot;MemberExpression&quot;;\n    object: Expression;\n    property: Expression;\n    computed: boolean;\n&#125;\n</code></pre>\n<p>下边是其他的一些表达式：</p>\n<h4 id=\"conditionalexpression\"><a class=\"anchor\" href=\"#conditionalexpression\">#</a> ConditionalExpression</h4>\n<p>条件表达式，通常我们称之为三元运算表达式，即  <code>boolean ? true : false</code> 。属性参考条件语句。</p>\n<pre><code>interface ConditionalExpression &lt;: Expression &#123;\n    type: &quot;ConditionalExpression&quot;;\n    test: Expression;\n    alternate: Expression;\n    consequent: Expression;\n&#125;\n</code></pre>\n<h4 id=\"callexpression\"><a class=\"anchor\" href=\"#callexpression\">#</a> CallExpression</h4>\n<p>函数调用表达式，即表示了  <code>func(1, 2)</code>  这一类型的语句。callee 属性是一个表达式节点，表示函数，arguments 是一个数组，元素是表达式节点，表示函数参数列表。</p>\n<pre><code>interface CallExpression &lt;: Expression &#123;\n    type: &quot;CallExpression&quot;;\n    callee: Expression;\n    arguments: [ Expression ];\n&#125;\n</code></pre>\n<h4 id=\"newexpression\"><a class=\"anchor\" href=\"#newexpression\">#</a> NewExpression</h4>\n<p><code>new</code>  表达式。</p>\n<pre><code>interface NewExpression &lt;: CallExpression &#123;\n    type: &quot;NewExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"sequenceexpression\"><a class=\"anchor\" href=\"#sequenceexpression\">#</a> SequenceExpression</h4>\n<p>这个就是逗号运算符构建的表达式（不知道确切的名称）， <code>expressions</code>  属性为一个数组，即表示构成整个表达式，被逗号分割的多个表达式。</p>\n<pre><code>interface SequenceExpression &lt;: Expression &#123;\n    type: &quot;SequenceExpression&quot;;\n    expressions: [ Expression ];\n&#125;\n</code></pre>\n<p><em>参考链接：</em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phbWllYnVpbGRzL2JhYmVsLWhhbmRib29rL2Jsb2IvbWFzdGVyL3RyYW5zbGF0aW9ucy96aC1IYW5zL3BsdWdpbi1oYW5kYm9vay5tZA==\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvZGVMaXR0bGVQcmluY2UvYmxvZy9pc3N1ZXMvMTk=\">https://github.com/CodeLittlePrince/blog/issues/19</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ODI0MjU0MDJlOTU4YTEyOTkyNmZjYjQ=\">https://juejin.im/post/582425402e958a129926fcb4</span></em></p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/4.%20%E9%A6%96%E9%A1%B5%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "url": "http://jluyeyu.com/project/onlineResume/4.%20%E9%A6%96%E9%A1%B5%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "title": "4. 首页框架搭建",
            "date_published": "2022-01-08T05:50:52.000Z",
            "content_html": "<h3 id=\"路由组件开发\"><a class=\"anchor\" href=\"#路由组件开发\">#</a> 路由组件开发</h3>\n<p>我们进入到  <code>app/renderer</code>  文件夹下，会发现这里有搭建环境时写的  <code>&lt;Title /&gt;</code>  组件，我们将其进行删除（已无用），我们用脚趾头都能知道，之后会存在诸多模块入口，所以我们在 renderer 下，创建一个路由文件  <code>router.tsx</code> ，管理所有的模块入口，先来编写一下 router.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/router.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 精确路由匹配 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 重定向到首页 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建一个文件夹  <code>container</code> ，该文件夹存放着所有模块的代码文件，此时我们添加一个新文件夹，取名为： <code>root</code> ，表明这是首页模块，并创建入口文件 index.tsx 和 index.less</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是首页<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回到根组件  <code>app.tsx</code> ，将路由组件  <code>router.tsx </code> 引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/app.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>大功告成，运行一下，看看效果如何</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run start:main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> run start:render</pre></td></tr></table></figure><p>不出意外，渲染进程窗口很顺利的展示了我们想要的页面效果，此时看看我们的文件结构</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%20%E9%A6%96%E9%A1%B50.0.1.png\" alt=\"image.png\" /></p>\n<h3 id=\"首页开发\"><a class=\"anchor\" href=\"#首页开发\">#</a> 首页开发</h3>\n<p>通过效果图，我们可以将首页拆分成：</p>\n<ul>\n<li>logo 图片</li>\n<li>title 应用名称</li>\n<li>tips 应用简介特性</li>\n<li>entry 模块入口</li>\n<li>copyright 应用版权</li>\n</ul>\n<p>我们先将 logo 图引入，通过 CSS 实现布局效果.</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页模块的入口文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.jpg'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Logo<span class=\"token punctuation\">&#125;</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>onlineResume<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"tips\"</span><span class=\"token operator\">></span>一个模板简历制作平台<span class=\"token punctuation\">,</span> 让你的简历更加出众 <span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"action\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>index<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"copyright\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token operator\">&lt;</span>p styleName<span class=\"token operator\">=</span><span class=\"token string\">\"copyright\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              Copyright © <span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> All Rights Reserved<span class=\"token punctuation\">.</span> Copyright By pengdaokuan</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>CSS 如下</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #27292c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>8vh <span class=\"token operator\">+</span> 60px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token selector\">img</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 112px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 112px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 36px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token selector\">.tips</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token selector\">.theme</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 24px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token selector\">.action</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%20%E9%A6%96%E9%A1%B50.0.2.png\" alt=\"首页界面\" /></p>\n<p>刷新一下页面，可以发现我们距离成功只剩一步之遥。接下来我们来实现一下基本点击跳转等功能。</p>\n<h3 id=\"模块入口跳转功能\"><a class=\"anchor\" href=\"#模块入口跳转功能\">#</a> 模块入口跳转功能</h3>\n<p>在 React 中我们可以通过 react-router 这个强大路由库进行页面之间的跳转，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。</p>\n<p>在环境搭建篇中我们已经安装了 react-router，由于我们采用 Hooks 的写法，react-router 提供了一个 API 叫做  <code>useHistory</code> ，接下来我们就通过它，来实现我们的跳转功能吧～</p>\n<p>回到我们上面的代码，我们为其添加一个  <code>onClick</code>  事件</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页模块的入口文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 👇 通过 history.push 进行跳转</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">===</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'跳转到简历页面'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/resume'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入到 github '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>action<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>index<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onRouterToLink</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              </span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下上面代码，我们为每个模块 div 都添加  <code>onClick</code>  事件，点击模块后，进行条件判断，从而做对应的操作。 刷新一下页面，点击 <code>简历</code>  ，发现页面空白，为什么呢？回过头想想，我们上边的  <code>router.tsx</code>  路由组件，<strong>不就只写了一个首页模块的路由吗</strong>？我们回去添加一个新路由。</p>\n<p>在  <code>container</code>  下添加 resume 文件夹，并新增入口 index.tsx，我们简单写一下简历入口代码。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                我是简历页面</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时修改 router.tsx 文件，将其引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/router.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/resume'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 精确路由匹配 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 👇 添加简历模块入口路由 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/resume\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Resume <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 重定向到首页 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>再点击一下  <code>简历</code> ，此时可成功跳转。页面内的路由切换尚能解决，窗口外的页面跳转无从下手。我们期望点击 <code>介绍</code> 、 <code>源码</code> 处，能够脱离应用窗口，在我们默认浏览器中打开页面，进入到 github 中。</p>\n<p><strong>electron 提供一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvc2hlbGwjc2hlbGw=\">shell</span> 模块，它模块提供与桌面集成相关的功能</strong>。并且此模块也能用于渲染进程中，下面我们通过此模块，实现此功能（👇 部分代码省略）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> shell <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">!==</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 通过 shell 模块，打开默认浏览器，进入 github</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/resume'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到目前为止，我们首页的基本功能已经开发完成。</p>\n<h3 id=\"思考代码优化\"><a class=\"anchor\" href=\"#思考代码优化\">#</a> 🤔 思考代码优化</h3>\n<p>上面我们是以简单粗暴形式，将页面和逻辑撸了出来，但代码简直 “不堪入目”，作为一个有追求、有代码洁癖的工程师，简直无法容忍，接下来我们对它进行美化。</p>\n<h4 id=\"1-webpack-alias-别名\"><a class=\"anchor\" href=\"#1-webpack-alias-别名\">#</a> 1. webpack alias 别名</h4>\n<p>我们回过头看，当我们引入图片时，路径要些一连串的  <code>../../../../</code> ，有没有想骂 x 的冲动，好在 webpack 提供 alias 配置，让我们能够配置别名，接下来我们上手试试。</p>\n<p>我们的图片都放在项目根路径下的 assets 中，我们给它加个别名，修改  <code>webpack.base.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 👇 添加别名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">'@assets'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'assets/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">'@src'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>添加之后，我们将文件的引入改成下面这种形式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 未修改前</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改后</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'@assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 未修改前</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/resume'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 修改后</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'@src/container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'@src/container/resume'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重跑一下项目（运行 npm run start:render）发现没啥问题，完美</p>\n<h4 id=\"2-模块入口的常量定义与类型约束\"><a class=\"anchor\" href=\"#2-模块入口的常量定义与类型约束\">#</a> 2. 模块入口的常量定义与类型约束</h4>\n<p>上面我们写了一段 “粗暴” 代码，我们能否将其进行抽离，思考一下， <code>路由常量数据</code> 是一个只会在首页用到的数据还是其他模块也会用到的数据呢？</p>\n<p>其他模块是否也会通过  <code>history.push</code>  方式跳转到其他模块页面，如果是，我们将来在其他模块也要写一段 “粗暴” 代码？还可能出现的问题是：我们期望数据一致，当往往出于疏忽，两边数据不一致。</p>\n<p>那么我们将其抽离成一个路由常量文件，进行统一维护，是不是更好呢？</p>\n<p>我们在  <code>app/renderer</code>  文件夹下新增一个文件夹，取名为：common，顾名思义，这里存放的是项目中所有公共通用的代码文件，在里边我们创建一个 constants 文件夹，表示这里维护所有常量数据。</p>\n<p>我们在 contants 下维护一份路由专用的文件，取名为  <code>router.ts</code> ，我们来写一下该文件：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模块路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  resume<span class=\"token operator\">:</span> <span class=\"token string\">'/resume'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER_KEY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  resume<span class=\"token operator\">:</span> <span class=\"token string\">'resume'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 入口模块，TS 定义类型必须为 TSRouter.Item</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token string\">'intro'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">ROUTER_KEY</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>既然我们使用了 Typescript，那么我们先小试牛刀一下，上面定义的  <code>ROUTER_ENTRY</code>  我们将它的类型约束为  <code>TSRouter.Item</code> ，我们在 common 文件夹下新增一个名为 types 文件夹，表示此文件存放着应用中用到的类型定义。我们来新增一个用于路由的 router.d.ts 文件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// router.d.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 路由类型约束</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> TSRouter <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @description 路由跳转链接</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @description 关键词</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @description 文本</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>紧接着我们在 webpack 中配置一下此文件夹的别名</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">'@common'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer/common'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们进行改造，首先先来修改一下路由组件 router.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//router.tsx 路由组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 👇 引入路由常量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token constant\">ROUTER</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">&#125;</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">&#125;</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Resume <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们在首页入口 index.tsx 文件进行改造</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页入口 index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROUTER_KEY</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在方法调用上</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在遍历上</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"action\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>router<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onRouterToLink</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>router<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"3-utils-方法抽离\"><a class=\"anchor\" href=\"#3-utils-方法抽离\">#</a> 3. utils 方法抽离</h4>\n<p>虽然我们代码优化了一部分，但还是存在一些小问题的，比如  <code>router.text !== '简历'</code>  这个条件判断就有些突兀了，我们回到问题本质，这里进行判断原因是：如果这个 url 是外部可访问的链接，则通过 shell 模块打开浏览器，如果是页面之间跳转，则跳转到对应的路由页面。</p>\n<p>所以问题聚焦在，如何判断 url 是不是可访问的外部链接？这很简单，我们写一个方法，判断 url 是不是 http 或 https 开头，该方法返回 boolean 值，下面我们来实现此方法。</p>\n<p>首先在 common 下新增一个 utils 文件夹，并新增 router.ts，表示这是路由相关的工具处理函数，在里面实现我们的函数方法：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/router.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @desc 判断是否属于外部连接</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;string&#125; url - 链接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isHttpOrHttpsUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> regRule <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(http|https):\\/\\/([\\w.]+\\/?)\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> regRule<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们进行修改的条件判断</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isHttpOrHttpsUrl <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在方法调用上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isHttpOrHttpsUrl</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"4-页面存在空白间隙\"><a class=\"anchor\" href=\"#4-页面存在空白间隙\">#</a> 4. 页面存在空白间隙</h4>\n<p>最懒惰的解决方式是，在 index.html 中，修改一下样式</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>VisResumeMook<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>至此，我们的首页终于开发完毕，并且经过思考，不断优化，将项目的整个文件结构进行丰富。一张图回顾一下我们现在的文件结构</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_src1.png\" alt=\"image.png\" /></p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/3.%20%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "http://jluyeyu.com/project/onlineResume/3.%20%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "3. 项目环境搭建",
            "date_published": "2022-01-08T00:50:52.000Z",
            "content_html": "<h2 id=\"项目环境搭建\"><a class=\"anchor\" href=\"#项目环境搭建\">#</a> 项目环境搭建</h2>\n<p>​\t前两小节通过对 Electron 和 Webpack 的介绍的简单介绍，我们对其有了一定的了解，接下来这一小节主要是搭建基本的开发环境。通过一步步的动手实践，并将 TypeScript、ESLint、Prettier 等引入，最后搭起我们的 React 项目。</p>\n<h3 id=\"第一阶段electron-搭建\"><a class=\"anchor\" href=\"#第一阶段electron-搭建\">#</a> 第一阶段：Electron 搭建</h3>\n<p>官方对于应用搭建有详细的文档说明，下面基于官方文档，讲解一下 Electron 的搭建</p>\n<h3 id=\"1-安装-node-环境\"><a class=\"anchor\" href=\"#1-安装-node-环境\">#</a> 1. 安装 Node 环境</h3>\n<p>在搭建 Electron 应用前，请先确保 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">Node.js</span> 已经安装，接下来在终端输入命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p>这两个命令应输出了 Node.js 和 npm 的版本信息。 如果这两个命令都执行成功，那就接着往下走</p>\n<h3 id=\"2-安装-electron\"><a class=\"anchor\" href=\"#2-安装-electron\">#</a> 2. 安装 Electron</h3>\n<p>我们创建一个新文件夹，名为  <code>onlineResume</code> ，进入文件夹并安装 Electron</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> onlineResume</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> onlineResume</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> electron@11.1.1</pre></td></tr></table></figure><h3 id=\"3-基本框架结构\"><a class=\"anchor\" href=\"#3-基本框架结构\">#</a> 3. 基本框架结构</h3>\n<p>前面说了，Electron 是基于 Chromium + Node.js 开发的，也就是说 Electron 本质上就是一个 Node.js 应用。这意味着 Electron 应用程序的起点将是一个 package.json 文件。</p>\n<p>我们创建一个  <code>package.json</code>  文件，并且创建主进程脚本  <code>electron.ts</code> ，该脚本就是应用程序的入口。为了区分主进程模块和渲染进程模块，我以文件夹形式进行区分。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── onlineResume</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│ ├── app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│ │ ├── main      <span class=\"token comment\">// 主进程模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│ │ │    ├── electron<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│ │ │    └── index<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│ │ ├── renderer  <span class=\"token comment\">// 渲染进程模块</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│ │ └──</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│ ├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│ └──</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>└──</pre></td></tr></table></figure><h3 id=\"4-编写-packagejson\"><a class=\"anchor\" href=\"#4-编写-packagejson\">#</a> 4. 编写 package.json</h3>\n<p>编写一下我们的 package.json 配置。我们将应用程序的入口文件配置为主进程脚本</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onlineResume\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"简历制作\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./app/main/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"start:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron ./app/main/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"install:electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/ npm install electron\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^11.1.1\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-定义-html\"><a class=\"anchor\" href=\"#5-定义-html\">#</a> 5. 定义 html</h3>\n<p>我们编写创建一个 HTML，等会加载此页面</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>onlineResume<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>简历平台应用搭建起来啦！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"6-编写主进程\"><a class=\"anchor\" href=\"#6-编写主进程\">#</a> 6. 编写主进程</h3>\n<p>在主进程脚本中，通过  <code>BrowserWindow</code>  创建浏览器窗口（也就是一个渲染进程），你可以将其看成浏览器的一个 Tab。请注意  <code>BrowserWindow</code>  还有一个配置参数叫做 webPreferences，我们需要将其选项中的  <code>nodeIntegration</code>  设置为 true，这样我们才能在渲染进程中就能使用 node。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @desc electron 主入口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 创建浏览器窗口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> mainWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    height<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    webPreferences<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      nodeIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 注入 node 模块</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7-启动应用程序\"><a class=\"anchor\" href=\"#7-启动应用程序\">#</a> 7. 启动应用程序</h3>\n<p>最后我们执行  <code>npm run start:main</code> ，就能看到我们搭建的简历应用啦～</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%200.0.1.png\" alt=\"Electron启动测试\" /></p>\n<h2 id=\"第二阶段react-搭建\"><a class=\"anchor\" href=\"#第二阶段react-搭建\">#</a> 第二阶段：React 搭建</h2>\n<h3 id=\"1-安装-react\"><a class=\"anchor\" href=\"#1-安装-react\">#</a> 1. 安装 React</h3>\n<p>我们打开终端，此时先安装  <code>React</code> ，并且安装它相应的兄弟姐妹</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react@17.0.2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react-router@5.2.0 react-router-dom@5.2.0 react-dom@17.0.2</pre></td></tr></table></figure><h3 id=\"2-安装-babel\"><a class=\"anchor\" href=\"#2-安装-babel\">#</a> 2. 安装 Babel</h3>\n<p>接着安装一下  <code>Babel</code> ，它是 JS 编译器，能将 ES6 代码转成 ES5，让我们使用最近的语言特性，而不需要担心兼容性的问题。关于  <code>install</code>  的库，接下来会讲其作用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/polyfill@7.12.1 --save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/core@7.14.3 @babel/cli@7.14.3 --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/preset-env@7.14.2 @babel/preset-react@7.13.13 @babel/preset-typescript@7.13.0 --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/plugin-transform-runtime@7.14.3 --save-dev</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/plugin-transform-modules-commonjs@7.14.0 --save-dev</pre></td></tr></table></figure><p>安装完成之后，根据 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vdXNhZ2Ujb3ZlcnZpZXc=\">Babel 官网</span>的教程，我们创建  <code>babel.config.js</code> ，配置一下我们常用的插件 plugins 和 预设值 presets</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 根据配置的目标浏览器或者运行环境，选择对应的语法包，从而将代码进行转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 react 语法包，让我们可以使用 React ES6 Class Component 的写法，支持 JSX、TSX 语法格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 https://github.com/babel/babel/issues/10570</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 官方提供的插件，作用是减少冗余的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string\">'@babel/plugin-transform-modules-commonjs'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 将 ECMAScript modules 转成 CommonJS.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        allowTopLevelThis<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        loose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-安装-webpack\"><a class=\"anchor\" href=\"#3-安装-webpack\">#</a> 3. 安装 Webpack</h3>\n<p>我们安装一下  <code>Webpack</code> ，新版本可能会有一些区别。为了省事可以指定版本。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack@4.44.1 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-cli@3.3.12 --save-dev</pre></td></tr></table></figure><p>我们期望监听文件的变化，能够自动刷新网页，做到实时预览，而不是改动一个字母，一个文字都需要重新打包。业界较为成熟的解决方案是通过： <code>webpack-dev-server</code>  插件，OK，我们安装它。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-dev-server@3.11.2 --save-dev</pre></td></tr></table></figure><p>对于主进程和渲染进程来讲，webpack 的配置是会存在差异的。比如渲染进程可能需要 less-loader、htmlWebpackPlugins 等 “专属” 配置，而这些配置对于主进程来讲，是无用的。</p>\n<p>存在差异的同时又会有相同点，比如 alias 别名配置等，当我们不采用 webpack-merge 时，会导致每份配置会存在重复的 “配置” 代码。其次在 dev 和 prod 环境下，配置会存在一些小差别，这时我们代码中会充斥着一些三元运算符来判断环境。<strong>最后的结果为每一份配置的可读性相对较差</strong>。</p>\n<p>为此我们通过 webpack-merge 插件进行处理</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-merge --save-dev</pre></td></tr></table></figure><p>我们不想每次打包都需要手动修改 HTML 中的文件引用，并且期望采用自己写的 HTML 文件为模版，生成打包之后的入口 HTML，为此我们采用  <code>html-webpack-plugin</code>  插件进行处理。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install html<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin@<span class=\"token number\">4.3</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>因为每次打包的文件会不同，我们需要先删除之前的 dist 文件，再重新打包，为此我们可以通过  <code>clean-webpack-plugin</code>  进行解决</p>\n<pre><code>npm install clean-webpack-plugin --save-dev\n</code></pre>\n<p>由于 Babel 用于编译，Webpack 用于打包输出，两者各司其职，我们通过  <code>babel-loader</code>  打通他们的联系。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-loader --save-dev</pre></td></tr></table></figure><p>在上面都安装好相关库之后，接下来到动手环节，首先我们创建一个  <code>webpack</code>  文件夹，专门存放 webpack 相关配置，这里主要分为三个文件：</p>\n<ul>\n<li><code>webpack.base.js</code> ：基础公共配置</li>\n<li><code>webpack.main.dev.js</code> ：主进程开发环境配置</li>\n<li><code>webpack.render.dev.js</code> ：渲染进程开发环境配置</li>\n</ul>\n<h4 id=\"31-webpackbasejs\"><a class=\"anchor\" href=\"#31-webpackbasejs\">#</a> 3.1 webpack.base.js</h4>\n<p>我们先来创建  <code>webpack.base.js</code>  基础公共配置文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> CleanWebpackPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">'@src'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|jsx|ts|tsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，Webpack 在启动后会从配置的入口模块出发，找到所有依赖的模块， <code>resolve</code>  配置 Webpack 如何寻找模块所对应的文件。我们配置了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVleHRlbnNpb25z\">extensions</span>，表示在导入语句中没带文件后缀时，Webpack 会自动带上后缀去尝试访问文件是否存在。</p>\n<p>我们配置中，配置了  <code>extensions: ['.js', '.jsx', '.ts', '.tsx']</code> ，意味着当遇到  <code>import A from './A'</code>  时，会先寻找 A.js、找不到就去找  <code>A.jsx</code> ，按照规则找，最后还是找不到，就会报错。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVhbGlhcw==\">alias</span> 代表别名，因为我们经常写  <code>import A from '../../../../../A'</code>  这种导入路径，特别恶心，所以通过配置别名处理。关于 Loader，我们前边小节已介绍，它就是模块打包方案，上述代码即表示：当匹配到  <code>/\\.(js|jsx|ts|tsx)$/</code>  文件时，使用  <code>babel-loader</code>  去处理一下。</p>\n<h4 id=\"32-webpackmaindevjs\"><a class=\"anchor\" href=\"#32-webpackmaindevjs\">#</a> 3.2 webpack.main.dev.js</h4>\n<p>我们看看主进程的配置，新增  <code>webpack.main.dev.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> mainConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/main/electron.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  target<span class=\"token operator\">:</span> <span class=\"token string\">'electron-main'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'electron.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> webpackMerge<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> mainConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，我们定义入口文件为  <code>/app/main/electron.js</code> ，并且定义打包出来的文件目录为 dist，文件名为 electron.js。</p>\n<p>需要注意的一点是：<strong>由于 JS 的应用场景日益增长，从浏览器到 Node，运行在不同环境下的 JS 代码存在一些差异。target 配置项可以让 Webpack 构建出不同运行环境的代码</strong></p>\n<p>关于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3RhcmdldC8jdGFyZ2V0\">target 的可选项</span>，可从官网查阅，这里我们将其配置成  <code>electron-main</code> ，至于主进程的 plugins，我们定义了一些构建变量。最后通过 webpack-merge 合并导出一份完整的配置。</p>\n<h4 id=\"33-webpackrenderdevjs\"><a class=\"anchor\" href=\"#33-webpackrenderdevjs\">#</a> 3.3 webpack.render.dev.js</h4>\n<p>在说配置之前，我们先来创建一个渲染进程对应的代码文件夹。我们在  <code>app</code>  文件夹下新增一个名为  <code>renderer</code>  文件夹。</p>\n<p>回顾一下之前 Electron 部分是不是有一个  <code>index.html</code>  文件，我们我们将其移动到  <code>renderer</code>  文件夹下，并修改它</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>VisResumeMook<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>接着我们在  <code>renderer</code>  下创建一个 React 的  <code>app.jsx</code>  文件</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">可视化简历平台</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">这是 Electron + React </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们再来修改一下渲染进程的相关配置，新增  <code>webpack.render.dev.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> devConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 👇 对应渲染进程的 app.jsx 入口文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    index<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/app.jsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[hash].js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  target<span class=\"token operator\">:</span> <span class=\"token string\">'electron-renderer'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    contentBase<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//webpack-dev-server 启动时要指定 ip，不能直接通过 localhost 启动，不指定会报错</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">7001</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 启动端口为 7001 的服务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 👇 以此文件为模版，自动生成 HTML</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      template<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      filename<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      chunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> webpackMerge<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> devConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，以  <code>/app/renderer/app.jsx</code>  为入口，并配置了本地开发 devServer，通过  <code>HtmlWebpackPlugin</code>  自动生成一份以  <code>/app/renderer/index.html</code>  为模版的 HTML 文件。注意此时的 <strong>target</strong> 是针对 Electron 渲染进程。最后通过  <code>webpack-merge</code>  合并导出一份完整配置。</p>\n<h3 id=\"5-electron-与-react-结合起来\"><a class=\"anchor\" href=\"#5-electron-与-react-结合起来\">#</a> 5. Electron 与 React 结合起来</h3>\n<p>对于 Webpack 相关配置已经搭建完毕，我们来看看现在我们的文件目录都有哪些？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_src0.png\" alt=\"image.png\" /></p>\n<p>接下来我们让 Electron 和 React 结合起来，前面讲到，Electron 可以理解为页面添加了一个壳，由于我们将主进程中的  <code>index.html</code>  移到了渲染进程，所以我们需要修改一下  <code>electron.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @desc electron 主入口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 👉 还记得我们配置中通过 webpack.DefinePlugin 定义的构建变量吗</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 创建浏览器窗口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> mainWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    height<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    webPreferences<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      devTools<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      nodeIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 👇 看到了吗，在开发环境下，我们加载的是运行在 7001 端口的 React</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadURL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://127.0.0.1:7001</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadURL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">file://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>🎉 接着进入  <code>package.json</code>  文件中，修改一下启动脚本命令，添加渲染进程的启动方式</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"start:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config ./webpack/webpack.main.dev.js &amp;&amp; electron ./dist/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"start:render\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --config ./webpack/webpack.render.dev.js\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"6-跑起来\"><a class=\"anchor\" href=\"#6-跑起来\">#</a> 6. 跑起来</h3>\n<p>我们开两个终端，一个跑  <code>npm run start:render</code> ，另一个跑  <code>npm run start:main</code> ，看看结果</p>\n<h2 id=\"第三阶段引入更多技术点\"><a class=\"anchor\" href=\"#第三阶段引入更多技术点\">#</a> 第三阶段：引入更多技术点</h2>\n<p>接下来引入 TypeScript、ESLint、Prettier，让整个项目看起来更加丰富。</p>\n<h3 id=\"1-安装-typescript\"><a class=\"anchor\" href=\"#1-安装-typescript\">#</a> 1. 安装 TypeScript</h3>\n<blockquote>\n<p>关于 TS 的入门学习，我建议小伙伴们去看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3Mv\">官方文档</span>，结合项目去上手写 TS，项目中的 TS 不会有很多复杂难以理解的地方，写着写着，你会发现其实 TS 没那么难，如果你想提升 TS，也可以看看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGUtY2hhbGxlbmdlcy90eXBlLWNoYWxsZW5nZXM=\">type-challenges</span> 这个库</p>\n</blockquote>\n<p>先安装  <code>TypeScript</code></p>\n<pre><code>npm install typescript --save-dev \n</code></pre>\n<p>装完之后，<strong>我们将项目中的 js、jsx 文件都改造成 ts、tsx</strong></p>\n<p>由于我们将  <code>renderer/app.jsx</code>  作为入口文件，所以修改后，前往  <code>webpack.render.dev.js</code>  文件修改  <code>entry</code>  ，避免项目启动报异常</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 这里改成.tsx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  index<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/app.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时对于主进程  <code>main/electron.js</code>  也需要去  <code>webpack.main.dev.js</code>  修改一下  <code>entry</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 这里改成.ts</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/main/electron.ts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们在  <code>renderer</code>  文件夹下新增一个文件夹取名为 title，在此文件夹下新增 index.tsx 文件，让我们来写一下该组件，并定义组件的 Props</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们会发现，TS 提示错误，原来我们还没安装 React 对应的 TS 包，安装一下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-dom --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-redux --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-router-dom --save-dev</pre></td></tr></table></figure><p>装好之后，我们继续写组件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    text<span class=\"token punctuation\">,</span>styles</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> IProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div  style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们在 app.tsx 下引入此组件，看看是不是会有提示</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_ts_test.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fbc2f3e80874c10b95dd15bd7e973a4~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" /></p>\n<p>一切如我们的预期，这表示我们可以很愉快的使用 TS 开发了。</p>\n<h3 id=\"2-安装-eslint-prettier\"><a class=\"anchor\" href=\"#2-安装-eslint-prettier\">#</a> 2. 安装 ESLint + Prettier</h3>\n<p>我们看上面的  <code>&lt;Title /&gt;</code>  组件，看着有点膈应，好像不该换行的它换行了，该换行的没换行。我们总不能手动的去按回车、删空格吧？</p>\n<p>这时我们使用  <code>Prettier</code>  进行代码格式化，相比于 ESLint 中的代码格式规则，它更加专业。同时我们采用  <code>ESLint</code>  来统一代码风格，提高我们的代码质量。</p>\n<p>ESLint 将我们的代码解析成 AST，通过检测 AST 来判断代码是否符合我们设置的规则，往往不同公司团队会自定义一套自己的 ESLint 规范。</p>\n<p>我们先来安装一下  <code>Prettier</code>  和  <code>ESLint</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint@^7.26.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prettier@^2.3.0 --save-dev</pre></td></tr></table></figure><p>接着安装一些对应的插件信息，具体信息大家可去查询这些库都做了什么工作</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-alloy@^4.1.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-prettier@^8.3.0 --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-prettier@^3.4.0 --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react@^7.23.2 --save-dev</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks@^4.2.0 --save-dev</pre></td></tr></table></figure><p>可能有人会问，有 ESLint，是不是也有 TSLint，答案是：有。但我并不推荐。</p>\n<p>由于现在 ESLint 的生态比较完善，而 TSLint 首先是不能使用 ESLint 社区的一些成果，其次 TSLint 在生态上也相对较差，所以 TSLint 的作者已经宣布会逐渐放弃 TSLint ，而去支持 typescript-eslint-parser ，同时 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMDU1Mw==\">Typescript 团队也宣布会将自己开发的 lint 工具从 tslint 迁移到 typescript-eslint-parser</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser@^4.24.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/eslint-plugin@^4.24.0 --save-dev</pre></td></tr></table></figure><p>安装好之后，我们在项目根目录下创建  <code>tsconfig.json</code> 、 <code>.prettierrc</code>  、  <code>.eslintrc.js</code></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2016\"</span> <span class=\"token comment\">/* 编译结果使用的版本标准: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span> <span class=\"token comment\">/* 编译结果使用的模块化标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">\"DOM\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* 在写 ts 的时候支持的环境，默认是浏览器环境。如需要支持 node，安装 @type/node */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span> <span class=\"token comment\">/* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* 编译结果把 ts 的注释移除掉 */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* es6 的模块化和非 es6 的模块化标准互通 */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"@src/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./app/renderer/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//webpack 配置别名，但在 TS 中会报红找不到，所以 tslint 也需要配置</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里需要排除掉 dist 目录和 node_modules 目录，不进行检查</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"app/**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"app/**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"app/**/*.d.ts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>// .prettierrc\n&#123;\n  &quot;eslintIntegration&quot;: true,\n  &quot;printWidth&quot;: 120,\n  &quot;tabWidth&quot;: 2,\n  &quot;useTabs&quot;: false,\n  &quot;singleQuote&quot;: true,\n  &quot;endOfLine&quot;: &quot;auto&quot;\n&#125;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// .eslintrc.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'alloy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'alloy/react'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'alloy/typescript'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'plugin:prettier/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这里填入你的项目需要的全局变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    __dirname<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'no-undefined'</span><span class=\"token operator\">:</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'no-debugger'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    complexity<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> max<span class=\"token operator\">:</span> <span class=\"token number\">99</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 这里填入你的项目需要的个性化配置，比如：</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// @fixable 一个缩进必须用两个空格替代</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    indent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        SwitchCase<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        flatTernaryExpressions<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// @fixable jsx 的 children 缩进必须为两个空格</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string\">'react/jsx-indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// @fixable jsx 的 props 缩进必须为两个空格</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">'react/jsx-indent-props'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">'react/no-string-refs'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不要使用 ref</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">'no-template-curly-in-string'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在 string 里面不要出现模板符号</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/prefer-optional-chain'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/explicit-member-accessibility'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/no-duplicate-imports'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">'react/no-unsafe'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/no-invalid-this'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">'react/jsx-key'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string\">'no-undef'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们再去看前边写的代码，会发现一堆报红，我们只需  <code>Ctrl+S</code>  保存一下即可。</p>\n<blockquote>\n<p>⚠️ 提示：如果发现未生效，可以重新打开一下 vscode</p>\n</blockquote>\n<h3 id=\"3-css-modules-问题\"><a class=\"anchor\" href=\"#3-css-modules-问题\">#</a> 3. CSS Modules 问题</h3>\n<p>大家都知道，CSS 的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。为了解决此情况，CSS Modules 的解决方案就是：使用一个独一无二的 class 的名字，不会与其他选择器重名。所以我们一般会看到，很多类命都是  <code>hash 值 + 组件名</code> ，下面说说如何在 Webpack 中配置 CSS Module</p>\n<p>在此项目中，我们采用  <code>less</code>  进行样式相关的编写，安装它</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> less@3.12.2 --save-dev</pre></td></tr></table></figure><p>我们进入 Webpack 官网 Loader 配置，看看它提供处理样式类型的打包方案，关于这些 Loader 的具体介绍可在官网查阅</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install less<span class=\"token operator\">-</span>loader@<span class=\"token number\">6.2</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install postcss<span class=\"token operator\">-</span>loader@<span class=\"token number\">3.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install css<span class=\"token operator\">-</span>loader@<span class=\"token number\">3.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 👇 将我们的样式通过 style 标签插入到页面 head 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npm install style<span class=\"token operator\">-</span>loader@<span class=\"token number\">2.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>前面我们说了，Loader 就是模块打包方案，我们去  <code>webpack.render.dev.js</code>  中添加配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.render.dev.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> devConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 👇 追加这段代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                localIdentName<span class=\"token operator\">:</span> <span class=\"token string\">'[name]__[local]__[hash:base64:5]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们在  <code>&lt;Title /&gt;</code>  组件下编写一个  <code>index.less</code>  文件，看其样式否如我们所愿？</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>lessStyle<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      这是一个title组件的测试</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行，看看是否可行？发现还是不行，我们看看报什么错？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_err0.png\" alt=\"image.png\" /></p>\n<p>解决此问题需要我们在项目根目录下创建  <code>postcss.config.js</code> ，添加一下配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    autoprefixer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      overrideBrowserslist<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'> 0.5%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'last 5 versions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同时因为引入了一个 plugins，所以需要安装一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> autoprefixer@9.0.0 --save-dev</pre></td></tr></table></figure><p>再次运行，看看效果，我们可以看到，类名的格式为 <code>[组件名]_[当前类名]_[哈希值取5位]</code> ，从而形成独一无二的 class 名字，不会与其他选择器重名。至此我们完成了样式相关的配置处理。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_less_test.png\" alt=\"image.png\" /></p>\n<h3 id=\"4-stylename\"><a class=\"anchor\" href=\"#4-stylename\">#</a> 4. styleName</h3>\n<p>在 React 中 CSS Modules 会使得我们写代码都要通过 styles 的形式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index/less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>lessStyle<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特别繁琐，所以通过插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dhanVzL3JlYWN0LWNzcy1tb2R1bGVz\">react-css-modules</span> 实现 styleName 的形式，但是每次都需要写成这样</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> CSSModules <span class=\"token keyword\">from</span> <span class=\"token string\">'react-css-modules'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Title</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"cell\"</span><span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">CSSModules</span><span class=\"token punctuation\">(</span>Title<span class=\"token punctuation\">,</span> lessStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外还有一个插件，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dhanVzL2JhYmVsLXBsdWdpbi1yZWFjdC1jc3MtbW9kdWxlcw==\">babel-plugin-react-css-modules</span>，这个插件更加好用</p>\n<p>为了改造成这种形式，我们进行配置修改，我们先安装插件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 👇 不安装会在使用 styleName 时 TS 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install @types<span class=\"token operator\">/</span>react<span class=\"token operator\">-</span>css<span class=\"token operator\">-</span>modules@<span class=\"token number\">4.6</span><span class=\"token number\">.2</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 👇 让我们更好的使用 CSS Module</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>npm install babel<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>css<span class=\"token operator\">-</span>modules@<span class=\"token number\">5.2</span><span class=\"token number\">.6</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npm install postcss<span class=\"token operator\">-</span>less@<span class=\"token number\">3.1</span><span class=\"token number\">.4</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>然后在  <code>babel.config.js</code>  文件中添加一下配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token comment\">// css-modules</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">'babel-plugin-react-css-modules'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        webpackHotModuleReloading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        generateScopedName<span class=\"token operator\">:</span> <span class=\"token string\">'[name]__[local]__[hash:base64:5]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        autoResolveMultipleImports<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        filetypes<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token string\">'.less'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> syntax<span class=\"token operator\">:</span> <span class=\"token string\">'postcss-less'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后再看看组件的代码是怎样的</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> text<span class=\"token punctuation\">,</span> styles <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> IProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-文件类型报错\"><a class=\"anchor\" href=\"#6-文件类型报错\">#</a> 6. 文件类型报错</h3>\n<p>当我们在代码中引入一张照片时，打包会发生错误</p>\n<p>官方提供了一种专门处理此类型的方案： <code>file-loader</code> ，我们安装一下这个 loader</p>\n<pre><code>npm install file-loader --save-dev\n</code></pre>\n<p>修改一下  <code>webpack.base.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jpg|png|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[hash].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              outputPath<span class=\"token operator\">:</span> <span class=\"token string\">'images/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-文件部分类型-ts-报红\"><a class=\"anchor\" href=\"#5-文件部分类型-ts-报红\">#</a> 5. 文件部分类型 TS 报红</h3>\n<p>我们此刻引入一张图片，TS 会报错，说找不到模块</p>\n<p>这时候我们只需要在  <code>app/renderer</code>  目录下，新增一个  <code>global.d.ts</code>  文件即可</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// global.d.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.jpg'</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> jpg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> jpg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>⚠️ 请注意：如果你在根目录下新增 global.d.ts 文件，请确保你的 tsconfig.json 中  <code>include</code>  字段是能匹配到 global.d.ts 文件</p>\n</blockquote>\n<p>关于 global.d.ts 可配置的东西可太多了，一般来说，我们  <code>window.pdk</code>  肯定会被 ts 报红，说 window 上并无此属性，这时候我们又不想改成  <code>(window as any).pdk</code> ，那么我们可以扩展 Window 的类型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里用于扩充 window 对象上的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  pdk<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        }
    ]
}