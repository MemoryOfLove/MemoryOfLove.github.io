{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog",
    "subtitle": "",
    "icon": "http://jluyeyu.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://jluyeyu.com",
    "items": [
        {
            "id": "http://jluyeyu.com/project/onlineResume/5.%20Redux%E5%AD%98%E5%82%A8/",
            "url": "http://jluyeyu.com/project/onlineResume/5.%20Redux%E5%AD%98%E5%82%A8/",
            "title": "5. 如何进行数据存储和组件间通信",
            "date_published": "2022-01-10T03:30:52.000Z",
            "content_html": "<h2 id=\"5-如何进行数据存储和组件间通信\"><a class=\"anchor\" href=\"#5-如何进行数据存储和组件间通信\">#</a> 5. 如何进行数据存储和组件间通信</h2>\n<p>上一节，我们已将首页开发完毕，接下来将要进入简历制作，但在简历制作之前，我们先将数据存储模块加以实现。让我们思考篇一个问题点：</p>\n<p>简历平台最重要的是什么：数据！重启应用，你是否期望应用能恢复你上次的数据信息？</p>\n<h3 id=\"实时性数据存储\"><a class=\"anchor\" href=\"#实时性数据存储\">#</a> 实时性数据存储</h3>\n<p>我们通过 redux 进行数据状态管理，为了避免繁琐的操作，采用 rc-redux-model 进行辅助开发。</p>\n<h4 id=\"1-安装\"><a class=\"anchor\" href=\"#1-安装\">#</a> 1. 安装</h4>\n<p>让我们先来安装一下</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install redux</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install rc<span class=\"token operator\">-</span>redux<span class=\"token operator\">-</span>model <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token comment\">// 👉 安装这个库，简便 redux 操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install redux<span class=\"token operator\">-</span>logger <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token comment\">// 👉 安装这个库，让我们在控制台看到 redux 数据</span></pre></td></tr></table></figure><p>安装完成后，我们在  <code>app/renderer</code>  文件夹下，新增一个名为  <code>store</code>  的文件夹，存放着所有 redux model 相关的代码文件。在里面新增一个文件名为  <code>index.ts</code> ，该文件主要引入我们所有的 model，经过 redux 的 API，导出一颗完整的数据状态树。（看下面代码注释）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/store/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> RcReduxModel <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-redux-model'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 👇 引入我们写好的 model</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> globalModel <span class=\"token keyword\">from</span> <span class=\"token string\">'./globalModel'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 👇 这里只需要调用 RcReduxModel 实例化一下得到最后的 reduxModel</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> reduxModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RcReduxModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>globalModel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 👇 无侵入式的使用 Redux，即使你写最原始的 reducer 也照样支持</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> reducerList <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducerList<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>reduxModel<span class=\"token punctuation\">.</span>thunk<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面我们引入了  <code>./globalModel</code> ，那么我们在 store 文件夹下，追加一份  <code>globalModel.ts</code>  文件。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/store/globalModel.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> globalModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  namespace<span class=\"token operator\">:</span> <span class=\"token string\">'globalModel'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  openSeamlessImmutable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    appName<span class=\"token operator\">:</span> <span class=\"token string\">'简历应用平台'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> globalModel<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1N1Z2FyVHVyYm9TL3JjLXJlZHV4LW1vZGVs\">rc-redux-model</span> 官方文档介绍：在 model 中，<strong>action 以及 reducer 我们均可忽略不写</strong>。只需要定义好 state 值即可。</p>\n<p>到目前为止，我们已经将 redux 文件信息创建好了，接下来在项目中使用，不过在使用前，先捋一下 react、redux、react-redux 的关系。</p>\n<h4 id=\"2-为什么要用-react-redux\"><a class=\"anchor\" href=\"#2-为什么要用-react-redux\">#</a> 2. 为什么要用 react-redux</h4>\n<blockquote>\n<p>当多个组件需要进行数据共享，交换双方的数据，<strong>唯一的解决方案就是：提升 state</strong>，将原本兄弟组件的 state 提升到共有的父组件中管理，由父组件向下传递数据，子组件进行处理，通过回调函数回传修改 state，这样的 state 一定程度上是响应式的。redux 也是这样的原理！</p>\n</blockquote>\n<p>要知道 redux 是不区分技术栈的，意味着你也可以在 vue 中使用，只是我们经常搭配套餐使用 react。如上述的代码，我们通过  <code>createStore</code>  导出了数据状态树后，在组件中，我们如何得到数据值呢？只能通过 redux 提供的  <code>store.getState()</code>  API，意味着我们每个组件都需要写:（下面为伪代码）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store/index.ts'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 👇 每个组件都需要这么写才能拿到数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另一种方式是你可以在根组件获取 store，通过 Props 层层传递，如果你中间组件断层，没传递 Props，就会导致下层组件获取不到值，为了在使用上简洁方便，我们才引入了 react-redux 库。</p>\n<p>让我们安装一下</p>\n<pre><code>npm install react-redux\n</code></pre>\n<h4 id=\"3-在组件中使用-redux\"><a class=\"anchor\" href=\"#3-在组件中使用-redux\">#</a> 3. 在组件中使用 redux</h4>\n<p>当你捋清楚三者关系并安装 react-redux 之后，接下来在组件中使用 redux 不再是困难的事。我们将经过  <code>createStore</code>  生成的 store 挂载到 react-redux 提供的 Provider 组件上，这个 Provider 的工作任务是：通过 context 向子组件提供 store。</p>\n<p>多说无益，上手试试，我们进入根组件 app.tsx 将其进行修改</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 👇 引入 store</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 引入 Provider</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>刷新一下页面，没有发生报错，也不会出现白屏，接下来我们在首页入口模块获取一下 redux 中的数据吧～ 上面我们已经给了一个初始值， <code>appName=&quot;简历应用平台&quot;</code> ，我们修改一下首页模块的 index.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useSelector <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> appName <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>globalModel<span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appName = '</span><span class=\"token punctuation\">,</span> appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>刷新一下页面，打开控制台，看看打印的数据，很完美符合我们的预期。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test.png\" alt=\"image.png\" /></p>\n<h4 id=\"4-在组件中修改-redux\"><a class=\"anchor\" href=\"#4-在组件中修改-redux\">#</a> 4. 在组件中修改 redux</h4>\n<p>既然可以获取 redux 数据值，自然而然地，我们也需要修改 redux 的值。在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL2NvcmUtY29uY2VwdHM=\"> redux 官方文档</span>中，很明确提到：<strong>唯一改变 state 的方法就是触发 action</strong>。</p>\n<p>通过 dispatch 发起一个 action 就能修改 state 值，但仔细一想，每个 state，都对应一个 action，在简历这种多 state 值下，这是不是很麻烦呢？得益于 rc-redux-model， <code>它提供一个 action API，只需记住一个 action，就能修改 state 的任意值</code> 。接下来我们来修改一下</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useSelector<span class=\"token punctuation\">,</span> useDispatch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> appName <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>globalModel<span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3s 后修改...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'globalModel/setStore'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          key<span class=\"token operator\">:</span> <span class=\"token string\">'appName'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          values<span class=\"token operator\">:</span> <span class=\"token string\">'visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appName = '</span><span class=\"token punctuation\">,</span> appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>appName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解读一下上面代码，其中 useEffect 是<a href=\"\"> react</a> 的 hook, 后期会增加相关内容。</p>\n<p>我们在生命周期  <code>didMount</code>  中写了一段延时方法，在 3s 之后修改 appName，紧接着对 appName 进行监听，当它修改时，打印当前最新的值。小伙伴们猜测一下，3s 后数据是不是会发生改变呢？刷新页面，打开控制台，发现一切如我们预期一致。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test1.png\" alt=\"image.png\" /></p>\n<p>至此，我们能够已经能够项目中使用 redux 进行实时性数据的存储，更多的使用在接下来的实战过程中会讲到。</p>\n<h3 id=\"持久性数据存储\"><a class=\"anchor\" href=\"#持久性数据存储\">#</a> 持久性数据存储</h3>\n<p>我们采用文件形式进行持久性数据存储，最重要的就是对文件的增删改查，接下来，我们实现一套文件操作方法，需要支持的方法有：</p>\n<ul>\n<li>文件的创建</li>\n<li>文件的读取</li>\n<li>文件的更新</li>\n<li>文件的删除</li>\n<li>文件是否存在</li>\n<li>文件是否可读</li>\n<li>文件是否可写</li>\n</ul>\n<p>得益于渲染进程也能使用 NodeJS 模块，我们可以通过 fs 进行文件相关的操作。通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxMC54L2RvY3MvYXBpL2ZzLmh0bWwjZnNfZnNfcmVhZGZpbGVfcGF0aF9vcHRpb25zX2NhbGxiYWNr\">Node 官网</span> 我们发现大部分的函数方法都是通过回调函数的形式，将数据值返回，这样会造成  <code>回调地狱</code>  的形式。</p>\n<p>仔细一想，通过 Promise 方式是否对我们更加友好？但好像改造成 Promise 又增加我们的工作量，有没有现成的 API 可用呢？在 Node 10 之后，提供了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxMC54L2RvY3MvYXBpL2ZzLmh0bWwjZnNfZnNfcHJvbWlzZXNfYXBp\">fs Promises API</span> ，这里我们通过官方提供的 API 即可实现 Promise 操作 fs 模块。</p>\n<p>下面通过实战进行开发，这是一个通用的工具方法，并且期望对文件的操作都进行统一管理，我们可以在  <code>renderer/common/utils</code>  中，新增一个名为 file.ts 的文件</p>\n<p>接下来我们封装一下 file.ts 的实现</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/file.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> fs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> promises <span class=\"token keyword\">as</span> fsPromiseAPIs <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> fileAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  read<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">:</span> BufferEncoding<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> encoding<span class=\"token operator\">:</span> encoding <span class=\"token operator\">||</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  write<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">:</span> BufferEncoding<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> encoding<span class=\"token operator\">:</span> encoding <span class=\"token operator\">||</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function-variable function\">rename</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> newPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>oldPath<span class=\"token punctuation\">,</span> newPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function-variable function\">delete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function-variable function\">hasFile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">F_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function-variable function\">canWrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">W_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function-variable function\">canRead</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> fsPromiseAPIs<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">R_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> fileAction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来我们在简历模块处，读取一下文件内容，修改一下  <code>container/resume/index.tsx</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/resume/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> fileAction <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/file'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 👇 读取一下当前这个文件内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  fileAction<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是简历模块<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Resume<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将项目跑起来，进入到简历路由页面下，看看控制台输出什么？</p>\n<p>它读取的是项目根路径下的 index.tsx，但是在不同的系统中可能会出现偏差。为了抹平偏差需要获得相对路径。</p>\n<p><strong>electron 提供一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJGZG9jcyUyRmFwaSUyRmFwcCUyM2FwcA==\">app</span> 模块</strong>，该模块提供了一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJGZG9jcyUyRmFwaSUyRmFwcCUyM2FwcGdldGFwcHBhdGg=\">getAppPath()</span> 方法，用于获取当前应用程序在本机中的目录路径，但有个问题在于，该 app 模块仅能在主进程中使用，而我们期望在渲染进程中得到此目录路径，只能通过 IPC 进程间通信获取。</p>\n<h4 id=\"ipc-获取应用程序所在的目录路径\"><a class=\"anchor\" href=\"#ipc-获取应用程序所在的目录路径\">#</a> IPC 获取应用程序所在的目录路径</h4>\n<p>在 utils 目录下，新增一个文件名为：appPath.ts，该文件用于获取项目的绝对路径。我们通过 Promise 来写一下它：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/appPath.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 监听主进程与渲染进程通信</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ipcRenderer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取项目绝对路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">reject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'项目路径错误'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着我们在主进程中，通过 app 模块获取项目路径，通过 ipcMain 回复渲染进程，修改一下  <code>app/main/electron.ts</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> ipcMain <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ROOT_PATH</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 👇 监听渲染进程发的消息并回复</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  event<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROOT_PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们再回过头去简历模块处，稍微修改</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> fileAction <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/file'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getAppPath <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/appPath'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'应用程序的目录路径为: '</span><span class=\"token punctuation\">,</span> rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件读取，内容数据为: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fileAction</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>rootPath<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">app/renderer/container/resume/index.tsx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是简历模块<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Resume<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_redux_test2.png\" alt=\"读取文件测试\" /></p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/javascript/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E5%88%9D%E8%AF%86/",
            "url": "http://jluyeyu.com/javascript/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E5%88%9D%E8%AF%86/",
            "title": "抽象语法树ast初识",
            "date_published": "2022-01-08T11:35:52.000Z",
            "content_html": "<h2 id=\"为什么要了解ast\"><a class=\"anchor\" href=\"#为什么要了解ast\">#</a> 为什么要了解 AST</h2>\n<p>如果你想了解 js 编译执行的原理，那么你就得了解 AST，目前前端常用的一些插件或者工具，比如说 javascript 转译、代码压缩、css 预处理器、elint、pretiier 等功能的实现，都是建立在 AST 的基础之上。</p>\n<p>在线解析 ast 的网站:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc3RleHBsb3Jlci5uZXQv\">https://astexplorer.net/</span></p>\n<h2 id=\"javascript-编译执行流程\"><a class=\"anchor\" href=\"#javascript-编译执行流程\">#</a> JavaScript 编译执行流程</h2>\n<p>js 执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成 token，之后再通过语法分析生成 AST（Abstract Syntax Tree），最后生成机器码执行。</p>\n<h3 id=\"词法分析\"><a class=\"anchor\" href=\"#词法分析\">#</a> 词法分析</h3>\n<p>词法分析，也称之为扫描（scanner），简单来说就是调用 next () 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的 Token。Token 是一个不可分割的最小单元，例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。词法分析器里，每个关键字是一个 Token ，每个标识符是一个 Token，每个操作符是一个 Token，每个标点符号也都是一个 Token。除此之外，还会过滤掉源程序中的注释和空白字符（换行符、空格、制表符等）。<br />\n最终，整个代码将被分割进一个 tokens 列表（或者说一维数组）。</p>\n<pre><code>n * n;\n\n[\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;*&quot;,  loc: &#123; ... &#125; &#125;,\n  &#123; type: &#123; ... &#125;, value: &quot;n&quot;,  loc: &#123; ... &#125; &#125;,\n  ...\n]\n</code></pre>\n<p>每一个 type 有一组属性来描述该令牌：</p>\n<pre><code>&#123;\n  type: &#123;\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  &#125;,\n  ...\n&#125;\n</code></pre>\n<h3 id=\"语法分析\"><a class=\"anchor\" href=\"#语法分析\">#</a> 语法分析</h3>\n<p>语法分析会将词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。</p>\n<h3 id=\"什么是ast抽象语法树\"><a class=\"anchor\" href=\"#什么是ast抽象语法树\">#</a> 什么是 AST（抽象语法树）</h3>\n<p>抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<pre><code>function square(n) &#123;\n  return n * n;\n&#125;\n</code></pre>\n<p>上面的程序可以被表示成如下的一棵树：</p>\n<pre><code>- FunctionDeclaration:\n  - id:\n    - Identifier:\n      - name: square\n  - params [1]\n    - Identifier\n      - name: n\n  - body:\n    - BlockStatement\n      - body [1]\n        - ReturnStatement\n          - argument\n            - Binaryion\n              - operator: *\n              - left\n                - Identifier\n                  - name: n\n              - right\n                - Identifier\n                  - name: n\n</code></pre>\n<p>或是如下所示的 JavaScript Object（对象）：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;square&quot;\n  &#125;,\n  params: [&#123;\n    type: &quot;Identifier&quot;,\n    name: &quot;n&quot;\n  &#125;],\n  body: &#123;\n    type: &quot;BlockStatement&quot;,\n    body: [&#123;\n      type: &quot;ReturnStatement&quot;,\n      argument: &#123;\n        type: &quot;BinaryExpression&quot;,\n        operator: &quot;*&quot;,\n        left: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;,\n        right: &#123;\n          type: &quot;Identifier&quot;,\n          name: &quot;n&quot;\n        &#125;\n      &#125;\n    &#125;]\n  &#125;\n&#125;\n</code></pre>\n<p>你会留意到 AST 的每一层都拥有相同的结构：</p>\n<pre><code>&#123;\n  type: &quot;FunctionDeclaration&quot;,\n  id: &#123;...&#125;,\n  params: [...],\n  body: &#123;...&#125;\n&#125;\n&#123;\n  type: &quot;Identifier&quot;,\n  name: ...\n&#125;\n&#123;\n  type: &quot;BinaryExpression&quot;,\n  operator: ...,\n  left: &#123;...&#125;,\n  right: &#123;...&#125;\n&#125;\n</code></pre>\n<p>这样的每一层结构也被叫做 <strong>节点（Node）</strong>。 一个 AST 可以由单一的节点或是成百上千个节点构成。 它们组合在一起可以描述用于静态分析的程序语法。</p>\n<p>每一个节点都有如下所示的接口（Interface）：</p>\n<pre><code>interface Node &#123;\n  type: string;\n&#125;\n</code></pre>\n<p>字符串形式的  <code>type</code>  字段表示节点的类型（如： “ <code>FunctionDeclaration</code> “，” <code>Identifier</code> “，或 “ <code>BinaryExpression</code> “）。 每一种类型的节点定义了一些附加属性用来进一步描述该节点类型。</p>\n<h3 id=\"ast-节点介绍\"><a class=\"anchor\" href=\"#ast-节点介绍\">#</a> AST 节点介绍</h3>\n<h4 id=\"identifier\"><a class=\"anchor\" href=\"#identifier\">#</a> Identifier</h4>\n<p>标识符，就是我们写 JS 时自定义的名称，如变量名，函数名，属性名，都归为标识符。相应的接口是这样的：</p>\n<pre><code>interface Identifier &lt;: Expression, Pattern &#123;\n    type: &quot;Identifier&quot;;\n    name: string;\n&#125;\n</code></pre>\n<p>一个标识符可能是一个表达式，或者是解构的模式（ES6 中的解构语法）。我们等会会看到  <code>Expression</code>  和  <code>Pattern</code>  相关的内容的。</p>\n<h4 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a> Literal</h4>\n<p>字面量，这里不是指  <code>[]</code>  或者  <code>&#123;&#125;</code>  这些，而是本身语义就代表了一个值的字面量，如  <code>1</code> ， <code>“hello”</code> ,  <code>true</code>  这些，还有正则表达式（有一个扩展的 Node 来表示正则表达式），如  <code>/\\d?/</code> 。我们看一下文档的定义：</p>\n<pre><code>interface Literal &lt;: Expression &#123;\n    type: &quot;Literal&quot;;\n    value: string | boolean | null | number | RegExp;\n&#125;\n</code></pre>\n<p>这里即对应了字面量的值，我们可以看出字面量值的类型，字符串，布尔，数值，null 和正则。</p>\n<h4 id=\"regexpliteral\"><a class=\"anchor\" href=\"#regexpliteral\">#</a> RegExpLiteral</h4>\n<p>这个针对正则字面量的，为了更好地来解析正则表达式的内容，添加多一个  <code>regex</code>  字段，里边会包括正则本身，以及正则的  <code>flags</code> 。</p>\n<pre><code>interface RegExpLiteral &lt;: Literal &#123;\n  regex: &#123;\n    pattern: string;\n    flags: string;\n  &#125;;\n&#125;\n</code></pre>\n<h4 id=\"programs\"><a class=\"anchor\" href=\"#programs\">#</a> Programs</h4>\n<p>一般这个是作为跟节点的，即代表了一棵完整的程序代码树。</p>\n<pre><code>interface Program &lt;: Node &#123;\n    type: &quot;Program&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<p><code>body</code>  属性是一个数组，包含了多个  <code>Statement</code> （即语句）节点。</p>\n<h4 id=\"functions\"><a class=\"anchor\" href=\"#functions\">#</a> Functions</h4>\n<p>函数声明或者函数表达式节点。</p>\n<pre><code>interface Function &lt;: Node &#123;\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p><code>id</code>  是函数名， <code>params</code>  属性是一个数组，表示函数的参数。 <code>body</code>  是一个块语句。<br />\n有一个值得留意的点是，你在测试过程中，是不会找到  <code>type: &quot;Function&quot;</code>  的节点的，但是你可以找到  <code>type: &quot;FunctionDeclaration&quot;</code>  和  <code>type: &quot;FunctionExpression&quot;</code> ，因为函数要么以声明语句出现，要么以函数表达式出现，都是节点类型的组合类型，后边会再提及  <code>FunctionDeclaration</code>  和  <code>FunctionExpression</code>  的相关内容。<br />\n这让人感觉这个文档规划得蛮细致的，函数名，参数和函数块是属于函数部分的内容，而声明或者表达式则有它自己需要的东西。</p>\n<h4 id=\"statement\"><a class=\"anchor\" href=\"#statement\">#</a> Statement</h4>\n<p>语句节点没什么特别的，它只是一个节点，一种区分，但是语句有很多种，下边会详述。</p>\n<pre><code>interface Statement &lt;: Node &#123; &#125;ExpressionStatement\n</code></pre>\n<h4 id=\"expressionstatement\"><a class=\"anchor\" href=\"#expressionstatement\">#</a> ExpressionStatement</h4>\n<p>表达式语句节点， <code>a = a + 1</code>  或者  <code>a++</code>  里边会有一个  <code>expression</code>  属性指向一个表达式节点对象（后边会提及表达式）。</p>\n<pre><code>interface ExpressionStatement &lt;: Statement &#123;\n    type: &quot;ExpressionStatement&quot;;\n    expression: Expression;\n&#125;\n</code></pre>\n<h4 id=\"blockstatement\"><a class=\"anchor\" href=\"#blockstatement\">#</a> BlockStatement</h4>\n<p>块语句节点，举个例子： <code>if (...) &#123; // 这里是块语句的内容 &#125;</code> ，块里边可以包含多个其他的语句，所以有一个  <code>body</code>  属性，是一个数组，表示了块里边的多个语句。</p>\n<pre><code>interface BlockStatement &lt;: Statement &#123;\n    type: &quot;BlockStatement&quot;;\n    body: [ Statement ];\n&#125;\n</code></pre>\n<h4 id=\"emptystatement\"><a class=\"anchor\" href=\"#emptystatement\">#</a> EmptyStatement</h4>\n<p>一个空的语句节点，没有执行任何有用的代码，例如一个单独的分号；</p>\n<pre><code>interface EmptyStatement &lt;: Statement &#123;\n    type: &quot;EmptyStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"debuggerstatement\"><a class=\"anchor\" href=\"#debuggerstatement\">#</a> DebuggerStatement</h4>\n<p><code>debugger</code> ，就是表示这个，没有其他了。</p>\n<pre><code>interface DebuggerStatement &lt;: Statement &#123;\n    type: &quot;DebuggerStatement&quot;;\n&#125;\n</code></pre>\n<h4 id=\"withstatement\"><a class=\"anchor\" href=\"#withstatement\">#</a> WithStatement</h4>\n<p><code>with</code>  语句节点，里边有两个特别的属性， <code>object</code>  表示  <code>with</code>  要使用的那个对象（可以是一个表达式）， <code>body</code>  则是对应  <code>with</code>  后边要执行的语句，一般会是一个块语句。</p>\n<pre><code>interface WithStatement &lt;: Statement &#123;\n    type: &quot;WithStatement&quot;;\n    object: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<p>下边是控制流的语句：</p>\n<h4 id=\"returnstatement\"><a class=\"anchor\" href=\"#returnstatement\">#</a> ReturnStatement</h4>\n<p>返回语句节点， <code>argument</code>  属性是一个表达式，代表返回的内容。</p>\n<pre><code>interface ReturnStatement &lt;: Statement &#123;\n    type: &quot;ReturnStatement&quot;;\n    argument: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"labeledstatement\"><a class=\"anchor\" href=\"#labeledstatement\">#</a> LabeledStatement</h4>\n<p><code>label</code>  语句，平时可能会比较少接触到，举个例子：</p>\n<pre><code>loop: for(let i = 0; i &lt; len; i++) &#123;\n    // ...\n    for (let j = 0; j &lt; min; j++) &#123;\n        // ...\n        break loop;\n    &#125;\n&#125;\n</code></pre>\n<p>这里的  <code>loop</code>  就是一个  <code>label</code>  了，我们可以在循环嵌套中使用  <code>break loop</code>  来指定跳出哪个循环。所以这里的  <code>label</code>  语句指的就是  <code>loop: ...</code>  这个。<br />\n一个  <code>label</code>  语句节点会有两个属性，一个  <code>label</code>  属性表示  <code>label</code>  的名称，另外一个  <code>body</code>  属性指向对应的语句，通常是一个循环语句或者  <code>switch</code>  语句。</p>\n<pre><code>interface LabeledStatement &lt;: Statement &#123;\n    type: &quot;LabeledStatement&quot;;\n    label: Identifier;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"breakstatement\"><a class=\"anchor\" href=\"#breakstatement\">#</a> BreakStatement</h4>\n<p><code>break</code>  语句节点，会有一个  <code>label</code>  属性表示需要的  <code>label</code>  名称，当不需要  <code>label</code>  的时候（通常都不需要），便是  <code>null</code> 。</p>\n<pre><code>interface BreakStatement &lt;: Statement &#123;\n    type: &quot;BreakStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<h4 id=\"continuestatement\"><a class=\"anchor\" href=\"#continuestatement\">#</a> ContinueStatement</h4>\n<p><code>continue</code>  语句节点，和  <code>break</code>  类似。</p>\n<pre><code>interface ContinueStatement &lt;: Statement &#123;\n    type: &quot;ContinueStatement&quot;;\n    label: Identifier | null;\n&#125;\n</code></pre>\n<p>下边是条件语句：</p>\n<h4 id=\"ifstatement\"><a class=\"anchor\" href=\"#ifstatement\">#</a> IfStatement</h4>\n<p><code>if</code>  语句节点，很常见，会带有三个属性，test 属性表示  <code>if (...)</code>  括号中的表达式。<br />\n <code>consequent</code>  属性是表示条件为  <code>true</code>  时的执行语句，通常会是一个块语句。<br />\n <code>alternate</code>  属性则是用来表示  <code>else</code>  后跟随的语句节点，通常也会是块语句，但也可以又是一个  <code>if</code>  语句节点，即类似这样的结构： <code>if (a) &#123; //... &#125; else if (b) &#123; // ... &#125;</code> 。 <code>alternate</code>  当然也可以为  <code>null</code> 。</p>\n<pre><code>interface IfStatement &lt;: Statement &#123;\n    type: &quot;IfStatement&quot;;\n    test: Expression;\n    consequent: Statement;\n    alternate: Statement | null;\n&#125;\n</code></pre>\n<h4 id=\"switchstatement\"><a class=\"anchor\" href=\"#switchstatement\">#</a> SwitchStatement</h4>\n<p><code>switch</code>  语句节点，有两个属性， <code>discriminant</code>  属性表示  <code>switch</code>  语句后紧随的表达式，通常会是一个变量， <code>cases</code>  属性是一个  <code>case</code>  节点的数组，用来表示各个  <code>case</code>  语句。</p>\n<pre><code>interface SwitchStatement &lt;: Statement &#123;\n    type: &quot;SwitchStatement&quot;;\n    discriminant: Expression;\n    cases: [ SwitchCase ];\n&#125;\n</code></pre>\n<h4 id=\"switchcase\"><a class=\"anchor\" href=\"#switchcase\">#</a> SwitchCase</h4>\n<p><code>switch</code>  的  <code>case</code>  节点。 <code>test</code>  属性代表这个  <code>case</code>  的判断表达式， <code>consequent</code>  则是这个  <code>case</code>  的执行语句。<br />\n当  <code>test</code>  属性是  <code>null</code>  时，则是表示  <code>default</code>  这个  <code>case</code>  节点。</p>\n<pre><code>interface SwitchCase &lt;: Node &#123;\n    type: &quot;SwitchCase&quot;;\n    test: Expression | null;\n    consequent: [ Statement ];\n&#125;\n</code></pre>\n<p>下边是异常相关的语句：</p>\n<h4 id=\"throwstatement\"><a class=\"anchor\" href=\"#throwstatement\">#</a> ThrowStatement</h4>\n<p><code>throw</code>  语句节点， <code>argument</code>  属性用以表示  <code>throw</code>  后边紧跟的表达式。</p>\n<pre><code>interface ThrowStatement &lt;: Statement &#123;\n    type: &quot;ThrowStatement&quot;;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"trystatement\"><a class=\"anchor\" href=\"#trystatement\">#</a> TryStatement</h4>\n<p><code>try</code>  语句节点， <code>block</code>  属性表示  <code>try</code>  的执行语句，通常是一个块语句。<br />\n <code>hanlder</code>  属性是指  <code>catch</code>  节点， <code>finalizer</code>  是指  <code>finally</code>  语句节点，当  <code>hanlder</code>  为  <code>null</code>  时， <code>finalizer</code>  必须是一个块语句节点。</p>\n<pre><code>interface TryStatement &lt;: Statement &#123;\n    type: &quot;TryStatement&quot;;\n    block: BlockStatement;\n    handler: CatchClause | null;\n    finalizer: BlockStatement | null;\n&#125;\n</code></pre>\n<h4 id=\"catchclause\"><a class=\"anchor\" href=\"#catchclause\">#</a> CatchClause</h4>\n<p><code>catch</code>  节点， <code>param</code>  用以表示  <code>catch</code>  后的参数， <code>body</code>  则表示  <code>catch</code>  后的执行语句，通常是一个块语句。</p>\n<pre><code>interface CatchClause &lt;: Node &#123;\n    type: &quot;CatchClause&quot;;\n    param: Pattern;\n    body: BlockStatement;\n&#125;\n</code></pre>\n<p>下边是循环语句：</p>\n<h4 id=\"whilestatement\"><a class=\"anchor\" href=\"#whilestatement\">#</a> WhileStatement</h4>\n<p><code>while</code>  语句节点， <code>test</code>  表示括号中的表达式， <code>body</code>  是表示要循环执行的语句。</p>\n<pre><code>interface WhileStatement &lt;: Statement &#123;\n    type: &quot;WhileStatement&quot;;\n    test: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"dowhilestatement\"><a class=\"anchor\" href=\"#dowhilestatement\">#</a> DoWhileStatement</h4>\n<p><code>do/while</code>  语句节点，和  <code>while</code>  语句类似。</p>\n<pre><code>interface DoWhileStatement &lt;: Statement &#123;\n    type: &quot;DoWhileStatement&quot;;\n    body: Statement;\n    test: Expression;\n&#125;\n</code></pre>\n<h4 id=\"forstatement\"><a class=\"anchor\" href=\"#forstatement\">#</a> ForStatement</h4>\n<p><code>for</code>  循环语句节点，属性  <code>init/test/update</code>  分别表示了  <code>for</code>  语句括号中的三个表达式，初始化值，循环判断条件，每次循环执行的变量更新语句（ <code>init</code>  可以是变量声明或者表达式）。这三个属性都可以为  <code>null</code> ，即  <code>for(;;)&#123;&#125;</code> 。 <code>body</code>  属性用以表示要循环执行的语句。</p>\n<pre><code>interface ForStatement &lt;: Statement &#123;\n    type: &quot;ForStatement&quot;;\n    init: VariableDeclaration | Expression | null;\n    test: Expression | null;\n    update: Expression | null;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"forinstatement\"><a class=\"anchor\" href=\"#forinstatement\">#</a> ForInStatement</h4>\n<p><code>for/in</code>  语句节点， <code>left</code>  和  <code>right</code>  属性分别表示在  <code>in</code>  关键词左右的语句（左侧可以是一个变量声明或者表达式）。 <code>body</code>  依旧是表示要循环执行的语句。</p>\n<pre><code>interface ForInStatement &lt;: Statement &#123;\n    type: &quot;ForInStatement&quot;;\n    left: VariableDeclaration |  Pattern;\n    right: Expression;\n    body: Statement;\n&#125;\n</code></pre>\n<h4 id=\"declarations\"><a class=\"anchor\" href=\"#declarations\">#</a> Declarations</h4>\n<p>声明语句节点，同样也是语句，只是一个类型的细化。下边会介绍各种声明语句类型。</p>\n<pre><code>interface Declaration &lt;: Statement &#123; &#125;\n</code></pre>\n<h4 id=\"functiondeclaration\"><a class=\"anchor\" href=\"#functiondeclaration\">#</a> FunctionDeclaration</h4>\n<p>函数声明，和之前提到的  <code>Function</code>  不同的是， <code>id</code>  不能为  <code>null</code> 。</p>\n<pre><code>interface FunctionDeclaration &lt;: Function, Declaration &#123;\n    type: &quot;FunctionDeclaration&quot;;\n    id: Identifier;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclaration\"><a class=\"anchor\" href=\"#variabledeclaration\">#</a> VariableDeclaration</h4>\n<p>变量声明， <code>kind</code>  属性表示是什么类型的声明，因为 ES6 引入了  <code>const/let</code> 。 <code>declarations</code>  表示声明的多个描述，因为我们可以这样： <code>let a = 1, b = 2;</code> 。</p>\n<pre><code>interface VariableDeclaration &lt;: Declaration &#123;\n    type: &quot;VariableDeclaration&quot;;\n    declarations: [ VariableDeclarator ];\n    kind: &quot;var&quot;;\n&#125;\n</code></pre>\n<h4 id=\"variabledeclarator\"><a class=\"anchor\" href=\"#variabledeclarator\">#</a> VariableDeclarator</h4>\n<p>变量声明的描述， <code>id</code>  表示变量名称节点， <code>init</code>  表示初始值的表达式，可以为  <code>null</code> 。</p>\n<pre><code>interface VariableDeclarator &lt;: Node &#123;\n    type: &quot;VariableDeclarator&quot;;\n    id: Pattern;\n    init: Expression | null;\n&#125;\n</code></pre>\n<h4 id=\"expressions\"><a class=\"anchor\" href=\"#expressions\">#</a> Expressions</h4>\n<p>表达式节点。</p>\n<pre><code>interface Expression &lt;: Node &#123; &#125;\n</code></pre>\n<h4 id=\"thisexpression\"><a class=\"anchor\" href=\"#thisexpression\">#</a> ThisExpression</h4>\n<p>表示  <code>this</code> 。</p>\n<pre><code>interface ThisExpression &lt;: Expression &#123;\n    type: &quot;ThisExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"arrayexpression\"><a class=\"anchor\" href=\"#arrayexpression\">#</a> ArrayExpression</h4>\n<p>数组表达式节点， <code>elements</code>  属性是一个数组，表示数组的多个元素，每一个元素都是一个表达式节点。</p>\n<pre><code>interface ArrayExpression &lt;: Expression &#123;\n    type: &quot;ArrayExpression&quot;;\n    elements: [ Expression | null ];\n&#125;\n</code></pre>\n<h4 id=\"objectexpression\"><a class=\"anchor\" href=\"#objectexpression\">#</a> ObjectExpression</h4>\n<p>对象表达式节点， <code>property</code>  属性是一个数组，表示对象的每一个键值对，每一个元素都是一个属性节点。</p>\n<pre><code>interface ObjectExpression &lt;: Expression &#123;\n    type: &quot;ObjectExpression&quot;;\n    properties: [ Property ];\n&#125;\n</code></pre>\n<h4 id=\"property\"><a class=\"anchor\" href=\"#property\">#</a> Property</h4>\n<p>对象表达式中的属性节点。 <code>key</code>  表示键， <code>value</code>  表示值，由于 ES5 语法中有  <code>get/set</code>  的存在，所以有一个  <code>kind</code>  属性，用来表示是普通的初始化，或者是  <code>get/set</code> 。</p>\n<pre><code>interface Property &lt;: Node &#123;\n    type: &quot;Property&quot;;\n    key: Literal | Identifier;\n    value: Expression;\n    kind: &quot;init&quot; | &quot;get&quot; | &quot;set&quot;;\n&#125;\n</code></pre>\n<h4 id=\"functionexpression\"><a class=\"anchor\" href=\"#functionexpression\">#</a> FunctionExpression</h4>\n<p>函数表达式节点。</p>\n<pre><code>interface FunctionExpression &lt;: Function, Expression &#123;\n    type: &quot;FunctionExpression&quot;;\n&#125;\n</code></pre>\n<p>下边是一元运算符相关的表达式部分：</p>\n<h4 id=\"unaryexpression\"><a class=\"anchor\" href=\"#unaryexpression\">#</a> UnaryExpression</h4>\n<p>一元运算表达式节点（ <code>++/--</code>  是  <code>update</code>  运算符，不在这个范畴内）， <code>operator</code>  表示运算符， <code>prefix</code>  表示是否为前缀运算符。 <code>argument</code>  是要执行运算的表达式。</p>\n<pre><code>interface UnaryExpression &lt;: Expression &#123;\n    type: &quot;UnaryExpression&quot;;\n    operator: UnaryOperator;\n    prefix: boolean;\n    argument: Expression;\n&#125;\n</code></pre>\n<h4 id=\"unaryoperator\"><a class=\"anchor\" href=\"#unaryoperator\">#</a> UnaryOperator</h4>\n<p>一元运算符，枚举类型，所有值如下：</p>\n<pre><code>enum UnaryOperator &#123;\n    &quot;-&quot; | &quot;+&quot; | &quot;!&quot; | &quot;~&quot; | &quot;typeof&quot; | &quot;void&quot; | &quot;delete&quot;\n&#125;\n</code></pre>\n<h4 id=\"updateexpression\"><a class=\"anchor\" href=\"#updateexpression\">#</a> UpdateExpression</h4>\n<p><code>update</code>  运算表达式节点，即  <code>++/--</code> ，和一元运算符类似，只是  <code>operator</code>  指向的节点对象类型不同，这里是  <code>update</code>  运算符。</p>\n<pre><code>interface UpdateExpression &lt;: Expression &#123;\n    type: &quot;UpdateExpression&quot;;\n    operator: UpdateOperator;\n    argument: Expression;\n    prefix: boolean;\n&#125;\n</code></pre>\n<h4 id=\"updateoperator\"><a class=\"anchor\" href=\"#updateoperator\">#</a> UpdateOperator</h4>\n<p><code>update</code>  运算符，值为  <code>++</code>  或  <code>--</code> ，配合  <code>update</code>  表达式节点的  <code>prefix</code>  属性来表示前后。</p>\n<pre><code>enum UpdateOperator &#123;\n    &quot;++&quot; | &quot;--&quot;\n&#125;\n</code></pre>\n<p>下边是二元运算符相关的表达式部分：</p>\n<h4 id=\"binaryexpression\"><a class=\"anchor\" href=\"#binaryexpression\">#</a> BinaryExpression</h4>\n<p>二元运算表达式节点， <code>left</code>  和  <code>right</code>  表示运算符左右的两个表达式， <code>operator</code>  表示一个二元运算符。</p>\n<pre><code>interface BinaryExpression &lt;: Expression &#123;\n    type: &quot;BinaryExpression&quot;;\n    operator: BinaryOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"binaryoperator\"><a class=\"anchor\" href=\"#binaryoperator\">#</a> BinaryOperator</h4>\n<p>二元运算符，所有值如下：</p>\n<pre><code>enum BinaryOperator &#123;\n    &quot;==&quot; | &quot;!=&quot; | &quot;===&quot; | &quot;!==&quot;\n         | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot;\n         | &quot;&lt;&lt;&quot; | &quot;&gt;&gt;&quot; | &quot;&gt;&gt;&gt;&quot;\n         | &quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; | &quot;%&quot;\n         | &quot;|&quot; | &quot;^&quot; | &quot;&amp;&quot; | &quot;in&quot;\n         | &quot;instanceof&quot;\n&#125;\n</code></pre>\n<h4 id=\"assignmentexpression\"><a class=\"anchor\" href=\"#assignmentexpression\">#</a> AssignmentExpression</h4>\n<p>赋值表达式节点， <code>operator</code>  属性表示一个赋值运算符， <code>left</code>  和  <code>right</code>  是赋值运算符左右的表达式。</p>\n<pre><code>interface AssignmentExpression &lt;: Expression &#123;\n    type: &quot;AssignmentExpression&quot;;\n    operator: AssignmentOperator;\n    left: Pattern | Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"assignmentoperator\"><a class=\"anchor\" href=\"#assignmentoperator\">#</a> AssignmentOperator</h4>\n<p>赋值运算符，所有值如下：（常用的并不多）</p>\n<pre><code>enum AssignmentOperator &#123;\n    &quot;=&quot; | &quot;+=&quot; | &quot;-=&quot; | &quot;*=&quot; | &quot;/=&quot; | &quot;%=&quot;\n        | &quot;&lt;&lt;=&quot; | &quot;&gt;&gt;=&quot; | &quot;&gt;&gt;&gt;=&quot;\n        | &quot;|=&quot; | &quot;^=&quot; | &quot;&amp;=&quot;\n&#125;\n</code></pre>\n<h4 id=\"logicalexpression\"><a class=\"anchor\" href=\"#logicalexpression\">#</a> LogicalExpression</h4>\n<p>逻辑运算表达式节点，和赋值或者二元运算类型，只不过  <code>operator</code>  是逻辑运算符类型。</p>\n<pre><code>interface LogicalExpression &lt;: Expression &#123;\n    type: &quot;LogicalExpression&quot;;\n    operator: LogicalOperator;\n    left: Expression;\n    right: Expression;\n&#125;\n</code></pre>\n<h4 id=\"logicaloperator\"><a class=\"anchor\" href=\"#logicaloperator\">#</a> LogicalOperator</h4>\n<p>逻辑运算符，两种值，即 <code>与</code>   <code>或</code> 。</p>\n<pre><code>enum LogicalOperator &#123;\n    &quot;||&quot; | &quot;&amp;&amp;&quot;\n&#125;\n</code></pre>\n<h4 id=\"memberexpression\"><a class=\"anchor\" href=\"#memberexpression\">#</a> MemberExpression</h4>\n<p>成员表达式节点，即表示引用对象成员的语句， <code>object</code>  是引用对象的表达式节点， <code>property</code>  是表示属性名称， <code>computed</code>  如果为  <code>false</code> ，是表示  <code>.</code>  来引用成员， <code>property</code>  应该为一个  <code>Identifier</code>  节点，如果  <code>computed</code>  属性为  <code>true</code> ，则是  <code>[]</code>  来进行引用，即  <code>property</code>  是一个  <code>Expression</code>  节点，名称是表达式的结果值。</p>\n<pre><code>interface MemberExpression &lt;: Expression, Pattern &#123;\n    type: &quot;MemberExpression&quot;;\n    object: Expression;\n    property: Expression;\n    computed: boolean;\n&#125;\n</code></pre>\n<p>下边是其他的一些表达式：</p>\n<h4 id=\"conditionalexpression\"><a class=\"anchor\" href=\"#conditionalexpression\">#</a> ConditionalExpression</h4>\n<p>条件表达式，通常我们称之为三元运算表达式，即  <code>boolean ? true : false</code> 。属性参考条件语句。</p>\n<pre><code>interface ConditionalExpression &lt;: Expression &#123;\n    type: &quot;ConditionalExpression&quot;;\n    test: Expression;\n    alternate: Expression;\n    consequent: Expression;\n&#125;\n</code></pre>\n<h4 id=\"callexpression\"><a class=\"anchor\" href=\"#callexpression\">#</a> CallExpression</h4>\n<p>函数调用表达式，即表示了  <code>func(1, 2)</code>  这一类型的语句。callee 属性是一个表达式节点，表示函数，arguments 是一个数组，元素是表达式节点，表示函数参数列表。</p>\n<pre><code>interface CallExpression &lt;: Expression &#123;\n    type: &quot;CallExpression&quot;;\n    callee: Expression;\n    arguments: [ Expression ];\n&#125;\n</code></pre>\n<h4 id=\"newexpression\"><a class=\"anchor\" href=\"#newexpression\">#</a> NewExpression</h4>\n<p><code>new</code>  表达式。</p>\n<pre><code>interface NewExpression &lt;: CallExpression &#123;\n    type: &quot;NewExpression&quot;;\n&#125;\n</code></pre>\n<h4 id=\"sequenceexpression\"><a class=\"anchor\" href=\"#sequenceexpression\">#</a> SequenceExpression</h4>\n<p>这个就是逗号运算符构建的表达式（不知道确切的名称）， <code>expressions</code>  属性为一个数组，即表示构成整个表达式，被逗号分割的多个表达式。</p>\n<pre><code>interface SequenceExpression &lt;: Expression &#123;\n    type: &quot;SequenceExpression&quot;;\n    expressions: [ Expression ];\n&#125;\n</code></pre>\n<p><em>参考链接：</em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phbWllYnVpbGRzL2JhYmVsLWhhbmRib29rL2Jsb2IvbWFzdGVyL3RyYW5zbGF0aW9ucy96aC1IYW5zL3BsdWdpbi1oYW5kYm9vay5tZA==\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvZGVMaXR0bGVQcmluY2UvYmxvZy9pc3N1ZXMvMTk=\">https://github.com/CodeLittlePrince/blog/issues/19</span></em><br />\n<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ODI0MjU0MDJlOTU4YTEyOTkyNmZjYjQ=\">https://juejin.im/post/582425402e958a129926fcb4</span></em></p>\n",
            "tags": [
                "javascript",
                "javascript"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/4.%20%E9%A6%96%E9%A1%B5%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "url": "http://jluyeyu.com/project/onlineResume/4.%20%E9%A6%96%E9%A1%B5%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "title": "4. 首页框架搭建",
            "date_published": "2022-01-08T05:50:52.000Z",
            "content_html": "<h3 id=\"路由组件开发\"><a class=\"anchor\" href=\"#路由组件开发\">#</a> 路由组件开发</h3>\n<p>我们进入到  <code>app/renderer</code>  文件夹下，会发现这里有搭建环境时写的  <code>&lt;Title /&gt;</code>  组件，我们将其进行删除（已无用），我们用脚趾头都能知道，之后会存在诸多模块入口，所以我们在 renderer 下，创建一个路由文件  <code>router.tsx</code> ，管理所有的模块入口，先来编写一下 router.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/router.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 精确路由匹配 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 重定向到首页 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建一个文件夹  <code>container</code> ，该文件夹存放着所有模块的代码文件，此时我们添加一个新文件夹，取名为： <code>root</code> ，表明这是首页模块，并创建入口文件 index.tsx 和 index.less</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/container/root/index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>我是首页<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回到根组件  <code>app.tsx</code> ，将路由组件  <code>router.tsx </code> 引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/app.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>大功告成，运行一下，看看效果如何</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run start:main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> run start:render</pre></td></tr></table></figure><p>不出意外，渲染进程窗口很顺利的展示了我们想要的页面效果，此时看看我们的文件结构</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%20%E9%A6%96%E9%A1%B50.0.1.png\" alt=\"image.png\" /></p>\n<h3 id=\"首页开发\"><a class=\"anchor\" href=\"#首页开发\">#</a> 首页开发</h3>\n<p>通过效果图，我们可以将首页拆分成：</p>\n<ul>\n<li>logo 图片</li>\n<li>title 应用名称</li>\n<li>tips 应用简介特性</li>\n<li>entry 模块入口</li>\n<li>copyright 应用版权</li>\n</ul>\n<p>我们先将 logo 图引入，通过 CSS 实现布局效果.</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页模块的入口文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.jpg'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Logo<span class=\"token punctuation\">&#125;</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>onlineResume<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"tips\"</span><span class=\"token operator\">></span>一个模板简历制作平台<span class=\"token punctuation\">,</span> 让你的简历更加出众 <span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"action\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>index<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"copyright\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token operator\">&lt;</span>p styleName<span class=\"token operator\">=</span><span class=\"token string\">\"copyright\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              Copyright © <span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> All Rights Reserved<span class=\"token punctuation\">.</span> Copyright By pengdaokuan</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>CSS 如下</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #27292c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>8vh <span class=\"token operator\">+</span> 60px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token selector\">img</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 112px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 112px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 36px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token selector\">.tips</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token selector\">.theme</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 24px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token selector\">.action</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%20%E9%A6%96%E9%A1%B50.0.2.png\" alt=\"首页界面\" /></p>\n<p>刷新一下页面，可以发现我们距离成功只剩一步之遥。接下来我们来实现一下基本点击跳转等功能。</p>\n<h3 id=\"模块入口跳转功能\"><a class=\"anchor\" href=\"#模块入口跳转功能\">#</a> 模块入口跳转功能</h3>\n<p>在 React 中我们可以通过 react-router 这个强大路由库进行页面之间的跳转，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。</p>\n<p>在环境搭建篇中我们已经安装了 react-router，由于我们采用 Hooks 的写法，react-router 提供了一个 API 叫做  <code>useHistory</code> ，接下来我们就通过它，来实现我们的跳转功能吧～</p>\n<p>回到我们上面的代码，我们为其添加一个  <code>onClick</code>  事件</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页模块的入口文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 👇 通过 history.push 进行跳转</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">===</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'跳转到简历页面'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/resume'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入到 github '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>action<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>index<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">styleName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onRouterToLink</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              </span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Root<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下上面代码，我们为每个模块 div 都添加  <code>onClick</code>  事件，点击模块后，进行条件判断，从而做对应的操作。 刷新一下页面，点击 <code>简历</code>  ，发现页面空白，为什么呢？回过头想想，我们上边的  <code>router.tsx</code>  路由组件，<strong>不就只写了一个首页模块的路由吗</strong>？我们回去添加一个新路由。</p>\n<p>在  <code>container</code>  下添加 resume 文件夹，并新增入口 index.tsx，我们简单写一下简历入口代码。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                我是简历页面</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时修改 router.tsx 文件，将其引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/router.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/resume'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 精确路由匹配 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 👇 添加简历模块入口路由 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/resume\"</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Resume <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 重定向到首页 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>再点击一下  <code>简历</code> ，此时可成功跳转。页面内的路由切换尚能解决，窗口外的页面跳转无从下手。我们期望点击 <code>介绍</code> 、 <code>源码</code> 处，能够脱离应用窗口，在我们默认浏览器中打开页面，进入到 github 中。</p>\n<p><strong>electron 提供一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvc2hlbGwjc2hlbGw=\">shell</span> 模块，它模块提供与桌面集成相关的功能</strong>。并且此模块也能用于渲染进程中，下面我们通过此模块，实现此功能（👇 部分代码省略）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> shell <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">!==</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 通过 shell 模块，打开默认浏览器，进入 github</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/resume'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到目前为止，我们首页的基本功能已经开发完成。</p>\n<h3 id=\"思考代码优化\"><a class=\"anchor\" href=\"#思考代码优化\">#</a> 🤔 思考代码优化</h3>\n<p>上面我们是以简单粗暴形式，将页面和逻辑撸了出来，但代码简直 “不堪入目”，作为一个有追求、有代码洁癖的工程师，简直无法容忍，接下来我们对它进行美化。</p>\n<h4 id=\"1-webpack-alias-别名\"><a class=\"anchor\" href=\"#1-webpack-alias-别名\">#</a> 1. webpack alias 别名</h4>\n<p>我们回过头看，当我们引入图片时，路径要些一连串的  <code>../../../../</code> ，有没有想骂 x 的冲动，好在 webpack 提供 alias 配置，让我们能够配置别名，接下来我们上手试试。</p>\n<p>我们的图片都放在项目根路径下的 assets 中，我们给它加个别名，修改  <code>webpack.base.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 👇 添加别名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">'@assets'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'assets/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">'@src'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>添加之后，我们将文件的引入改成下面这种形式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 未修改前</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../../assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改后</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Logo <span class=\"token keyword\">from</span> <span class=\"token string\">'@assets/logo.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 未修改前</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'./container/resume'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 修改后</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> Root <span class=\"token keyword\">from</span> <span class=\"token string\">'@src/container/root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> Resume <span class=\"token keyword\">from</span> <span class=\"token string\">'@src/container/resume'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重跑一下项目（运行 npm run start:render）发现没啥问题，完美</p>\n<h4 id=\"2-模块入口的常量定义与类型约束\"><a class=\"anchor\" href=\"#2-模块入口的常量定义与类型约束\">#</a> 2. 模块入口的常量定义与类型约束</h4>\n<p>上面我们写了一段 “粗暴” 代码，我们能否将其进行抽离，思考一下， <code>路由常量数据</code> 是一个只会在首页用到的数据还是其他模块也会用到的数据呢？</p>\n<p>其他模块是否也会通过  <code>history.push</code>  方式跳转到其他模块页面，如果是，我们将来在其他模块也要写一段 “粗暴” 代码？还可能出现的问题是：我们期望数据一致，当往往出于疏忽，两边数据不一致。</p>\n<p>那么我们将其抽离成一个路由常量文件，进行统一维护，是不是更好呢？</p>\n<p>我们在  <code>app/renderer</code>  文件夹下新增一个文件夹，取名为：common，顾名思义，这里存放的是项目中所有公共通用的代码文件，在里边我们创建一个 constants 文件夹，表示这里维护所有常量数据。</p>\n<p>我们在 contants 下维护一份路由专用的文件，取名为  <code>router.ts</code> ，我们来写一下该文件：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模块路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  resume<span class=\"token operator\">:</span> <span class=\"token string\">'/resume'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER_KEY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  resume<span class=\"token operator\">:</span> <span class=\"token string\">'resume'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 入口模块，TS 定义类型必须为 TSRouter.Item</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token string\">'intro'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'介绍'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">ROUTER_KEY</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/PDKSophia/visResumeMook'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token string\">'源码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>既然我们使用了 Typescript，那么我们先小试牛刀一下，上面定义的  <code>ROUTER_ENTRY</code>  我们将它的类型约束为  <code>TSRouter.Item</code> ，我们在 common 文件夹下新增一个名为 types 文件夹，表示此文件存放着应用中用到的类型定义。我们来新增一个用于路由的 router.d.ts 文件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// router.d.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 路由类型约束</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> TSRouter <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @description 路由跳转链接</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @description 关键词</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @description 文本</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>紧接着我们在 webpack 中配置一下此文件夹的别名</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">'@common'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer/common'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们进行改造，首先先来修改一下路由组件 router.tsx</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//router.tsx 路由组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 👇 引入路由常量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token constant\">ROUTER</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">&#125;</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Root <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">&#125;</span> exact<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token operator\">&lt;</span>Resume <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HashRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们在首页入口 index.tsx 文件进行改造</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首页入口 index.tsx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROUTER_KEY</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/constants/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在方法调用上</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token string\">'简历'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在遍历上</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"action\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ROUTER_ENTRY</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>router<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onRouterToLink</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>router<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"3-utils-方法抽离\"><a class=\"anchor\" href=\"#3-utils-方法抽离\">#</a> 3. utils 方法抽离</h4>\n<p>虽然我们代码优化了一部分，但还是存在一些小问题的，比如  <code>router.text !== '简历'</code>  这个条件判断就有些突兀了，我们回到问题本质，这里进行判断原因是：如果这个 url 是外部可访问的链接，则通过 shell 模块打开浏览器，如果是页面之间跳转，则跳转到对应的路由页面。</p>\n<p>所以问题聚焦在，如何判断 url 是不是可访问的外部链接？这很简单，我们写一个方法，判断 url 是不是 http 或 https 开头，该方法返回 boolean 值，下面我们来实现此方法。</p>\n<p>首先在 common 下新增一个 utils 文件夹，并新增 router.ts，表示这是路由相关的工具处理函数，在里面实现我们的函数方法：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// renderer/common/utils/router.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @desc 判断是否属于外部连接</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;string&#125; url - 链接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isHttpOrHttpsUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> regRule <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(http|https):\\/\\/([\\w.]+\\/?)\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> regRule<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们进行修改的条件判断</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isHttpOrHttpsUrl <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@common/utils/router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在方法调用上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRouterToLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> TSRouter<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isHttpOrHttpsUrl</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      shell<span class=\"token punctuation\">.</span><span class=\"token function\">openExternal</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"4-页面存在空白间隙\"><a class=\"anchor\" href=\"#4-页面存在空白间隙\">#</a> 4. 页面存在空白间隙</h4>\n<p>最懒惰的解决方式是，在 index.html 中，修改一下样式</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>VisResumeMook<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>至此，我们的首页终于开发完毕，并且经过思考，不断优化，将项目的整个文件结构进行丰富。一张图回顾一下我们现在的文件结构</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_src1.png\" alt=\"image.png\" /></p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/3.%20%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "http://jluyeyu.com/project/onlineResume/3.%20%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "3. 项目环境搭建",
            "date_published": "2022-01-08T00:50:52.000Z",
            "content_html": "<h2 id=\"项目环境搭建\"><a class=\"anchor\" href=\"#项目环境搭建\">#</a> 项目环境搭建</h2>\n<p>​\t前两小节通过对 Electron 和 Webpack 的介绍的简单介绍，我们对其有了一定的了解，接下来这一小节主要是搭建基本的开发环境。通过一步步的动手实践，并将 TypeScript、ESLint、Prettier 等引入，最后搭起我们的 React 项目。</p>\n<h3 id=\"第一阶段electron-搭建\"><a class=\"anchor\" href=\"#第一阶段electron-搭建\">#</a> 第一阶段：Electron 搭建</h3>\n<p>官方对于应用搭建有详细的文档说明，下面基于官方文档，讲解一下 Electron 的搭建</p>\n<h3 id=\"1-安装-node-环境\"><a class=\"anchor\" href=\"#1-安装-node-环境\">#</a> 1. 安装 Node 环境</h3>\n<p>在搭建 Electron 应用前，请先确保 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">Node.js</span> 已经安装，接下来在终端输入命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p>这两个命令应输出了 Node.js 和 npm 的版本信息。 如果这两个命令都执行成功，那就接着往下走</p>\n<h3 id=\"2-安装-electron\"><a class=\"anchor\" href=\"#2-安装-electron\">#</a> 2. 安装 Electron</h3>\n<p>我们创建一个新文件夹，名为  <code>onlineResume</code> ，进入文件夹并安装 Electron</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> onlineResume</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> onlineResume</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> electron@11.1.1</pre></td></tr></table></figure><h3 id=\"3-基本框架结构\"><a class=\"anchor\" href=\"#3-基本框架结构\">#</a> 3. 基本框架结构</h3>\n<p>前面说了，Electron 是基于 Chromium + Node.js 开发的，也就是说 Electron 本质上就是一个 Node.js 应用。这意味着 Electron 应用程序的起点将是一个 package.json 文件。</p>\n<p>我们创建一个  <code>package.json</code>  文件，并且创建主进程脚本  <code>electron.ts</code> ，该脚本就是应用程序的入口。为了区分主进程模块和渲染进程模块，我以文件夹形式进行区分。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── onlineResume</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│ ├── app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│ │ ├── main      <span class=\"token comment\">// 主进程模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│ │ │    ├── electron<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│ │ │    └── index<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│ │ ├── renderer  <span class=\"token comment\">// 渲染进程模块</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│ │ └──</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│ ├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│ └──</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>└──</pre></td></tr></table></figure><h3 id=\"4-编写-packagejson\"><a class=\"anchor\" href=\"#4-编写-packagejson\">#</a> 4. 编写 package.json</h3>\n<p>编写一下我们的 package.json 配置。我们将应用程序的入口文件配置为主进程脚本</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onlineResume\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"简历制作\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./app/main/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"start:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron ./app/main/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"install:electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ELECTRON_MIRROR=https://cdn.npm.taobao.org/dist/electron/ npm install electron\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^11.1.1\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-定义-html\"><a class=\"anchor\" href=\"#5-定义-html\">#</a> 5. 定义 html</h3>\n<p>我们编写创建一个 HTML，等会加载此页面</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>onlineResume<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>简历平台应用搭建起来啦！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"6-编写主进程\"><a class=\"anchor\" href=\"#6-编写主进程\">#</a> 6. 编写主进程</h3>\n<p>在主进程脚本中，通过  <code>BrowserWindow</code>  创建浏览器窗口（也就是一个渲染进程），你可以将其看成浏览器的一个 Tab。请注意  <code>BrowserWindow</code>  还有一个配置参数叫做 webPreferences，我们需要将其选项中的  <code>nodeIntegration</code>  设置为 true，这样我们才能在渲染进程中就能使用 node。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @desc electron 主入口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 创建浏览器窗口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> mainWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    height<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    webPreferences<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      nodeIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 注入 node 模块</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7-启动应用程序\"><a class=\"anchor\" href=\"#7-启动应用程序\">#</a> 7. 启动应用程序</h3>\n<p>最后我们执行  <code>npm run start:main</code> ，就能看到我们搭建的简历应用啦～</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/electron%200.0.1.png\" alt=\"Electron启动测试\" /></p>\n<h2 id=\"第二阶段react-搭建\"><a class=\"anchor\" href=\"#第二阶段react-搭建\">#</a> 第二阶段：React 搭建</h2>\n<h3 id=\"1-安装-react\"><a class=\"anchor\" href=\"#1-安装-react\">#</a> 1. 安装 React</h3>\n<p>我们打开终端，此时先安装  <code>React</code> ，并且安装它相应的兄弟姐妹</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react@17.0.2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react-router@5.2.0 react-router-dom@5.2.0 react-dom@17.0.2</pre></td></tr></table></figure><h3 id=\"2-安装-babel\"><a class=\"anchor\" href=\"#2-安装-babel\">#</a> 2. 安装 Babel</h3>\n<p>接着安装一下  <code>Babel</code> ，它是 JS 编译器，能将 ES6 代码转成 ES5，让我们使用最近的语言特性，而不需要担心兼容性的问题。关于  <code>install</code>  的库，接下来会讲其作用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/polyfill@7.12.1 --save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/core@7.14.3 @babel/cli@7.14.3 --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/preset-env@7.14.2 @babel/preset-react@7.13.13 @babel/preset-typescript@7.13.0 --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/plugin-transform-runtime@7.14.3 --save-dev</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/plugin-transform-modules-commonjs@7.14.0 --save-dev</pre></td></tr></table></figure><p>安装完成之后，根据 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vdXNhZ2Ujb3ZlcnZpZXc=\">Babel 官网</span>的教程，我们创建  <code>babel.config.js</code> ，配置一下我们常用的插件 plugins 和 预设值 presets</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 根据配置的目标浏览器或者运行环境，选择对应的语法包，从而将代码进行转换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 react 语法包，让我们可以使用 React ES6 Class Component 的写法，支持 JSX、TSX 语法格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 https://github.com/babel/babel/issues/10570</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 官方提供的插件，作用是减少冗余的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string\">'@babel/plugin-transform-modules-commonjs'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👉 将 ECMAScript modules 转成 CommonJS.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        allowTopLevelThis<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        loose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-安装-webpack\"><a class=\"anchor\" href=\"#3-安装-webpack\">#</a> 3. 安装 Webpack</h3>\n<p>我们安装一下  <code>Webpack</code> ，新版本可能会有一些区别。为了省事可以指定版本。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack@4.44.1 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-cli@3.3.12 --save-dev</pre></td></tr></table></figure><p>我们期望监听文件的变化，能够自动刷新网页，做到实时预览，而不是改动一个字母，一个文字都需要重新打包。业界较为成熟的解决方案是通过： <code>webpack-dev-server</code>  插件，OK，我们安装它。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-dev-server@3.11.2 --save-dev</pre></td></tr></table></figure><p>对于主进程和渲染进程来讲，webpack 的配置是会存在差异的。比如渲染进程可能需要 less-loader、htmlWebpackPlugins 等 “专属” 配置，而这些配置对于主进程来讲，是无用的。</p>\n<p>存在差异的同时又会有相同点，比如 alias 别名配置等，当我们不采用 webpack-merge 时，会导致每份配置会存在重复的 “配置” 代码。其次在 dev 和 prod 环境下，配置会存在一些小差别，这时我们代码中会充斥着一些三元运算符来判断环境。<strong>最后的结果为每一份配置的可读性相对较差</strong>。</p>\n<p>为此我们通过 webpack-merge 插件进行处理</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-merge --save-dev</pre></td></tr></table></figure><p>我们不想每次打包都需要手动修改 HTML 中的文件引用，并且期望采用自己写的 HTML 文件为模版，生成打包之后的入口 HTML，为此我们采用  <code>html-webpack-plugin</code>  插件进行处理。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install html<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin@<span class=\"token number\">4.3</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>因为每次打包的文件会不同，我们需要先删除之前的 dist 文件，再重新打包，为此我们可以通过  <code>clean-webpack-plugin</code>  进行解决</p>\n<pre><code>npm install clean-webpack-plugin --save-dev\n</code></pre>\n<p>由于 Babel 用于编译，Webpack 用于打包输出，两者各司其职，我们通过  <code>babel-loader</code>  打通他们的联系。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-loader --save-dev</pre></td></tr></table></figure><p>在上面都安装好相关库之后，接下来到动手环节，首先我们创建一个  <code>webpack</code>  文件夹，专门存放 webpack 相关配置，这里主要分为三个文件：</p>\n<ul>\n<li><code>webpack.base.js</code> ：基础公共配置</li>\n<li><code>webpack.main.dev.js</code> ：主进程开发环境配置</li>\n<li><code>webpack.render.dev.js</code> ：渲染进程开发环境配置</li>\n</ul>\n<h4 id=\"31-webpackbasejs\"><a class=\"anchor\" href=\"#31-webpackbasejs\">#</a> 3.1 webpack.base.js</h4>\n<p>我们先来创建  <code>webpack.base.js</code>  基础公共配置文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> CleanWebpackPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">'@src'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app/renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|jsx|ts|tsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，Webpack 在启动后会从配置的入口模块出发，找到所有依赖的模块， <code>resolve</code>  配置 Webpack 如何寻找模块所对应的文件。我们配置了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVleHRlbnNpb25z\">extensions</span>，表示在导入语句中没带文件后缀时，Webpack 会自动带上后缀去尝试访问文件是否存在。</p>\n<p>我们配置中，配置了  <code>extensions: ['.js', '.jsx', '.ts', '.tsx']</code> ，意味着当遇到  <code>import A from './A'</code>  时，会先寻找 A.js、找不到就去找  <code>A.jsx</code> ，按照规则找，最后还是找不到，就会报错。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVhbGlhcw==\">alias</span> 代表别名，因为我们经常写  <code>import A from '../../../../../A'</code>  这种导入路径，特别恶心，所以通过配置别名处理。关于 Loader，我们前边小节已介绍，它就是模块打包方案，上述代码即表示：当匹配到  <code>/\\.(js|jsx|ts|tsx)$/</code>  文件时，使用  <code>babel-loader</code>  去处理一下。</p>\n<h4 id=\"32-webpackmaindevjs\"><a class=\"anchor\" href=\"#32-webpackmaindevjs\">#</a> 3.2 webpack.main.dev.js</h4>\n<p>我们看看主进程的配置，新增  <code>webpack.main.dev.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> mainConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/main/electron.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  target<span class=\"token operator\">:</span> <span class=\"token string\">'electron-main'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'electron.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> webpackMerge<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> mainConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，我们定义入口文件为  <code>/app/main/electron.js</code> ，并且定义打包出来的文件目录为 dist，文件名为 electron.js。</p>\n<p>需要注意的一点是：<strong>由于 JS 的应用场景日益增长，从浏览器到 Node，运行在不同环境下的 JS 代码存在一些差异。target 配置项可以让 Webpack 构建出不同运行环境的代码</strong></p>\n<p>关于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3RhcmdldC8jdGFyZ2V0\">target 的可选项</span>，可从官网查阅，这里我们将其配置成  <code>electron-main</code> ，至于主进程的 plugins，我们定义了一些构建变量。最后通过 webpack-merge 合并导出一份完整的配置。</p>\n<h4 id=\"33-webpackrenderdevjs\"><a class=\"anchor\" href=\"#33-webpackrenderdevjs\">#</a> 3.3 webpack.render.dev.js</h4>\n<p>在说配置之前，我们先来创建一个渲染进程对应的代码文件夹。我们在  <code>app</code>  文件夹下新增一个名为  <code>renderer</code>  文件夹。</p>\n<p>回顾一下之前 Electron 部分是不是有一个  <code>index.html</code>  文件，我们我们将其移动到  <code>renderer</code>  文件夹下，并修改它</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>VisResumeMook<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>接着我们在  <code>renderer</code>  下创建一个 React 的  <code>app.jsx</code>  文件</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> HashRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">可视化简历平台</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">这是 Electron + React </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们再来修改一下渲染进程的相关配置，新增  <code>webpack.render.dev.js</code>  文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.base.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> devConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 👇 对应渲染进程的 app.jsx 入口文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    index<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/app.jsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[hash].js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  target<span class=\"token operator\">:</span> <span class=\"token string\">'electron-renderer'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    contentBase<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//webpack-dev-server 启动时要指定 ip，不能直接通过 localhost 启动，不指定会报错</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">7001</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 启动端口为 7001 的服务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 👇 以此文件为模版，自动生成 HTML</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      template<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      filename<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      chunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> webpackMerge<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> devConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，以  <code>/app/renderer/app.jsx</code>  为入口，并配置了本地开发 devServer，通过  <code>HtmlWebpackPlugin</code>  自动生成一份以  <code>/app/renderer/index.html</code>  为模版的 HTML 文件。注意此时的 <strong>target</strong> 是针对 Electron 渲染进程。最后通过  <code>webpack-merge</code>  合并导出一份完整配置。</p>\n<h3 id=\"5-electron-与-react-结合起来\"><a class=\"anchor\" href=\"#5-electron-与-react-结合起来\">#</a> 5. Electron 与 React 结合起来</h3>\n<p>对于 Webpack 相关配置已经搭建完毕，我们来看看现在我们的文件目录都有哪些？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_src0.png\" alt=\"image.png\" /></p>\n<p>接下来我们让 Electron 和 React 结合起来，前面讲到，Electron 可以理解为页面添加了一个壳，由于我们将主进程中的  <code>index.html</code>  移到了渲染进程，所以我们需要修改一下  <code>electron.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @desc electron 主入口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 👉 还记得我们配置中通过 webpack.DefinePlugin 定义的构建变量吗</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 创建浏览器窗口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> mainWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    height<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    webPreferences<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      devTools<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      nodeIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 👇 看到了吗，在开发环境下，我们加载的是运行在 7001 端口的 React</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadURL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://127.0.0.1:7001</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadURL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">file://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>🎉 接着进入  <code>package.json</code>  文件中，修改一下启动脚本命令，添加渲染进程的启动方式</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"start:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config ./webpack/webpack.main.dev.js &amp;&amp; electron ./dist/electron.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"start:render\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --config ./webpack/webpack.render.dev.js\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"6-跑起来\"><a class=\"anchor\" href=\"#6-跑起来\">#</a> 6. 跑起来</h3>\n<p>我们开两个终端，一个跑  <code>npm run start:render</code> ，另一个跑  <code>npm run start:main</code> ，看看结果</p>\n<h2 id=\"第三阶段引入更多技术点\"><a class=\"anchor\" href=\"#第三阶段引入更多技术点\">#</a> 第三阶段：引入更多技术点</h2>\n<p>接下来引入 TypeScript、ESLint、Prettier，让整个项目看起来更加丰富。</p>\n<h3 id=\"1-安装-typescript\"><a class=\"anchor\" href=\"#1-安装-typescript\">#</a> 1. 安装 TypeScript</h3>\n<blockquote>\n<p>关于 TS 的入门学习，我建议小伙伴们去看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3Mv\">官方文档</span>，结合项目去上手写 TS，项目中的 TS 不会有很多复杂难以理解的地方，写着写着，你会发现其实 TS 没那么难，如果你想提升 TS，也可以看看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGUtY2hhbGxlbmdlcy90eXBlLWNoYWxsZW5nZXM=\">type-challenges</span> 这个库</p>\n</blockquote>\n<p>先安装  <code>TypeScript</code></p>\n<pre><code>npm install typescript --save-dev \n</code></pre>\n<p>装完之后，<strong>我们将项目中的 js、jsx 文件都改造成 ts、tsx</strong></p>\n<p>由于我们将  <code>renderer/app.jsx</code>  作为入口文件，所以修改后，前往  <code>webpack.render.dev.js</code>  文件修改  <code>entry</code>  ，避免项目启动报异常</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 这里改成.tsx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  index<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/renderer/app.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时对于主进程  <code>main/electron.js</code>  也需要去  <code>webpack.main.dev.js</code>  修改一下  <code>entry</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 这里改成.ts</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../app/main/electron.ts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们在  <code>renderer</code>  文件夹下新增一个文件夹取名为 title，在此文件夹下新增 index.tsx 文件，让我们来写一下该组件，并定义组件的 Props</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们会发现，TS 提示错误，原来我们还没安装 React 对应的 TS 包，安装一下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-dom --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-redux --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/react-router-dom --save-dev</pre></td></tr></table></figure><p>装好之后，我们继续写组件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    text<span class=\"token punctuation\">,</span>styles</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> IProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div  style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们在 app.tsx 下引入此组件，看看是不是会有提示</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_ts_test.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fbc2f3e80874c10b95dd15bd7e973a4~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" /></p>\n<p>一切如我们的预期，这表示我们可以很愉快的使用 TS 开发了。</p>\n<h3 id=\"2-安装-eslint-prettier\"><a class=\"anchor\" href=\"#2-安装-eslint-prettier\">#</a> 2. 安装 ESLint + Prettier</h3>\n<p>我们看上面的  <code>&lt;Title /&gt;</code>  组件，看着有点膈应，好像不该换行的它换行了，该换行的没换行。我们总不能手动的去按回车、删空格吧？</p>\n<p>这时我们使用  <code>Prettier</code>  进行代码格式化，相比于 ESLint 中的代码格式规则，它更加专业。同时我们采用  <code>ESLint</code>  来统一代码风格，提高我们的代码质量。</p>\n<p>ESLint 将我们的代码解析成 AST，通过检测 AST 来判断代码是否符合我们设置的规则，往往不同公司团队会自定义一套自己的 ESLint 规范。</p>\n<p>我们先来安装一下  <code>Prettier</code>  和  <code>ESLint</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint@^7.26.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prettier@^2.3.0 --save-dev</pre></td></tr></table></figure><p>接着安装一些对应的插件信息，具体信息大家可去查询这些库都做了什么工作</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-alloy@^4.1.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-prettier@^8.3.0 --save-dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-prettier@^3.4.0 --save-dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react@^7.23.2 --save-dev</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks@^4.2.0 --save-dev</pre></td></tr></table></figure><p>可能有人会问，有 ESLint，是不是也有 TSLint，答案是：有。但我并不推荐。</p>\n<p>由于现在 ESLint 的生态比较完善，而 TSLint 首先是不能使用 ESLint 社区的一些成果，其次 TSLint 在生态上也相对较差，所以 TSLint 的作者已经宣布会逐渐放弃 TSLint ，而去支持 typescript-eslint-parser ，同时 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMDU1Mw==\">Typescript 团队也宣布会将自己开发的 lint 工具从 tslint 迁移到 typescript-eslint-parser</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser@^4.24.0 --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/eslint-plugin@^4.24.0 --save-dev</pre></td></tr></table></figure><p>安装好之后，我们在项目根目录下创建  <code>tsconfig.json</code> 、 <code>.prettierrc</code>  、  <code>.eslintrc.js</code></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2016\"</span> <span class=\"token comment\">/* 编译结果使用的版本标准: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span> <span class=\"token comment\">/* 编译结果使用的模块化标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">\"DOM\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span> <span class=\"token comment\">/* 在写 ts 的时候支持的环境，默认是浏览器环境。如需要支持 node，安装 @type/node */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span> <span class=\"token comment\">/* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* 编译结果把 ts 的注释移除掉 */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* es6 的模块化和非 es6 的模块化标准互通 */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"@src/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./app/renderer/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//webpack 配置别名，但在 TS 中会报红找不到，所以 tslint 也需要配置</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里需要排除掉 dist 目录和 node_modules 目录，不进行检查</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"app/**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"app/**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"app/**/*.d.ts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>// .prettierrc\n&#123;\n  &quot;eslintIntegration&quot;: true,\n  &quot;printWidth&quot;: 120,\n  &quot;tabWidth&quot;: 2,\n  &quot;useTabs&quot;: false,\n  &quot;singleQuote&quot;: true,\n  &quot;endOfLine&quot;: &quot;auto&quot;\n&#125;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// .eslintrc.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'alloy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'alloy/react'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'alloy/typescript'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'plugin:prettier/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这里填入你的项目需要的全局变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    __dirname<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'no-undefined'</span><span class=\"token operator\">:</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'no-debugger'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    complexity<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> max<span class=\"token operator\">:</span> <span class=\"token number\">99</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 这里填入你的项目需要的个性化配置，比如：</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// @fixable 一个缩进必须用两个空格替代</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    indent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        SwitchCase<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        flatTernaryExpressions<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// @fixable jsx 的 children 缩进必须为两个空格</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string\">'react/jsx-indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// @fixable jsx 的 props 缩进必须为两个空格</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">'react/jsx-indent-props'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">'react/no-string-refs'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不要使用 ref</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">'no-template-curly-in-string'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在 string 里面不要出现模板符号</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/prefer-optional-chain'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/explicit-member-accessibility'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/no-duplicate-imports'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">'react/no-unsafe'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">'@typescript-eslint/no-invalid-this'</span><span class=\"token operator\">:</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">'react/jsx-key'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string\">'no-undef'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们再去看前边写的代码，会发现一堆报红，我们只需  <code>Ctrl+S</code>  保存一下即可。</p>\n<blockquote>\n<p>⚠️ 提示：如果发现未生效，可以重新打开一下 vscode</p>\n</blockquote>\n<h3 id=\"3-css-modules-问题\"><a class=\"anchor\" href=\"#3-css-modules-问题\">#</a> 3. CSS Modules 问题</h3>\n<p>大家都知道，CSS 的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。为了解决此情况，CSS Modules 的解决方案就是：使用一个独一无二的 class 的名字，不会与其他选择器重名。所以我们一般会看到，很多类命都是  <code>hash 值 + 组件名</code> ，下面说说如何在 Webpack 中配置 CSS Module</p>\n<p>在此项目中，我们采用  <code>less</code>  进行样式相关的编写，安装它</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> less@3.12.2 --save-dev</pre></td></tr></table></figure><p>我们进入 Webpack 官网 Loader 配置，看看它提供处理样式类型的打包方案，关于这些 Loader 的具体介绍可在官网查阅</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install less<span class=\"token operator\">-</span>loader@<span class=\"token number\">6.2</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install postcss<span class=\"token operator\">-</span>loader@<span class=\"token number\">3.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install css<span class=\"token operator\">-</span>loader@<span class=\"token number\">3.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 👇 将我们的样式通过 style 标签插入到页面 head 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npm install style<span class=\"token operator\">-</span>loader@<span class=\"token number\">2.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>前面我们说了，Loader 就是模块打包方案，我们去  <code>webpack.render.dev.js</code>  中添加配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.render.dev.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> devConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 👇 追加这段代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                localIdentName<span class=\"token operator\">:</span> <span class=\"token string\">'[name]__[local]__[hash:base64:5]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候我们在  <code>&lt;Title /&gt;</code>  组件下编写一个  <code>index.less</code>  文件，看其样式否如我们所愿？</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>lessStyle<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      这是一个title组件的测试</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行，看看是否可行？发现还是不行，我们看看报什么错？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_err0.png\" alt=\"image.png\" /></p>\n<p>解决此问题需要我们在项目根目录下创建  <code>postcss.config.js</code> ，添加一下配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    autoprefixer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      overrideBrowserslist<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'> 0.5%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'last 5 versions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同时因为引入了一个 plugins，所以需要安装一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> autoprefixer@9.0.0 --save-dev</pre></td></tr></table></figure><p>再次运行，看看效果，我们可以看到，类名的格式为 <code>[组件名]_[当前类名]_[哈希值取5位]</code> ，从而形成独一无二的 class 名字，不会与其他选择器重名。至此我们完成了样式相关的配置处理。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/onlineResume_less_test.png\" alt=\"image.png\" /></p>\n<h3 id=\"4-stylename\"><a class=\"anchor\" href=\"#4-stylename\">#</a> 4. styleName</h3>\n<p>在 React 中 CSS Modules 会使得我们写代码都要通过 styles 的形式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index/less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>lessStyle<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特别繁琐，所以通过插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dhanVzL3JlYWN0LWNzcy1tb2R1bGVz\">react-css-modules</span> 实现 styleName 的形式，但是每次都需要写成这样</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> CSSModules <span class=\"token keyword\">from</span> <span class=\"token string\">'react-css-modules'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> lessStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Title</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div styleName<span class=\"token operator\">=</span><span class=\"token string\">\"cell\"</span><span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">CSSModules</span><span class=\"token punctuation\">(</span>Title<span class=\"token punctuation\">,</span> lessStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外还有一个插件，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dhanVzL2JhYmVsLXBsdWdpbi1yZWFjdC1jc3MtbW9kdWxlcw==\">babel-plugin-react-css-modules</span>，这个插件更加好用</p>\n<p>为了改造成这种形式，我们进行配置修改，我们先安装插件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 👇 不安装会在使用 styleName 时 TS 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install @types<span class=\"token operator\">/</span>react<span class=\"token operator\">-</span>css<span class=\"token operator\">-</span>modules@<span class=\"token number\">4.6</span><span class=\"token number\">.2</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 👇 让我们更好的使用 CSS Module</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>npm install babel<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>css<span class=\"token operator\">-</span>modules@<span class=\"token number\">5.2</span><span class=\"token number\">.6</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npm install postcss<span class=\"token operator\">-</span>less@<span class=\"token number\">3.1</span><span class=\"token number\">.4</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>然后在  <code>babel.config.js</code>  文件中添加一下配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token comment\">// css-modules</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">'babel-plugin-react-css-modules'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        exclude<span class=\"token operator\">:</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        webpackHotModuleReloading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        generateScopedName<span class=\"token operator\">:</span> <span class=\"token string\">'[name]__[local]__[hash:base64:5]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        autoResolveMultipleImports<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        filetypes<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token string\">'.less'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> syntax<span class=\"token operator\">:</span> <span class=\"token string\">'postcss-less'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后再看看组件的代码是怎样的</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   * @description 标题</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   * @description 样式</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> text<span class=\"token punctuation\">,</span> styles <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> IProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">&#125;</span> styleName<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-文件类型报错\"><a class=\"anchor\" href=\"#6-文件类型报错\">#</a> 6. 文件类型报错</h3>\n<p>当我们在代码中引入一张照片时，打包会发生错误</p>\n<p>官方提供了一种专门处理此类型的方案： <code>file-loader</code> ，我们安装一下这个 loader</p>\n<pre><code>npm install file-loader --save-dev\n</code></pre>\n<p>修改一下  <code>webpack.base.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jpg|png|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[hash].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              outputPath<span class=\"token operator\">:</span> <span class=\"token string\">'images/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-文件部分类型-ts-报红\"><a class=\"anchor\" href=\"#5-文件部分类型-ts-报红\">#</a> 5. 文件部分类型 TS 报红</h3>\n<p>我们此刻引入一张图片，TS 会报错，说找不到模块</p>\n<p>这时候我们只需要在  <code>app/renderer</code>  目录下，新增一个  <code>global.d.ts</code>  文件即可</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// global.d.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'*.jpg'</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> jpg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> jpg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>⚠️ 请注意：如果你在根目录下新增 global.d.ts 文件，请确保你的 tsconfig.json 中  <code>include</code>  字段是能匹配到 global.d.ts 文件</p>\n</blockquote>\n<p>关于 global.d.ts 可配置的东西可太多了，一般来说，我们  <code>window.pdk</code>  肯定会被 ts 报红，说 window 上并无此属性，这时候我们又不想改成  <code>(window as any).pdk</code> ，那么我们可以扩展 Window 的类型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里用于扩充 window 对象上的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  pdk<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/2.%20hello%20webpack/",
            "url": "http://jluyeyu.com/project/onlineResume/2.%20hello%20webpack/",
            "title": "2. hello Webpack",
            "date_published": "2022-01-07T00:50:52.000Z",
            "content_html": "<h2 id=\"hello-webpack\"><a class=\"anchor\" href=\"#hello-webpack\">#</a> hello Webpack</h2>\n<p>本小节主要介绍 Webpack 相关知识，聊聊 Webpack 的由来，以及我们为什么要使用 Webpack，通过两大利器：Loader 与 Plugins 进行讲解。</p>\n<p>要想快速知道 Webpack 是什么，最好的方式就是通过官网去了解它。通过官方介绍，我们可以知道：webpack 是一个现代 JavaScript 应用程序的静态模块打包器 (module bundler)。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack%E5%AE%98%E7%BD%91.png\" alt=\"image.png\" /></p>\n<p>在最初，Webpack 并不被人熟知，它刚出现时，主打的优势是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd2VicGFjay5kb2NzY2hpbmEub3JnJTJGZ3VpZGVzJTJGY29kZS1zcGxpdHRpbmclMkY=\">Code Splitting</span>，我们现在从官网也能看到对它的定义：</p>\n<blockquote>\n<p>Code Splitting : 代码分离指将代码分成不同的包 / 块，然后可以按需加载，而不是加载包含所有内容的单个包。</p>\n</blockquote>\n<p>什么时候 Webpack 才受人关注？2014 年，Instagram 的前端团队在一次大会上<strong>分享其内部前端页面加载性能优化，提到最重要的一点就是用到了 Webpack 的 Code Splitting</strong>。</p>\n<p>这简直就是为 Webpack 好友助力了一波，之后形成了一个热潮。Webpack 的风口来了，很多公司纷纷使用 Webpack，并贡献了无数的 Plugin、Loader，你一刀，我一刀，明天 Webpack 就出道，果不其然，短短时间内，Webpack 被推上了高潮。</p>\n<p>大家都用，我需要用吗？如果说你的应用程序非常小，没有什么静态资源，只需要一个 JS 文件就可以满足需求，这时使用 Webpack 并不是一个好的选择。至于你用与不用，得靠你自身评估～</p>\n<h2 id=\"两大利器\"><a class=\"anchor\" href=\"#两大利器\">#</a> 两大利器</h2>\n<p>得益于 Webpack 扩展性强，插件机制完善，官方提供了许多的 Loader、Plugin，接下来通过问题，配合简单明了的 demo，给大家讲解这两大利器，在此之前，我们先全局安装一下 Webpack。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack --save --dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-cli --save --dev</pre></td></tr></table></figure><h3 id=\"loader-模块打包方案\"><a class=\"anchor\" href=\"#loader-模块打包方案\">#</a> Loader 模块打包方案</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PXVuZGVmaW5lZA==\">官方</span>对 Loader 的介绍是：Webpack 可以使用 Loader 来预处理文件。这允许你打包除 JS 之外的任何静态资源。</p>\n<p>在我看来， <code>Loader 就是一种模块打包方案</code> ，怎么理解？给大家科普一个知识点：<strong>Webpack 默认是知道如何打包 js 类型文件，但对于其他类型文件，它是不知道如何处理</strong>，我们得告诉它，对这种类型文件，打包的方案是什么。接下来，我们通过例子，帮助小伙伴们理解为什么我说它是一种方案。</p>\n<p>我们新建一个  <code>demo</code>  文件夹，创建一个  <code>index.js</code>  文件，文件结构是这样的</p>\n<pre><code>├── demo\n│ └── index.js\n└──...\n</code></pre>\n<p>此时我们在  <code>index.js</code>  中写下这行代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello webpack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行一下  <code>npx webpack ./index.js</code> ，意思就是对我们的 index.js 文件打包。</p>\n<p>我们在终端可以看到，在不配置任何东西情况下，Webpack 也能够打包 JS 类型文件，这说明 Webpack 默认对 JS 文件是有一套打包方案的</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack0.png\" alt=\"img\" /></p>\n<p>接下来，我们将代码改成这样，引入我们的图片</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> myPdkAvatar <span class=\"token keyword\">from</span> <span class=\"token string\">'./cover.jpg'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello webpack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同上，执行  <code>npx webpack index.js</code> ，此时会报错。对 jpg 类型的文件打包失败了</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-err0.png\" alt=\"img\" /></p>\n<p>Webpack 很友好，它会告诉你，你需要一个 loader 去处理此文件类型。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-err1.png\" alt=\"img\" /></p>\n<p>官方提供了一种专门处理此类型的方案：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LndlYnBhY2tqcy5jb20lMkZsb2FkZXJzJTJGZmlsZS1sb2FkZXIlMkY=\">file-loader</span>，我们安装一下这个 loader</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev file-loader</pre></td></tr></table></figure><p>接着新增一个文件  <code>webpack.config.js</code> ，此时的文件结构是这样的</p>\n<pre><code>├── demo\n│ ├── index.js\n│ └── webpack.config.js\n└──...\n</code></pre>\n<p>我们在配置文件中，<strong>添加一下对于 jpg 这种类型文件的处理方案</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jpg$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[hash].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              outputPath<span class=\"token operator\">:</span> <span class=\"token string\">'images/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解读一下这段代码，意思就是：当遇到模块 (module) 时，进行规则 (rules) 匹配，如果匹配到  <code>/\\.jpg$/</code>  类型的文件，就采用  <code>file-loader</code>  方案进行打包，并且配置了参数： <code>name</code>  与 <code>outputPath</code> ，意味着打包后的文件名是按照  <code>[文件名]_[哈希值].[源类型]</code>  规则命名，并且输出在  <code>images/</code>  目录下</p>\n<p>理解了这段代码含义之后，我们再来打包，看看结果如何，执行  <code>npx webpack ./index.js</code></p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-fileloader.png\" alt=\"image.png\" /></p>\n<p>打包正常！我们再看看打包之后的 dist 文件下，是不是真的有个  <code>images/</code>  目录存放着打包后的图片？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-fileloader-result.png\" alt=\"img\" /></p>\n<p>如我们所想，现在回过头细品，<strong>Loader 就是一种模块打包方案</strong>是不是也有点道理？下面写几行代码，大家细品细品</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          loader<span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          loader<span class=\"token operator\">:</span> <span class=\"token string\">'vue-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"plugins-打包更加便捷\"><a class=\"anchor\" href=\"#plugins-打包更加便捷\">#</a> Plugins 打包更加便捷</h3>\n<p>继续以上边的 Loader demo 为例子，回顾一下我们现在 demo 的文件目录结构</p>\n<pre><code>├── demo\n│ ├── index.js\n│ └── webpack.config.js\n└──\n</code></pre>\n<p>我们先来执行一下  <code>npx webpack index.js</code> ，来看看 dist 目录下有哪些文件</p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ff96000b5354e869fb01aabae2dff36~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>通过官网可知，在我们未配置  <code>output</code>  属性时，它的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</p>\n</blockquote>\n<blockquote>\n<p>因为我们都用的默认配置，所以打包生成的文件夹名就叫 dist，bundle 默认名称就是 main.js</p>\n</blockquote>\n<p>接下来我们<strong>手动</strong>创建一个 HTML，加载打包后的 js 文件，如何加载呢？通过 script 加载打包后的  <code>main.js</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>webpack plugins demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在这里加载打包好之后的 main.js 文件 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./dist/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后运行此页面，通过控制台，可以看到会打印出： <code>hello webpack</code></p>\n<p>假设现在有一种场景，需要通过 hash 进行命名输出的 bundle。我们来修改一下  <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1. webpack 执行构建的第一步将从 entry 开始，这里我们的入口文件为 index.js</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2. 经过一系列处理得到最终的代码，然后输出结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 这里将输出的结果代码文件自定义配置文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[webpack]_[hash].bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行  <code>npx webpack ./index.js</code> ，来看看打包之后的文件命名格式是否如我们预期</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-hash-result.png\" alt=\"image.png\" /></p>\n<p>没毛病，这时候我们 HTML 加载该怎么办？<strong>手动修改成正确的文件地址</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./dist/[webpack]_04638f451cfea56abd38.bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如果我们将 index.js 文件中的内容修改（👇 下面添加一行代码）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> myPdkAvatar <span class=\"token keyword\">from</span> <span class=\"token string\">'./cover.jpg'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello webpack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 新添加的代码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new add code ......'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后把 dist 目录删除，再打包一次，看看文件 hash 是否一致？</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Entrypoint main <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>webpack<span class=\"token punctuation\">]</span>_b8a2cb97e0f716e38925.bundle.js</pre></td></tr></table></figure><p>通过对比，我们发现，每次修改，重新打包生成的 bundle 文件名哈希值都不一样。<strong>等价于每次打包都需要手动修改 HTML 中的文件引用</strong>。</p>\n<p>太原始太麻烦了，低效率！为此，Webpack 提供了 Plugins 插件能力，让 Webpack 变得更加灵活。</p>\n<p>官方提供了很多 Plugins，让我们的打包更加便捷，上面的问题，我们可以通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGdjQud2VicGFjay5kb2NzY2hpbmEub3JnJTJGcGx1Z2lucyUyRmh0bWwtd2VicGFjay1wbHVnaW4lMkY=\">HtmlWebpackPlugin</span> 插件进行简化 HTML 文件的创建，这对于在文件名中包含每次会随着编译而发生变化哈希的 webpack bundle 尤其有用！</p>\n<p>多说无益，上手试试，先根据文档，安装一下插件，看看它能实现怎样的效果</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev html-webpack-plugin</pre></td></tr></table></figure><p>安装好之后，我们来修改  <code>webpack.config.js</code>  内容，将这个插件引入</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 引入此插件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. webpack 执行构建的第一步将从 entry 开始，这里我们的入口文件为 index.js</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  entry<span class=\"token operator\">:</span> <span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 2. 经过一系列处理得到最终的代码，然后输出结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这里将输出的结果代码文件自定义配置文件名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">\"[webpack]_[hash].bundle.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 👇 使用此插件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jpg$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">\"file-loader\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">\"[name]_[hash].[ext]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              outputPath<span class=\"token operator\">:</span> <span class=\"token string\">\"images/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行一下  <code>npx webpack ./index.js</code> ，打包的出来的文件有哪些？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-pluin-result.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5.png\" alt=\"image.png\" /></p>\n<p><strong>HtmlWebpackPlugin 会在打包结束后，自动帮我们生成一个 HTML 文件，同时把打包后的 bundle 自动引入</strong>。当我们内容修改，重新打包，生成的 HTML 也会随着每次编译导致哈希变化的 bundle 自动引入。</p>\n<p>是不是很完美呢？不，我们采用火眼金睛瞧一瞧由 HtmlWebpackPlugin 生成的 HTML 文件，你会发现好像有些问题？是不是  <code>body</code>  下少了一些 DOM 节点（比如 Vue、React 都会有一个 id 为 app 的 DOM 元素），怎么办？这是该插件默认生成的，有没有办法生成我想要的 DOM 结构呢？</p>\n<p>HtmlWebpackPlugin 提供了一个配置参数  <code>template</code> ，它允许你自定义 HTML 文件，以此文件为模版，生成一份一样的 HTML 并为你自动引入打包后的 bundle。</p>\n<p>我们来动手实现一下，首先定义一份 “别具一格” 的 HTML 模版。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>我是 HtmlWebpackPlugin 的模版<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>PDK Demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后通过修改  <code>webpack.config.js</code>  配置，采用此模版为基础</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 👇 引入此插件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. webpack 执行构建的第一步将从 entry 开始，这里我们的入口文件为 index.js</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  entry<span class=\"token operator\">:</span> <span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 2. 经过一系列处理得到最终的代码，然后输出结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这里将输出的结果代码文件自定义配置文件名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">\"[webpack]_[hash].bundle.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 👇 使用此插件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    template<span class=\"token operator\">:</span> <span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jpg$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">\"file-loader\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">\"[name]_[hash].[ext]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              outputPath<span class=\"token operator\">:</span> <span class=\"token string\">\"images/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后我们来瞧瞧，是否打包后自动生成的 HTML 文件结构跟我们的模版一致？</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/webpack-pluin-template.png\" alt=\"image.png\" /></p>\n<p>事实证明，确实一模一样。</p>\n<p>官方还有很多精巧有用的 Plugins 插件，几乎每个插件目的都是出于让你的打包构建更加便捷。小伙伴们要善于使用搜索引擎去寻找所需的插件工具（官方插件或第三方 Plugins 插件）及解决问题的方法。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>Loader 就是一种模块打包方案，换言之，它是一名具备文件类型转换的翻译员</li>\n<li>Plugins 用于扩展 Webpack 的功能，使得 webpack 变得极其灵活。</li>\n<li>Plugins 可以在 Webpack 运行到某个时刻，帮你做一些事情。学过 Vue、React 的小伙伴应该对生命周期不陌生，其实 Plugins 很像生命周期函数，在 Webpack 运行到某个生命周期去做些事情。</li>\n</ul>\n<blockquote>\n<p>如上述例子中，HtmlWebpackPlugin 就是在 Webpack 打包过程结束的生命周期时刻，去做了一些事情 —— 自动生成 HTML 文件，引入打包后的 bundle。</p>\n</blockquote>\n<blockquote>\n<p>在比如 clean-webpack-plugin 第三方的插件，它其实就是在 Webpack 打包之前的生命周期时刻，去做了一些事情 —— 删除我们打包的目录</p>\n</blockquote>\n<p>这两个 Plugins 相信项目中都会用到，回去翻一翻项目的配置，结合文档，在细品细品。</p>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/1.%20hello%20Electron/",
            "url": "http://jluyeyu.com/project/onlineResume/1.%20hello%20Electron/",
            "title": "1. hello Electron",
            "date_published": "2022-01-07T00:12:52.000Z",
            "content_html": "<h2 id=\"hello-electron\"><a class=\"anchor\" href=\"#hello-electron\">#</a> hello Electron</h2>\n<p>我们访问它的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJG\">官网</span>，映入眼帘的是：<strong>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</strong></p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/Electron%E5%AE%98%E7%BD%91.png\" alt=\"image.png\" /></p>\n<p>Electron 建立在 Chromium 和 Node 之上，为我们提供了很多封装好的模块，跟系统原生 API 互通。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/Electron%E8%AF%B4%E6%98%8E.png\" alt=\"image.png\" /></p>\n<ul>\n<li>Chromium 为 Electron 提供了强大的 UI 能力</li>\n<li>Electron 内部支持 NodeJS 模块，让我们在写 UI 的同时，能够拥有操作系统底层 API 的能力，比如常用的 fs、path、child_process 模块</li>\n</ul>\n<p>可以这么理解，Chromium 负责界面展示，Node 负责背后逻辑。</p>\n<p>可喜可贺，Electron 还具有跨平台的特性，不同系统底层提供的 API 不同，但 Chromium、Node 本身就跨平台，帮我们处理了大部分跨平台的兼容问题，当然 Electron 在一些场景下，也做了一些跨平台的兼容处理，不得不说，Electron 真香。</p>\n<h2 id=\"应用程序结构\"><a class=\"anchor\" href=\"#应用程序结构\">#</a> 应用程序结构</h2>\n<p>Electron 有三大核心</p>\n<ul>\n<li><strong>Chromium</strong> 用于显示网页内容。</li>\n<li><strong>Node.js</strong> 用于本地文件系统和操作系统。</li>\n<li><strong>Native APIs</strong> 用于使用经常需要的本机函数。</li>\n</ul>\n<p>另外 Electron 最重要的两大灵魂：<strong>主进程和渲染进程</strong>。在讲主进程与渲染进程，我们先来了解一下进程和线程，才能更好的了解 Electron 中的主进程和渲染进程。</p>\n<h2 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h2>\n<h3 id=\"为什么会有进程\"><a class=\"anchor\" href=\"#为什么会有进程\">#</a> 为什么会有进程？</h3>\n<p>在刀耕火种时期，那时候操作系统混得不太行，只带得动一个运行程序小弟，随着科技的发展，党和人民的努力，CPU 的能力越来越强，内存越来越大，计算机混得越来越好，可以带更多的运行程序小弟。可随着运行程序越来越多，随机带来一系列的问题：</p>\n<ul>\n<li>多个程序使用的数据如何辨别？</li>\n<li>当一个程序暂停时，又如何恢复到它之前执行的状态？</li>\n</ul>\n<p>为解决上述问题，进程就被发明出来了，用进程来对应一个程序，各个进程之间互不干扰，进程会保存了程序各个时刻的运行状态，当进程暂停时，它会将当前进程的状态（如进程标识、进程使用资源等）记在小本本上，在下次切换进程时，恢复该进程的之前状态。<strong>进程就是一段程序动态执行过程。</strong></p>\n<p>我们所期望，每个进程能干更多的事，毕竟一个进程，在一个时间点上，只能干一件事，想同时干多件事，有点强人所难了。其次进程执行过程中，如果阻塞，整个进程就会被挂起。直到条件允许，操作系统才会将该进程从阻塞态变为就绪态，等待进程调度。</p>\n<p>举个例子：将职级答辩看成一个进程，我们作为评委， <code>工作任务就是耳听答辩者演讲，眼看申请的职级 PPT，脑子还要想今天下班去吃什么</code> ，才能高效完成职级答辩的任务。如果只提供进程这个机制，那么这三件事将不可能同时执行；其次答辩者如果演讲过程语塞了，他急了慌了，在思考如何救场，而我们呢？阻塞，停留在听或者看的环节，不能趁这个时候想想，吃谁家火锅，喝哪家奶茶。</p>\n<p>为了解决上述的问题，线程出现了。</p>\n<h3 id=\"什么是进程\"><a class=\"anchor\" href=\"#什么是进程\">#</a> 什么是进程？</h3>\n<p>进程是对运行时程序的封装，它是系统进行资源调度和分配的基本单位；</p>\n<p>线程是进程的子任务，是 CPU 调度和分派的基本单位，是操作系统可识别的最小执行和调度单位。</p>\n<h3 id=\"线程和进程的关系\"><a class=\"anchor\" href=\"#线程和进程的关系\">#</a> 线程和进程的关系</h3>\n<ol>\n<li>进程至少含一个线程，每一个进程都有一个主线程，进程能够创建、撤销线程；线程能创建线程，不能创建进程。</li>\n<li>进程拥有独立的内存地址，<strong>多个进程之间的资源不共享，如果需要通信，可以通过 IPC</strong>；线程无独立的内存地址，某个进程下的所有线程（可以直接读写进程数据段）共享该进程所拥有的所有资源。</li>\n<li>进程崩溃不会影响其他进程，线程挂了进程也会发生崩溃。</li>\n</ol>\n<h2 id=\"electron-中的主进程和渲染进程\"><a class=\"anchor\" href=\"#electron-中的主进程和渲染进程\">#</a> Electron 中的主进程和渲染进程</h2>\n<p>在 Electron 中，两大灵魂人物：[主进程与渲染进程](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvdHV0b3JpYWwvcXVpY2stc3RhcnQjJUU0JUI4JUJCJUU4JUJGJTlCJUU3JUE4JThCJUU1JTkyJThDJUU2JUI4JUIyJUU2JTlGJTkzJUU1JTk5JUE4JUU4JUJGJTlCJUU3JUE4JThC\">Quick Start | Electron (electronjs.org)</span>)，他两各司其职。</p>\n<p>主进程就像是一个桥梁，连接着操作系统和渲染进程，等价于计算机和页面的中间人。在 Electron 中，运行 package.json 中的 main 脚本中的进程，我们称之为主进程。</p>\n<blockquote>\n<p>在主进程中创建浏览器窗口（我们称之为渲染进程窗口），窗口加载我们的 Web 页面，通过运行主进程脚本，启动整个应用程序。</p>\n</blockquote>\n<p><strong>一个 Electron 只会存在一个主进程，但它可以存在多个渲染进程</strong>，由于 Electron 使用了 Chromium 来展示 UI 界面 (应用程序中被称为 BrowserWindow)，自然而然地，Chromium 的多进程架构也被引入。 <code>当主进程每创建一个独立的 BrowserWindow 实例，Electron 都会初始化一个独立的渲染进程，隔离了不同窗口之间的环境</code> ，每一个渲染进程，只需要关心自己内部的 Web 页面。</p>\n<p>主进程这个职位很重要，它有什么特点呢？</p>\n<ul>\n<li>可以使用和系统对接的 ElectronAPI，比如菜单创建等</li>\n<li>支持 NodeJS，在主进程可以任意使用 NodeJS 的特性</li>\n<li>创建多个渲染进程</li>\n<li>有且只有一个，并且是整个程序的入口文件</li>\n<li>控制整个应用程序的生命周期</li>\n</ul>\n<p>在主进程调用  <code>browserWindow</code>  时，会生成一个渲染进程并对应一个浏览器窗口，恰如其名，渲染进程是负责渲染 Web 网页内容的。<strong>渲染进程的入口是一个 HTML 文件</strong>，那么渲染进程的特点是什么？</p>\n<ul>\n<li>可以使用部分 Electron 的 API</li>\n<li>全面支持 NodeJS</li>\n<li>存在多个渲染进程</li>\n<li>可以访问 DOM API</li>\n</ul>\n<p>下面我们来讲讲主进程与渲染进程可访问的模块范围，通过官网文档也可知：</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/Electron%E5%B8%B8%E7%94%A8API.png\" alt=\"image.png\" /></p>\n<p>这里需要补充一点，渲染进程还可以访问  <code>DOM API</code> 、 <code>Broswer API</code> ，那么接下来通过代码，让大家看看代码中对应的主进程和渲染进程：</p>\n<p>在  <code>package.json</code>  中指定程序的入口文件  <code>electron.js</code> ，换言之，我们有且只有一个的主进程</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron-demo\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 入口文件，也就是我们的主进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron .\"</span> <span class=\"token comment\">// 脚本命令，启动应用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们定义一个 electron.js 文件，在该文件中，生成我们的渲染进程窗口，并加载 我们写好的 index.html</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @desc electron 主进程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 创建浏览器窗口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> mainWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    width<span class=\"token operator\">:</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    height<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">loadURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如上述代码所示，在主进程中，调用 Electron 提供的  <code>BrowserWindow</code>  API 创建浏览器窗口，每一个浏览器窗口我们可以认为就是浏览器的 Tab。Electron 在创建独立的渲染进程窗口后，隔离不同窗口之间的环境。每一个渲染进程，只需要关心自己内部的 Web 页面。以上代码就是创建一个给定高宽的窗口，在窗口中加载我们写好的 html 页面。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    我是 electron-demo</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/hello%20Electron.png\" alt=\"Electron hello world\" /></p>\n<h2 id=\"主进程与渲染进程通信\"><a class=\"anchor\" href=\"#主进程与渲染进程通信\">#</a> 主进程与渲染进程通信</h2>\n<p>前边讲到，Electron 是基于 Chromium + NodeJS 开发的，我们的 Chrome 也是基于 Chromium 开发的，当我们打开浏览器，就会存在 1 个浏览器进程（在 Electron 中叫做主进程）、1 个 GPU 进程、1 个网络进程、N 个渲染进程和 M 个扩展插件进程。</p>\n<p>我们知道，Chromium 采用了多进程架构，每一个 Tab 都是一个渲染进程，执行在独立的沙箱环境中，并且无法访问操作系统的原生资源。要知道，<strong>不同的进程间内存资源都是相互隔离的，鉴于浏览器对本地数据有严格的访问限制</strong>，我们通常都会通过诸如 localStorage、window.postMessage 等方式进行窗口间的数据通信。</p>\n<p>该方式同样适用于 Electron 中，但窗口之间大量的数据传输以及频繁进行数据通信，让人不由深思，这种通信方案是否属于最佳？传输效率是否有所影响？</p>\n<p>Electron 中提供了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvaXBjLW1haW4=\">ipcMain</span> 与 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvYXBpL2lwYy1yZW5kZXJlcg==\">ipcRenderer</span> 作为主进程以及渲染进程间通讯的桥梁。<strong>其本质是通过命名管道 IPC</strong> ，提供更高的效率以及安全性。</p>\n<h3 id=\"ipcmain\"><a class=\"anchor\" href=\"#ipcmain\">#</a> ipcMain</h3>\n<p>作用于主进程中，处理从渲染器进程发送出来的异步和同步信息。</p>\n<h3 id=\"ipcrenderer\"><a class=\"anchor\" href=\"#ipcrenderer\">#</a> ipcRenderer</h3>\n<p>作用于渲染进程，可以通过 ipcRenderer 将异步和同步信息发送到主进程，并且可以接收由主进程回复的消息。</p>\n<h3 id=\"为什么要进行主进程和渲染进程的通信\"><a class=\"anchor\" href=\"#为什么要进行主进程和渲染进程的通信\">#</a> 为什么要进行主进程和渲染进程的通信？</h3>\n<p>我们不禁思考，为什么要进行主进程与渲染进程通信？如果你还记得主进程与渲染进程可访问的模块范围，那么你应该知道，主进程可访问的模块比渲染进程还要多，比如  <code>app 模块</code> 只能作用于主进程，如果在渲染进程调用此模块则会报错。</p>\n<p>你可能会觉得，那我渲染进程不调用这些模块不就好了？梦想很美好，但现实很残酷，我们总会在渲染进程中用到某些数据，该数据只能通过主进程访问特定模块才能获取，解决方式只能通过将主进程作为中间人，借助它的能力拿到数据之后，再通过 IPC 将数据发送给渲染进程。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.png\" alt=\"主进程和渲染进程间通信\" /></p>\n<p>上图所示，主进程与渲染进程之间通过 IPC 方式进行数据通信，下面我们通过一个实际场景例子理解主进程渲染进程之间的通信流程：</p>\n<p>我们在渲染进程中，需要得到实战应用程序所在的目录（绝对路径），可通过 Electron 提供的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmVsZWN0cm9uanMub3JnJTJGZG9jcyUyRmFwaSUyRmFwcCUyM2FwcGdldGFwcHBhdGg=\">app</span> 模块里  <code>getAppPath</code>  方法获得，但 app 模块只能作用于主进程，无奈之下只能拜托主进程调用此模块，然后再通过 IPC 将数据返回，下面是获取目录路径的代码：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在渲染进程中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ipcRenderer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1. 向主进程发送消息，期望得到应用程序的路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 2. 监听从主进程发送回来的消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'应用程序路径: '</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取应用程序的路径出错'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 在主进程中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> app<span class=\"token punctuation\">,</span> ipcMain <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">ROOT_PATH</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取应用程序的路径</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 3. 监听渲染进程发送过来的消息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 4. 监听到之后，主进程发送消息进行回复</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  event<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reply-root-path'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROOT_PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"remote\"><a class=\"anchor\" href=\"#remote\">#</a> remote</h3>\n<p>remote 模块为渲染进程和主进程通信提供了一种简单方法，在 Electron 中，GUI 相关的模块仅在主进程中可用，在渲染进程中不可用（如 app 模块），所以当我们在渲染进程中需要用到 GUI 相关模块方法的数据时，通常都是在主进程中调用，得到数据之后，通过 ipcMain、ipcRenderer 来告知渲染进程。</p>\n<p>开发过程想调用 GUI 模块的方法时，都需要通过 IPC 的方式，是不是很麻烦？于是 remote 模块就发挥它的作用了。它允许你在渲染进程中，调用主进程对象的方法，而不必显式地发送进程间消息。</p>\n<p>自然而然的，上述获取实战应用程序所在的目录（绝对路径），可以改为</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在渲染进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> rootPath <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getAppPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不要看这种方式很简单，实际上，remote 本质还是发送一个同步的 IPC 消息，remote 方法只是不用我们显式的写发送进程间的消息的方法而已。</p>\n<p><strong>官方声明</strong>：<em>此模块在 v12.x 版本之后已经被<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmVsZWN0cm9uJTJGZWxlY3Ryb24lMkZpc3N1ZXMlMkYyMTQwOA==\">废弃</span>，当然如果出于性能和安全性考虑仍要使用此模块，也不是不行，可通过 @electron/remote 进行使用，但还是慎用！</em></p>\n<blockquote>\n<p>The remote module is deprecated. Instead of remote, use ipcRenderer and ipcMain. If you still want to use remote despite the performance and security concerns, see @electron/remote.</p>\n</blockquote>\n<h3 id=\"渲染进程之间通信\"><a class=\"anchor\" href=\"#渲染进程之间通信\">#</a> 渲染进程之间通信？</h3>\n<p>目前官方并没有提供渲染进程之间互相通信的方式，只能通过主进程建立一个消息中转。比如渲染进程 A 与渲染进程 B 需要进行通信，那么渲染进程 A 先将消息发给主进程，主进程接收消息之后，再分发给渲染进程 B。</p>\n<p>我们知道主进程有且只有一个，它工作任务很多，如渲染进程的创建、快捷键事件的定制、菜单栏的自定义等，此时我们再注入一大堆的消息通信逻辑，最终会使得我们的主进程变成一个大杂烩的进程。受<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRlN1Z2FyVHVyYm9TJTJGU3VnYXItRWxlY3Ryb24=\"> Sugar-Electron</span> 的启发，它内部封装了一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRlN1Z2FyVHVyYm9TJTJGU3VnYXItRWxlY3Ryb24lMkZ0cmVlJTJGbWFzdGVyJTJGY29yZSUyRmlwYw==\">ipc 模块</span>，消息进程的逻辑在各自的渲染进程处理，感兴趣的小伙伴业余时间可前往官网进行了解。</p>\n<h3 id=\"通信原理\"><a class=\"anchor\" href=\"#通信原理\">#</a> 通信原理</h3>\n<p>通过官方文档，我们可知 ipcMain 与 ipcRenderer 都是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZub2RlanMuY24lMkZhcGklMkZldmVudHMuaHRtbCUyM2V2ZW50c19jbGFzc19ldmVudGVtaXR0ZXI=\">EventEmitter</span> 类的一个实例，而 EventEmitter 类是由 NodeJS 中的 events 模块导出。</p>\n<p>EventEmitter 类是 NodeJS 事件的基础，实现了事件模型需要的接口，如  <code>addListerner</code> 、 <code>removeListerner</code> 、 <code>emit</code>  等工具方法。采用的是我们熟知的发布订阅模式。</p>\n<p>以 ipcMain 为例，既然它是 EventEmitter 类的实例，我们不妨猜测，它的源码是不是这样呢？</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ipcMain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面以  <code>v11.3.0</code>  版本进行源码阅读，我们来看看 ipcMain 如何实现的（伪代码）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 源码地址: https://github.com/electron/electron/blob/v11.3.0/lib/browser/ipc-main-impl.ts</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> EventEmitter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'events'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IpcMainImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventEmitter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">handleOnce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 源码地址: https://github.com/electron/electron/blob/v11.3.0/lib/browser/ipc-main-internal.ts</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> IpcMainImpl <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./ipc-main-impl'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ipcMainInternal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IpcMainImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本质就是通过继承 EventEmitter，在其基础之上，扩展了部分的工具方法，如: handle、handleOnce 等，最后全局抛出一个单例的 ipcMainInternal。</p>\n<h2 id=\"electron-结构图\"><a class=\"anchor\" href=\"#electron-结构图\">#</a> Electron 结构图</h2>\n<p>通过上述讲解，想必大家已经了解主进程与渲染进程的基础知识，明白进程间通信的方式及原理，下面再用一张图来回顾一下 Electron 的架构。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/Electron%E5%B8%B8%E7%94%A8API.png\" alt=\"Electron 架构图\" /></p>\n<p>我们可以看到，一个 Electron 就只会有一个主进程，多个渲染进程，进程之间我们通过 IPC 进行通信，并且可以看到，每个进程都可以调用 Native API ，意味着我们在主进程、渲染进程中可以调用部分原生模块的 API。同时主进程、渲染进程内置了 NodeJS 模块，所以我们可以全面使用 Node 特性。</p>\n<h2 id=\"electron-原生能力有哪些\"><a class=\"anchor\" href=\"#electron-原生能力有哪些\">#</a> Electron 原生能力有哪些？</h2>\n<ul>\n<li>创建原生 GUI\n<ul>\n<li>自定义应用菜单 Menu</li>\n<li>dialog 对话框</li>\n</ul>\n</li>\n<li>获取底层能力\n<ul>\n<li>剪切板</li>\n<li>定制快捷键</li>\n<li>桌面级截屏</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<p>上面只是暂列出 Electron 的部分原生能力，当然还有很多，这边暂时不做过多叙述。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>Chromium + NodeJS + Native APIs = Electron</li>\n<li>Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序</li>\n<li>进程是对运行时程序的封装，它是系统进行资源调度和分配的基本单位</li>\n<li>线程是进程的子任务，是 CPU 调度和分派的基本单位，是操作系统可识别的最小执行和调度单位</li>\n<li>一个 Electron 应用有且只有一个主进程，主进程连接着操作系统和渲染进程的桥梁</li>\n<li>可有多个渲染进程，渲染进程由主进程调用  <code>BrowserWindow</code>  API 创建浏览器窗口，每一个窗口只需要关心自己内部的 Web 页面。</li>\n<li>主进程和渲染进程可访问的模块大不同</li>\n<li>主进程与渲染进程通信通过 ipcMain 和 ipcRenderer</li>\n<li>官方未提供渲染进程之间的通信方式，只能通过主进程作为中间层</li>\n<li>remote 本质还是发送 ipc 同步消息，介于性能问题，官方不推荐使用 remote 作为通信方式</li>\n<li>ipcMain 和 ipcRenderer 均继承 EventEmitter 类，内部实现其他工具方法，最后全局导出单例 ipcMain 与 ipcRenderer</li>\n</ul>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AF%B9%20HTML5%20%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E8%B5%84%E6%BA%90%E8%BF%9B%E2%BE%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%91%A2/",
            "url": "http://jluyeyu.com/interview/html/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AF%B9%20HTML5%20%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E8%B5%84%E6%BA%90%E8%BF%9B%E2%BE%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%91%A2/",
            "title": "浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢",
            "date_published": "2022-01-06T09:20:52.000Z",
            "content_html": "<h1 id=\"浏览器是怎么对html5的离线储存资源进行管理和加载的呢\"><a class=\"anchor\" href=\"#浏览器是怎么对html5的离线储存资源进行管理和加载的呢\">#</a> 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢</h1>\n<ul>\n<li>\n<p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p>\n</li>\n<li>\n<p>原理： <code>HTML5</code>  的离线存储是基于一个新建的 <code>.appcache</code>  文件的缓存机制 (不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像 <code>cookie</code>  一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p>\n</li>\n<li>\n<p>如何使用：</p>\n<ul>\n<li>页面头部像下面一样加入一个 manifest 的属性；</li>\n<li>在 cache.manifest 文件的编写离线存储的资源；</li>\n<li>在离线状态时，操作 window.applicationCache 进行需求实现。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CACHE MANIFEST</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#v0.11</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CACHE:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>js/app.js</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>css/style.css</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>NETWORK:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>resourse/logo.png</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FALLBACK:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//offline.html</pre></td></tr></table></figure><ul>\n<li>在线的情况下，浏览器发现  <code>html </code> 头部有 <code>manifest</code>  属性，它会请求 <code>manifest</code>  文件，如果是第⼀次访问  <code>app</code>  ，那么浏览器就会根据 <code>manifest</code>  文件的内容下载相应的资源并且进行 离线存储。如果已经访问过  <code>app</code>  并且资源已经离线存储了，那么浏览器就会使用离线的资 源加载页面，然后浏览器会对比新的  <code>manifest</code>  文件与旧的  <code>manifest</code>  文件，如果文件没 有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。 离线的情况下，浏览器就直接使用离线存储的资源。</li>\n</ul>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89/",
            "url": "http://jluyeyu.com/interview/html/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89/",
            "title": "HTTP状态码及其含义",
            "date_published": "2022-01-06T08:00:52.000Z",
            "content_html": "<h3 id=\"http状态码及其含义\"><a class=\"anchor\" href=\"#http状态码及其含义\">#</a> HTTP 状态码及其含义</h3>\n<ul>\n<li>\n<p><code>1XX</code>  ：信息状态码</p>\n<ul>\n<li><code>100 Continue</code>  继续，⼀般在发送 post 请求时，已发送了  <code>http header</code>  之后服务端将返回此信息，表示确认，之后发送具体参数信息</li>\n</ul>\n</li>\n<li>\n<p><code>2XX</code>  ：成功状态码</p>\n<ul>\n<li><code>200 OK</code>  正常返回信息</li>\n<li><code>201 Created</code>  请求成功并且服务器创建了新的资源</li>\n<li>202 Accepted 服务器已接受请求，但尚未处理</li>\n</ul>\n</li>\n<li>\n<p><code>3XX</code>  ：重定向</p>\n<ul>\n<li><code>301 Moved Permanently</code>  请求的网页已永久移动到新位置。</li>\n<li><code>302 Found</code>  临时性重定向。</li>\n<li><code>303 See Other</code>  临时性重定向，且总是使用 GET 请求新的 URI 。</li>\n<li><code>304 Not Modified</code>  自从上次请求后，请求的网页未修改过。</li>\n</ul>\n</li>\n<li>\n<p><code>4XX </code> ：客户端错误</p>\n<ul>\n<li><code>400 Bad Request</code>  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li>\n<li><code>401 Unauthorized </code> 请求未授权。</li>\n<li><code>403 Forbidden</code>  禁止访问。</li>\n<li><code>404 Not Found</code>  找不到如何与 URI 相匹配的资源。</li>\n</ul>\n</li>\n<li>\n<p><code>5XX</code> : 服务器错误</p>\n<ul>\n<li><code>500 Internal Server Error</code>  最常见的服务器端错误。</li>\n<li><code>503 Service Unavailable</code>  服务器端暂时无法处理请求（可能是过载或维护）。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/html5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7%E5%B9%B6%E7%A7%BB%E9%99%A4%E4%BA%86%E5%93%AA%E4%BA%9B%E5%85%83%E7%B4%A0/",
            "url": "http://jluyeyu.com/interview/html/html5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7%E5%B9%B6%E7%A7%BB%E9%99%A4%E4%BA%86%E5%93%AA%E4%BA%9B%E5%85%83%E7%B4%A0/",
            "title": "html5有哪些新特性并移除了哪些元素",
            "date_published": "2022-01-06T08:00:52.000Z",
            "content_html": "<h1 id=\"html5有哪些新特性并移除了哪些元素\"><a class=\"anchor\" href=\"#html5有哪些新特性并移除了哪些元素\">#</a> html5 有哪些新特性并移除了哪些元素</h1>\n<p>HTML5 新特性：</p>\n<ul>\n<li>拖放 <code>(Drag and drop)API</code></li>\n<li>语义化标签 <code>(header、nav、footer、section、article、aside)</code></li>\n<li>音频、视频 <code>(audio、video)API</code></li>\n<li>画布 <code>(canvas)API</code></li>\n<li>地理定位 <code>(Geolocation)API</code></li>\n<li>本地离线存储 <code>(localStorage)</code> ，即长期存储数据，浏览器关闭后数据不丢失</li>\n<li>会话存储 <code>(sessionStorage)</code> ，即数据在浏览器关闭后自动删除</li>\n<li>表单控件 <code>(calender、date、time、url、email、search)</code></li>\n<li>新的技术 <code>(webworker、websocket)</code></li>\n</ul>\n<p>移除的元素：</p>\n<ul>\n<li>纯表现的元素： <code>basefont、big、center、font、s、strike、tt、u</code></li>\n<li>对可用性产生负面影响的元素： <code>frame、frameset、noframes</code></li>\n</ul>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E4%BA%9B/",
            "url": "http://jluyeyu.com/interview/html/%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E4%BA%9B/",
            "title": "对浏览器内核的理解及常见的浏览器内核有哪些？",
            "date_published": "2022-01-06T08:00:52.000Z",
            "content_html": "<h1 id=\"对浏览器内核的理解及常见的浏览器内核有哪些\"><a class=\"anchor\" href=\"#对浏览器内核的理解及常见的浏览器内核有哪些\">#</a> 对浏览器内核的理解及常见的浏览器内核有哪些</h1>\n<p>浏览器内核包括两部分， <code>渲染引擎</code> 和 <code>js引擎</code> 。 <code>渲染引擎</code> 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面， <code>js引擎</code> 是解析执行 js 获取网页的动态效果。<br />\n常见的游览器内核：<br />\nIE：Trident<br />\nfirefox：Gecko<br />\nchrom、safari：webkit<br />\nOpera：Presto<br />\nMicrosoft Edge：EdgeHTML</p>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20html%20%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/",
            "url": "http://jluyeyu.com/interview/html/%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20html%20%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/",
            "title": "说说你对 html 语义化的理解",
            "date_published": "2022-01-06T08:00:52.000Z",
            "content_html": "<h3 id=\"说说你对-html-语义化的理解\"><a class=\"anchor\" href=\"#说说你对-html-语义化的理解\">#</a> 说说你对 html 语义化的理解</h3>\n<h4 id=\"为什么需要语义化语义化的优点\"><a class=\"anchor\" href=\"#为什么需要语义化语义化的优点\">#</a> 为什么需要语义化，语义化的优点：</h4>\n<ol>\n<li>\n<p>结构清晰：html 语义化让页面的内容结构化，即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的。</p>\n</li>\n<li>\n<p>SEO：有利于 SEO ，可以让搜索引擎更好地获取到更多有效信息，搜索引擎的爬虫依赖于标签来确定上下文和各个关键字的权重，有效提升网页的搜索量。</p>\n</li>\n<li>\n<p>可维护性：使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n</li>\n</ol>\n<h4 id=\"常见的语义化标签\"><a class=\"anchor\" href=\"#常见的语义化标签\">#</a> 常见的语义化标签</h4>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/article_images/html%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png\" alt=\"html语义化标签\" /></p>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4/",
            "url": "http://jluyeyu.com/interview/html/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4/",
            "title": "从浏览器地址栏输入url到显示页面的步骤",
            "date_published": "2022-01-06T00:30:52.000Z",
            "content_html": "<h3 id=\"从浏览器地址栏输入url到显示页面的步骤\"><a class=\"anchor\" href=\"#从浏览器地址栏输入url到显示页面的步骤\">#</a> 从浏览器地址栏输入 url 到显示页面的步骤</h3>\n<h4 id=\"基础版本\"><a class=\"anchor\" href=\"#基础版本\">#</a> 基础版本</h4>\n<ol>\n<li>\n<p>浏览器根据请求的  <code>URL</code>  交给  <code>DNS</code>  域名解析，找到真实  <code>IP </code> ，向服务器发起请求；</p>\n</li>\n<li>\n<p>服务器交给后台处理完成后返回数据，浏览器接收文件（  <code>HTML、JS、CSS </code> 、图象等）；</p>\n</li>\n<li>\n<p>浏览器对加载到的资源（  <code>HTML、JS、CSS </code> 等）进⾏语法解析，建⽴相应的内部数据结构 （如  <code>HTML</code>  的  <code>DOM</code>  ）；</p>\n</li>\n<li>\n<p>载⼊解析到的资源⽂件，渲染页面，完成。</p>\n</li>\n</ol>\n<h4 id=\"详细版本\"><a class=\"anchor\" href=\"#详细版本\">#</a> 详细版本</h4>\n<ol>\n<li>\n<p>在浏览器地址栏输入 URL</p>\n</li>\n<li>\n<p>浏览器查看<strong>缓存</strong>，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p>\n</li>\n<li>\n<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li>\n<li>检验新鲜通常有两个 HTTP 头进行控制 <code>Expires</code>  和 <code>Cache-Control</code> ：\n<ul>\n<li>HTTP1.0 提供 Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1 增加了 Cache-Control: max-age=, 值为以秒为单位的最大新鲜时间</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>浏览器<strong>解析 URL</strong> 获取协议，主机，端口，path</p>\n</li>\n<li>\n<p>浏览器<strong>组装一个 HTTP（GET）请求报文</strong></p>\n</li>\n<li>\n<p>浏览器<strong>获取主机 ip</strong> 地址，过程如下：</p>\n</li>\n<li>\n<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts 文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS 缓存</li>\n<li>DNS 递归查询（可能存在负载均衡导致每次 IP 不一样）</li>\n</ol>\n</li>\n<li>\n<p><strong>打开一个 socket 与目标 IP 地址，端口建立 TCP 链接</strong>，三次握手如下：</p>\n</li>\n<li>\n<ol>\n<li>客户端发送一个 TCP 的 <code>SYN=1，Seq=X</code>  的包到服务器端口</li>\n<li>服务器发回 <code>SYN=1， ACK=X+1， Seq=Y</code>  的响应包</li>\n<li>客户端发送 <code>ACK=Y+1， Seq=Z</code></li>\n</ol>\n</li>\n<li>\n<p>TCP 链接建立后发送<strong> HTTP 请求</strong></p>\n</li>\n<li>\n<p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序</p>\n</li>\n<li>\n<p>服务器检查 HTTP 请求头是否包含缓存验证信息如果验证缓存新鲜，返回 304 等对应状态码</p>\n</li>\n<li>\n<p>处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作</p>\n</li>\n<li>\n<p>服务器将响应报文通过 TCP 连接发送回浏览器</p>\n</li>\n<li>\n<p>浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下：</p>\n</li>\n<li>\n<ol>\n<li>主动方发送 <code>Fin=1， Ack=Z， Seq= X</code>  报文</li>\n<li>被动方发送 <code>ACK=X+1， Seq=Z</code>  报文</li>\n<li>被动方发送 <code>Fin=1， ACK=X， Seq=Y</code>  报文</li>\n<li>主动方发送 <code>ACK=Y， Seq=X</code>  报文</li>\n</ol>\n</li>\n<li>\n<p>浏览器检查响应状态吗：是否为 <code>1XX，3XX， 4XX， 5XX</code> ，这些情况处理与 2XX 不同</p>\n</li>\n<li>\n<p>如果资源可缓存，进行缓存</p>\n</li>\n<li>\n<p>对响应进行解码（例如 gzip 压缩）</p>\n</li>\n<li>\n<p>根据资源类型决定如何处理（假设资源为 HTML 文档）</p>\n</li>\n<li>\n<p><strong>解析 HTML 文档，构件 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</p>\n</li>\n<li>\n<p>构建 DOM 树：</p>\n</li>\n<li>\n<ol>\n<li>Tokenizing：根据 HTML 规范将字符流解析为标记</li>\n<li>Lexing：词法分析将标记转换为对象并定义属性和规则</li>\n<li>DOM construction：根据 HTML 标记关系将对象组成 DOM 树</li>\n</ol>\n</li>\n<li>\n<p>解析过程中遇到图片、样式表、js 文件，启动下载</p>\n</li>\n<li>\n<p>构建 CSSOM 树：</p>\n</li>\n<li>\n<ol>\n<li>`Tokenizing``：字符流转换为标记流</li>\n<li><code>Node</code> ：根据标记创建节点</li>\n<li><code>CSSOM</code> ：节点创建 CSSOM 树</li>\n</ol>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\">根据 <code>DOM树</code> 和 <code>CSSOM树</code> 构建渲染树:</a></p>\n</li>\n<li>\n<ol>\n<li>从 DOM 树的根节点遍历所有可见节点，不可见节点包括：1） <code>script</code> , <code>meta</code>  这样本身不可见的标签。2) 被 css 隐藏的节点，如 <code>display: none</code></li>\n<li>对每一个可见节点，找到恰当的 CSSOM 规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li>\n<p>js 解析如下：</p>\n</li>\n<li>\n<ol>\n<li>浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此时<strong> document.readystate 为 loading</strong></li>\n<li>HTML 解析器遇到没有 <code>async</code>  和 <code>defer</code>  的 script 时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用 document.write () 把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容</li>\n<li>当解析器遇到设置了 <code>async</code>  属性的 script 时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用 <code>document.write()</code> ，它们可以访问自己 script 和之前的文档元素</li>\n<li>当文档完成解析， <code>document.readState</code>  变成 <code>interactive</code></li>\n<li>所有 <code>defer</code>  脚本会按照在文档出现的顺序执行， <code>延迟脚本能访问完整文档树，禁止使用document.write()</code></li>\n<li>浏览器在 Document 对象上触发 <code>DOMContentLoaded</code>  事件</li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行， <code>document.readState</code>  变为 <code>complete</code> , <code>window</code>  触发 <code>load</code>  事件</li>\n</ol>\n</li>\n<li>\n<p>显示页面（ <code>HTML</code>  解析过程中会逐步显示页面）</p>\n</li>\n</ol>\n<p><strong>详细简版</strong></p>\n<ol>\n<li>从浏览器接收  <code>url</code>  到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</li>\n<li>开启网络线程到发出一个完整的 <code>HTTP</code>  请求（这一部分涉及到 dns 查询， <code>TCP/IP</code>  请求，五层原因特网协议栈等知识）</li>\n<li>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li>\n<li>后台和前台的  <code>HTTP</code>  交互（这一部分包括  <code>HTTP</code>  头部、响应码、报文结构、 <code>cookie</code>  等知识，可以提下静态资源的  <code>cookie</code>  优化，以及编码解码，如 <code>gzip</code>  压缩等）</li>\n<li>单独拎出来的缓存问题， <code>HTTP</code>  的缓存（这部分包括 http 缓存头部， <code>ETag</code> ， <code>catch-control</code>  等）</li>\n<li>浏览器接受到  <code>HTTP</code>  数据包后的解析流程（解析 <code>html</code>  - 词法分析然后解析成  <code>dom</code>  树、解析  <code>css</code>  生存  <code>css</code>  规则树、合并成  <code>render</code>  树，然后  <code>layout</code> 、 <code>painting</code>  渲染、复合图层的合成、 <code>GPU</code>  绘制、外链资源的处理、 <code>loaded</code>  和  <code>DOMContentLoaded</code>  等）</li>\n<li><code>CSS</code>  的可视化格式模型（元素的渲染规则，如包含块，控制框， <code>BFC</code> ， <code>IFC</code>  等概念）</li>\n<li><code>JS</code>  引擎解析过程（ <code>JS</code>  的解释阶段，预处理阶段，执行阶段生存执行上下文， <code>V0</code> ，作用域链、回收机制等等）</li>\n<li>其它（可以拓展不同的知识模块，如跨域，web 安全， <code>hybrid</code>  模式等等内容）</li>\n</ol>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/img%E6%A0%87%E7%AD%BE%E7%9A%84title%E5%92%8Calt%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/",
            "url": "http://jluyeyu.com/interview/html/img%E6%A0%87%E7%AD%BE%E7%9A%84title%E5%92%8Calt%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/",
            "title": "img标签的title和alt有什么区别",
            "date_published": "2022-01-05T13:32:52.000Z",
            "content_html": "<h3 id=\"img标签的-title-和-alt-有什么区别\"><a class=\"anchor\" href=\"#img标签的-title-和-alt-有什么区别\">#</a> img 标签的 title 和 alt 有什么区别</h3>\n<p><code>title</code>  通常是⿏标滑动到元素上的时候显示<br />\n alt 是 <code>&lt;img&gt;</code>  的特有属性，是图片内容的等价描述，⽤于图片外法加载时显示。可提高图片可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</p>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/HTTP%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%94%A8%E9%80%94/",
            "url": "http://jluyeyu.com/interview/html/HTTP%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%94%A8%E9%80%94/",
            "title": "HTTP的几种常见请求方法用途",
            "date_published": "2022-01-05T13:30:52.000Z",
            "content_html": "<h3 id=\"http的几种常见请求方法用途\"><a class=\"anchor\" href=\"#http的几种常见请求方法用途\">#</a> HTTP 的几种常见请求方法用途</h3>\n<ul>\n<li><code>GET</code>  方法\n<ul>\n<li>其目的发送一个请求来取得服务器上的某一资源。</li>\n</ul>\n</li>\n<li><code>POST</code>  方法\n<ul>\n<li>向 URL 指定的资源提交数据或附加新的数据。</li>\n</ul>\n</li>\n<li><code>PUT</code>  方法\n<ul>\n<li>跟  <code>POST</code>  方法很像，也是想服务器提交数据。但是，它们之间有不同。 <code>PUT</code>  指定了资 源在服务器上的位置，而 <code>POST</code>  没有。</li>\n</ul>\n</li>\n<li><code>HEAD</code>  方法\n<ul>\n<li>只请求页面的首部。</li>\n</ul>\n</li>\n<li><code>DELETE</code>  方法\n<ul>\n<li>删除服务器上的某资源。</li>\n</ul>\n</li>\n<li><code>OPTIONS</code>  方法\n<ul>\n<li>它用于获取当前 URL 所支持的方法。如果请求成功，会有一个 Allow 的头包含类似  <code>GET,POST</code>  这样的信息。</li>\n</ul>\n</li>\n<li><code>TRACE</code>  方法\n<ul>\n<li>它被用于激发一个远程的，应用层的请求消息回路。</li>\n</ul>\n</li>\n<li><code>CONNECT</code>  方法\n<ul>\n<li>把请求连接转换到透明的  <code>TCP/IP</code>  通道。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9BSEO/",
            "url": "http://jluyeyu.com/interview/html/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9BSEO/",
            "title": "前端需要注意哪些SEO",
            "date_published": "2022-01-05T13:20:52.000Z",
            "content_html": "<h3 id=\"前端需要注意哪些seo\"><a class=\"anchor\" href=\"#前端需要注意哪些seo\">#</a> 前端需要注意哪些 SEO</h3>\n<ul>\n<li>合理的  <code>title 、 description 、 keywords </code> ：搜索对着三项的权重逐个减小， title 值强调重点即可，重要关键词出现不要超过 2 次，⽽且要靠前，不同页面 title 要有所不同； description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同； keywords 列举出重要关键词即可</li>\n<li><code>语义化的 HTML 代码</code> ，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容⼀定会被抓取</li>\n<li>重要内容不要用 js 输出： <code>爬虫不会执行js获取内容</code></li>\n<li>少用 iframe ：搜索引擎不会抓取 iframe 中的内容</li>\n<li>非装饰性图片必须加  <code>alt(图片无法加载时显示的文字)</code></li>\n<li>提高网站速度：网站速度是搜索引擎排序的⼀个重要指标</li>\n</ul>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/interview/html/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "http://jluyeyu.com/interview/html/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "如何进行网站性能优化",
            "date_published": "2022-01-05T13:20:52.000Z",
            "content_html": "<h3 id=\"如何进行网站性能优化\"><a class=\"anchor\" href=\"#如何进行网站性能优化\">#</a> 如何进行网站性能优化</h3>\n<ol>\n<li>\n<p>content 方面</p>\n<ul>\n<li>减少 HTTP 请求：合并文件、 CSS 精灵、 inline Image</li>\n<li>减少 DNS 查询： DNS 缓存、将资源分布到恰当数量的主机名</li>\n<li>减少 DOM 元素数量</li>\n</ul>\n</li>\n<li>\n<p>Server 方面</p>\n<ul>\n<li>使用 CDN</li>\n<li>配置 ETag</li>\n<li>对组件使用 Gzip 压缩</li>\n</ul>\n</li>\n<li>\n<p>Cookie 方面</p>\n<ul>\n<li>减小 cookie 大小</li>\n</ul>\n</li>\n<li>\n<p>css 方面</p>\n</li>\n</ol>\n<ul>\n<li>将样式表放到页面顶部</li>\n<li>不使用 CSS 表达式</li>\n<li>使用  <code>&lt;link&gt;</code>  不使用 @import</li>\n</ul>\n<ol start=\"5\">\n<li>Javascript 方面\n<ul>\n<li>将脚本放到页面底部</li>\n<li>异步加载不是太重要的资源</li>\n<li>将 javascript 和 css 从外部引入</li>\n<li>压缩 javascript 和 css</li>\n<li>删除不需要的脚本</li>\n<li>减少 DOM 访问</li>\n</ul>\n</li>\n<li>图片方面\n<ul>\n<li>优化图片：根据实际颜⾊需要选择⾊深、压缩</li>\n<li>优化 css 精灵</li>\n<li>不要在 HTML 中拉伸图片</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "interview",
                "html",
                "html",
                "面试"
            ]
        },
        {
            "id": "http://jluyeyu.com/hello-blog/",
            "url": "http://jluyeyu.com/hello-blog/",
            "title": "本站说明",
            "date_published": "2021-12-31T12:57:00.780Z",
            "content_html": "<p>​\t本网站主要是分享前端的知识，包括 leetcode 算法题、面试经验、javascript、html、css、前端小技巧、常见框架 (vue、react)、第三方库等使用，也会分享一些自己的学习成长过程、和项目学习经验，以上。</p>\n<p><img data-src=\"https://yeyu-blog.oss-cn-beijing.aliyuncs.com/headicons/m8.jpg\" alt=\"图1\" /></p>\n",
            "tags": []
        },
        {
            "id": "http://jluyeyu.com/leetcode/507.%20%E5%AE%8C%E7%BE%8E%E6%95%B0/",
            "url": "http://jluyeyu.com/leetcode/507.%20%E5%AE%8C%E7%BE%8E%E6%95%B0/",
            "title": "507. 完美数",
            "date_published": "2021-12-31T02:18:02.000Z",
            "content_html": "<h4 id=\"507-完美数\"><a class=\"anchor\" href=\"#507-完美数\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGVyZmVjdC1udW1iZXIv\">507. 完美数</span></h4>\n<p>难度：简单</p>\n<h4 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目：</h4>\n<p>对于一个 <strong>正整数</strong>，如果它和除了它自身以外的所有 <strong>正因子</strong> 之和相等，我们称它为 「完美数」。</p>\n<p>给定一个 <strong>整数</strong>  <code>n</code> ， 如果是完美数，返回  <code>true</code> ，否则返回  <code>false</code></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：num = 28\n输出：true\n解释：28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, 和 14 是 28 的所有正因子。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：num = 6\n输出：true\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：num = 496\n输出：true\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入：num = 8128\n输出：true\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= num &lt;= 10^8</code></li>\n</ul>\n<h4 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h4>\n<p>我们可以枚举<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 的所有真因子，累加所有真因子之和，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">sum</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{sum}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">sum</span></span></span></span></span>。若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">sum</mtext><mo>=</mo><mtext mathvariant=\"italic\">num</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{sum}=\\textit{num}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">sum</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">num</span></span></span></span></span> 则返回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"monospace\">true</mtext></mrow><annotation encoding=\"application/x-tex\">\\texttt{true}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55358em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord texttt\">true</span></span></span></span></span>，否则返回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"monospace\">false</mtext></mrow><annotation encoding=\"application/x-tex\">\\texttt{false}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61111em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord texttt\">false</span></span></span></span></span>。</p>\n<p>在枚举时我们并不需要全部枚举。我们只需要枚举不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mtext mathvariant=\"italic\">num</mtext></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{\\textit{num}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord text\"><span class=\"mord textit\">num</span></span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span> 的数。这是因为如果 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">num</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{num}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">num</span></span></span></span></span> 有一个大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mtext mathvariant=\"italic\">num</mtext></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{\\textit{num}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord text\"><span class=\"mord textit\">num</span></span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span> 的因数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>，那么它一定有一个小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mtext mathvariant=\"italic\">num</mtext></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{\\textit{num}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord text\"><span class=\"mord textit\">num</span></span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span> 的因数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mtext mathvariant=\"italic\">num</mtext><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\textit{num}}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">num</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 。</p>\n<p>在枚举时，若找到了一个因数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>，那么就找到了因数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mtext mathvariant=\"italic\">num</mtext><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\textit{num}}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord textit mtight\">num</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>。</p>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    def <span class=\"token function\">checkPerfectNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> bool<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> False</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        d <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> d <span class=\"token operator\">*</span> d <span class=\"token operator\">&lt;=</span> num<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                sum <span class=\"token operator\">+=</span> d</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> d <span class=\"token operator\">*</span> d <span class=\"token operator\">&lt;</span> num<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    sum <span class=\"token operator\">+=</span> num <span class=\"token operator\">/</span> d</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            d <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">==</span> num</pre></td></tr></table></figure><p>此外也可以计算后直接返回，毕竟太少了</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">checkPerfectNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> num <span class=\"token operator\">===</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">28</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">496</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">8128</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">33550336</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "leetcode"
            ]
        },
        {
            "id": "http://jluyeyu.com/project/onlineResume/0.%20%E5%89%8D%E8%A8%80/",
            "url": "http://jluyeyu.com/project/onlineResume/0.%20%E5%89%8D%E8%A8%80/",
            "title": "0. 前言",
            "date_published": "2021-12-30T12:38:52.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<h2 id=\"react-相关技术栈\"><a class=\"anchor\" href=\"#react-相关技术栈\">#</a> React 相关技术栈</h2>\n<ul>\n<li>react 全家桶套餐\n<ul>\n<li>react: 版本在  <code>^17.0.1</code></li>\n<li>react-router</li>\n<li>react-router-dom</li>\n</ul>\n</li>\n<li>redux: 状态管理容器</li>\n<li>rc-redux-model: 让 redux 使用起来更加方便</li>\n<li>redux-logger: 控制台看到最新 redux 的数据</li>\n</ul>\n<h2 id=\"配置相关技术栈\"><a class=\"anchor\" href=\"#配置相关技术栈\">#</a> 配置相关技术栈</h2>\n<p><strong>Babel</strong></p>\n<p>当前主流的 JS 编译器，我们可以从官网看到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGYmFiZWxqcy5pbyUyRmRvY3MlMkZlbiUyRiUyM2pzeC1hbmQtcmVhY3Q=\">Babel 和 React JSX</span> 的关系。所以通过 Babel 将我们的 React JSX 转成浏览器所能识别的 JS 语法是有必要的。</p>\n<p><strong>Webpack</strong></p>\n<p>好评率较高的打包工具，如果说你的应用程序非常小，没有什么静态资源，只需要一个 JS 文件就可以满足需求，这时使用 Webpack 并不是一个好的选择。很明显，我们的简历平台并不符合这种场景。</p>\n<blockquote>\n<p>如果你对 Webpack 还不太了解，建议阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vYm9vay82OTUwNjQ2NzI1Mjk1OTk2OTQwL3NlY3Rpb24vNjk2Mjg5NTMzMTczMDYyMDQyMw==\">彩蛋篇 - Webpack 基础介绍与两大利器</span></p>\n</blockquote>\n<p>我们可能会遇到一些问题：</p>\n<ul>\n<li>webpack 将我们模块打包好之后，我们手动写一个 html，加载打包好的资源，这没问题，但能自动化的事情，不香吗？不禁思考，能否通过 webpack 来生成 html 页面？</li>\n<li>build 打包后的 index.html 直接打开即可，但随即带来的问题是：没有热更新，我改一个字母、一句文案，都需要 build 一次才能看到结果，这种开始方式有些原始，怎么办？</li>\n<li>环境区分，很多时候我们需要针对不同环境进行不同操作，当配置文件大了之后，里边充斥着大量的三元运算符用户环境判断，属实蛋疼，怎么办？</li>\n</ul>\n<p>上述问题业界内较好的解决方案是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd2VicGFjay5qcy5vcmclMkZwbHVnaW5zJTJGaHRtbC13ZWJwYWNrLXBsdWdpbiUyRiUyM3Jvb3Q=\">html-webpack-plugin</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd2VicGFjay5qcy5vcmclMkZjb25maWd1cmF0aW9uJTJGZGV2LXNlcnZlciUyRg==\">webpack-dev-server</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd2VicGFjay5qcy5vcmclMkZndWlkZXMlMkZwcm9kdWN0aW9uJTJGJTIzc2V0dXA=\">webpack-merge</span>，同学们可以私下了解它们的工作原理。</p>\n<p><strong>TypeScript</strong></p>\n<p>小伙伴们是否有过这种体会，奋笔疾书的写下了一段代码，Ctrl+S 保存，Hot 热更新，然后页面白屏。</p>\n<p>回头一看，原来  <code>[...Array.from()]</code>  写成了  <code>[...Array.form()]</code> ， 诸如此类问题还有许多，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGcm9sbGJhci5jb20lMkZibG9nJTJGdG9wLTEwLWphdmFzY3JpcHQtZXJyb3JzJTJG\">Rollbar 平台统计了前端项目中 Top10 的错误类型</span>，排在最前面的就是：</p>\n<pre><code>Uncaught TypeError: Cannot read property xxx of undefined\n</code></pre>\n<p>为了在编写代码阶段，就能规避此类低级 Bug 问题，我们引入了 TypeScript。同时采用 eslint + prettier 进行代码风格检查和代码自动格式化，毕竟阿宽有点代码洁癖。</p>\n<p>为此，我们相关配置最后的技术栈为：</p>\n<ul>\n<li>Babel</li>\n<li>Webpack</li>\n<li>Eslint</li>\n<li>Prettier</li>\n<li>TypeScript</li>\n</ul>\n",
            "tags": [
                "项目相关",
                "在线简历生成",
                "项目"
            ]
        },
        {
            "id": "http://jluyeyu.com/leetcode/846.%20%E4%B8%80%E6%89%8B%E9%A1%BA%E5%AD%90/",
            "url": "http://jluyeyu.com/leetcode/846.%20%E4%B8%80%E6%89%8B%E9%A1%BA%E5%AD%90/",
            "title": "846. 一手顺子",
            "date_published": "2021-12-30T12:13:15.000Z",
            "content_html": "<h4 id=\"846-一手顺子\"><a class=\"anchor\" href=\"#846-一手顺子\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGFuZC1vZi1zdHJhaWdodHMv\">846. 一手顺子</span></h4>\n<p>难度：中等</p>\n<h4 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目：</h4>\n<p>Alice 手中有一把牌，她想要重新排列这些牌，分成若干组，使每一组的牌数都是  <code>groupSize</code>  ，并且由  <code>groupSize</code>  张连续的牌组成。</p>\n<p>给你一个整数数组  <code>hand</code>  其中  <code>hand[i]</code>  是写在第  <code>i</code>  张牌，和一个整数  <code>groupSize</code>  。如果她可能重新排列这些牌，返回  <code>true</code>  ；否则，返回  <code>false</code></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n输出：true\n解释：Alice 手中的牌可以被重新排列为 [1,2,3]，[2,3,4]，[6,7,8]。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：hand = [1,2,3,4,5], groupSize = 4\n输出：false\n解释：Alice 手中的牌无法被重新排列成几个大小为 4 的组。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= hand.length &lt;= 104</code></li>\n<li><code>0 &lt;= hand[i] &lt;= 109</code></li>\n<li><code>1 &lt;= groupSize &lt;= hand.length</code></li>\n</ul>\n<h4 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h4>\n<p>题目要求将数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span> 中的牌分组使得每组的大小是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">groupSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">e</span></span></span></span>。假设数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>a</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">hand</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span></span></span></span> 的长度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，只有当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mtext mathvariant=\"italic\">groupSize</mtext><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\bmod\\textit{groupSize}=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 时才可能完成分组，因此如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mspace></mspace><mspace width=\"0.6666666666666666em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext mathvariant=\"italic\">groupSize</mtext><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\mod\\textit{groupSize}\\ne0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 则直接返回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>false</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{false}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">false</span></span></span></span></span>。</p>\n<p>当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mtext mathvariant=\"italic\">groupSize</mtext><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\bmod \\textit{groupSize} = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 时，可以将数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span> 中的牌分组使得每组的大小是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">groupSize</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{groupSize}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span></span></span></span>，此时需要判断是否存在一种分组方式使得同一组的牌都是连续的。</p>\n<p>由于每张牌都必须被分到某个组，因此可以使用贪心的策略。假设尚未分组的牌中，最小的数字是 xx，则如果存在符合要求的分组方式，xx 一定是某个组中的最小数字（否则 xx 不属于任何一个组，不符合每张牌都必须被分到某个组），该组的数字范围是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mtext mathvariant=\"italic\">groupSize</mtext><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x, x + \\textit{groupSize} - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>。在将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 $ x + \\textit {groupSize} - 1$ 的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">groupSize</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{groupSize}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span></span></span></span> 张牌分成一个组之后，继续使用贪心的策略对剩下的牌分组，直到所有的牌分组结束或者无法完成分组。如果在分组过程中发现从最小数字开始的连续 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">groupSize</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{groupSize}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span></span></span></span> 个数字中有不存在的数字，则无法完成分组。</p>\n<p>首先对数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span> 排序，并使用哈希表记录数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span> 中每个元素的出现次数，然后遍历数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span>，使用基于上述贪心策略的做法判断是否可以完成分组。贪心策略的具体做法如下：</p>\n<p>将当前元素记为 xx，如果 xx 不在哈希表中则跳过，如果 xx 在哈希表中，则 xx 是某个组中的最小数字（因为数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">hand</mtext></mrow><annotation encoding=\"application/x-tex\">\\textit{hand}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textit\">hand</span></span></span></span></span> 有序，当遍历到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 一定是所有尚未分组的元素中的最小数字），该组的数字范围是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mtext mathvariant=\"italic\">groupSize</mtext><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x, x + \\textit{groupSize} - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>；</p>\n<p>如果可以完成分组，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mtext mathvariant=\"italic\">groupSize</mtext><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x + \\textit{groupSize} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的每个整数在哈希表中记录的出现次数都至少为 1，如果遇到某个整数的出现次数为 0 则无法完成分组，返回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>false</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{false}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">false</span></span></span></span></span>；</p>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mtext mathvariant=\"italic\">groupSize</mtext><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x + \\textit{groupSize} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textit\">groupSize</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的每个整数在哈希表中记录的出现次数减 1，如果出现次数减为 0 则从哈希表中移除该整数；</p>\n<p>对于其余元素，重复上述操作，直到遍历结束。</p>\n<p>遍历结束之后，如果没有出现无法完成分组的情况，返回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>true</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{true}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">true</span></span></span></span></span>。</p>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isNStraightHand</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hand<span class=\"token punctuation\">,</span> groupSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> groupSize <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    hand<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> cnt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> hand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cnt<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> hand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> groupSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cnt<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                cnt<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "每日一题",
                "leetcode",
                "贪心"
            ]
        }
    ]
}